take but make sure you are interested in subject.
This is an awesome class with an amazing professor.  Take this class.
You must be prepared to do a lot of work with little support -- in other words, put up with some frustrations.
This course is well taught, has meaningful content, and is a good deal of fun. Even if compilation is not directly relevant to your concentration, every programmer should know the basics of how compilers work.
It's a fun interesting class
Don't get me wrong, this is an awesome class, with Greg in his usual awesome ranting lecture mode.Are you taking other hard classes this semester? If yes, then YOU WILL GET WORKED TO THE BONE IN THIS CLASS. YAHHH. Also make sure you pick a solid partner in this class, ESPECIALLY if you are taking other hard classes this semester. I ended up getting stuck with someone for much of the semester, and it felt like I had to play project manager and software architect every week for our assignments and explain to my partner everything they didn't understand.So if you flailed around when you took CS51 or 61 and don't feel comfortable with the concepts in those classes or hate ocaml, you may want to do yourself and your alternate universe CS153 partner a favor and don't take the class. Otherwise, you must be masochistic and will have to work your tail off --- (tail end recursion pun anyone?)Also beware of the Graph Coloring and Register Allocation double assignment. It was pretty consuming and required a lot of time!
This was a great CS course. I have no plans in dealing wit Compilers in the future but I really learned a lot from this class. The psets are really challenging but after you mess around with things for a while, you'll get the hang of it, you'll get it working, you'll past all of the tests, and you'll feel really really good. Some psets were definitely more brutal than others but overall I felt like they were all worthwhile.
this is a really, really hard and time-intensive class. greg wasn't kidding when he said that you had to be prepared "to work your tail off." but it's extremely rewarding when you look back and realize that you essentially made a mini-compiler to go all the way from ml to binary. this will make you appreciate compilers (and compile-writers) and change the way you reason about your code.
Compilers is one of the most interesting subjects in computer science.  It draws from all levels of the stack, including low level assembly and high level graph theory. While it's challenging, it is not unrealistic in its expectations. While I haven't taken OS, it seems like the OS for those who aren't willing to sacrifice the rest of their life, for a semester.Plus, Professor Morrisett is one of the best teachers you will ever have!
This class takes a lot of work, but it's worth it.  You learn how compilers work, and become extremely good at functional programming and OCaml.  It also shows why certain programming practices result in faster code than others, so even if you don't plan on building compilers yourself, you will become a stronger programmer.
This class is very difficult. There's not that much of a collaborative atmosphere besides the fact you work with a partner. If you decide to take the class without much programming experience, be prepared for a long ride. Unlike 50, 51, or 61, where there are a lot of people taking the class and there may be some people that have the same problems as you, this class is much smaller. As a consequence, there aren't that many office hours where you can go to get help (about 90 minutes a week). If you can find a good partner that is willing to work and fits well with you, then I would recommend this class. It definitely makes you a lot better at programming and you'll come out of the class with one of the hardest CS classes under your belt.
Super interesting material, teaches you problem solving and writing large amounts of code and thinking about how to abstract things properly out of necessity.
This course is amazing! Greg is a great professor who is very passionate and excited about compilers. He does a great job of introducing various components in compilers without throwing everything at you at once. Definitely take this class if you have an interest in compilers! Also, make sure you find a partner who you work well with
The class is very well taught, the materials are excellent, and the course is optimally structured. Take a lot of time to evaluate your own work, however, because the feedback you receive on assignments may be insufficient.
A great class, where you put the ideas of CS 121 into practice. You implement the most important parts of a compiler, and thereby learn important software development principles. You gain a much better understanding of computers in general after taking the course.
One of the must-take courses in the CS department.
Take this class if you're willing to put in a solid amount of effort but come out on the other side having learned a lot!
If you're studying CS you owe it to yourself to take this course. This class is very difficult (if you haven't already been exposed to many of the ideas) but also very rewarding. I'm taking the class as a sophomore and feel well prepared having taken CS51 and CS20. If you did well in those classes or equivalents, you're probably prepared for this course. You definitely don't need to have taken CS61 or 121 before or concurrently with this course. Lastly, two notes: 1) Pick a good partner. Things are much more difficult when you have to pick up the slack for a partner who can't do his share of the work. 2) Expect to work really hard and start on the projects early.
compilers
This class is really hard for those who don't have a lot of experience coding. I recommend starting early and reading Appel, but if you want to be in the tech industry or understand computer science, then you can't afford to not take this class. You really understand type checking, compiling, why syntax is formed the way it is, and the heap vs stack. While some of these concepts are covered in CS61, I learned it much better in CS153.
I would call this class CS51: the Sequel. This class is Morrisett in his element. If you liked CS51, you will love this class.The material was very applicable and very interesting. You come to understand the process of how a string of letters becomes assembly instructions for the computer to process. The course is definitely challenging. I took only CS50 and CS51 before this class and I thought that since those classes were easy this would be more of the same.I was wrong. The projects are the most rewarding part of this class, but they were grueling. Expect psets to invade not only your weekend, but your whole week. Even when you start early on the last one, you have to allocate 40 hours knowing you will spend more time. My advice is to future students is to really learn Ocaml because you will save a lot of time writing good functional code.Yes the class was hard but this course was also the most rewarding CS class I have ever taken. Morrisett is REALLY smart and really friendly. He loves getting to know students and is really good about making himself available to students who reach out. It was a pleasure taking his class, I wish I could take more.
You can take this class after just 51; be prepared to put in a lot of time, though. Well worth the effort, definitely one of the classes you learn the most from. Morrisett is a great lecturer.
Definitely one of the best undergraduate CS courses at Harvard (with 161, 124, and maybe some others)--take this class if you can!You learn a ton of useful and fascinating stuff about compilers, and it's not even too hard! Seriously, the workload is pretty light most of the semester, with the exception of the last pset or 2 which take some time.Morrisett is really good at teaching this stuff and the problem sets are actually pretty fun.
This class is amazing! I feel like I learned a lot about compilers, software engineering and even OCAML. Also, Greg is just a great teacher, lectures that really cares and wants us to learn while being challenged. It is one of my favorite CS classes so far and I am a junior. I really hope Greg teaches more classes! He is the man!
A lot of work, but the finished product is really cool! You can see how your code is compiled into low-level instructions and write a good compiler that optimizes the hell out of the original code. I definitely recommend this for most cs majors to understand what's going on at a somewhat lower level.
Really interesting material and fun psets
Go to every class because it's not videotaped and reading the slides isn't as good as being present.
Take this class! Lectures very informative; one learns a lot from the assignments.
Great class with a great professor. I found some of the earlier assignments rather tedious, but it gets more interesting as you go on.
This is a great class to take for CS concentrators. If you have little CS experience outside of CS 50, you will struggle as you learn Ocaml. CS 51 really helps, but I took it a while ago, so had to brush up. Lectures are short but dense, and Greg is great at answering questions but moves pretty quickly. Slides are comprehensive, but contain errors on occasion. The psets aren't terribly bad, as the concepts are often discussed in lecture through pseudocode. The progression of material is great, and I took away a lot of great concepts from this class. Be prepared to spend a lot of time hacking on the psets each week, as that's where you'll learn the most.
This class is awesome, prepare to have your mind blown. By taking this course you will gain a much deeper understanding of one of the most important tools in computer science :).
It is very coding heavy, but is designed to be done with a partner, so as long as you have a good partner who won't bail on you (like mine...) it won't be bad. Preferably go into the class with someone you know you will partner with who you respect.
As long as you're willing to work hard, this class is great!
If you like programming computers, you should take this course.
Start the class projects early
A good course where you learn by doing. You'll learn a lot about how compilers work.
This class involves a lot of programming, but it is worth it.
This class will give you a pretty good overview of how compilers work, and how compiling techniques very based on the source language and destination language. It's fun, and pretty painless (well you have to spend about 8 hours a week coding, but that's not too bad).
Fun (if long) problem sets, interesting and relevant material.
It is a good deal of work. Do not procrastinate on the problem sets, and all will be well.
A great course with a great professor.  You end up implementing the entire stack, ultimately building an optimizing compiler from ML to MIPS assembly language.
Not very difficult conceptually, but the psets are pretty cool.
You'll fall in love with type checking.
Make sure you have a partner.
This class is brilliant. It combines CS theory and the intricacies of systems in a way that very very few classes do. Morrisett adds an angle of programming languages on top of this, and keeps modern challenges in language/compiler design in view. The assignments are engaging and rewarding. Don't take this class because you need it, or because "understanding compilers is important"--both of those may be true, but take this course because thinking about compilation will stimulate many parts of your CS-brain. There are hard problems in this field, and they are fun to think about. Expect to do a bunch of design and code writing.
There is a lot of coding in this class, but after taking it you will learn how to write awesome compilers. Also, it is 2 hours a week of listening to Greg's awesome rants -- don't miss out on that.
You'll certainly learn the materials covered by the course by taking it, and the psets will keep you reasonably engaged, but beyond that, there's not too much that is special about CS 153.  It's certainly worth taking for the knowledge, but if you're looking mostly for a class experience, you might want to look elsewhere.
Fun, really cool assignments. You feel pretty proud of the compiler you produce at the end. There are some assignments that take a bit of time to complete. It's really helpful if you have someone you know that you can work with on the assignments.
It's a tough class and the assignments take forever. However, Greg is really in his element for this class... so he makes it awesome. The entire CS51 course is set up more or less so you can take this course. You won't appreciate functional concepts (eg pureness) until you start writing a compiler.
If you are interested in programming languages and compliers, this will be an interesting and enjoyable class.
if you like low-level computing, this class will teach you a ton about very important stuff. it also emanates morrisett, if you know what i mean.
This course gives you a good overview of the process and difficulties of compiling high-level code into efficient assembly, and the homeworks are an excellent way to apply the lecture material in constructing your own compiler.
This is a wonderful course by virtue of the material. Morrisett is also a pretty good lecturer. The problem sets are awesome and lots of fun. There is a lot of coding, but it is a lot of fun and not overwhelming at all. You should really take this course, if you want to be a better programmer and overall computer scientist.
You actually write most of the major components of a compiler in this course, which is incredibly rewarding. Professor Morrisett also gives tremendously entertaining and informative lectures that are full of personal insights into the field. Be prepared to do a lot of hacking though (far more than cs61), and this class isn't very theoretical.
Great class. Morrisett lectures well and the problem sets take a while, but they're quite applicable to the material. Make sure to have a partner because doing it all on your own would be very time-consuming.
You should definitely be comfortable with Ocaml (or just functional programming in general). The class isn't too painful, although lecture loses some usefulness after a couple weeks in.
This course is a good course. The material can be challenging and the problem sets take a fair bit of work each, but it's a lot of fun and you will come out with a good understanding of compilation.
It's a lot of work, but take it anyway. Morrisett is great as always, and it's interesting material, though maybe not everyone would agree.
Be comfortable coding in ocaml. The assignments are long, but not too difficult. Start the assignments early, especially the register allocator! The lectures are pretty interesting. In addition to course material, Morrisett talks a lot about modern developments in compilers and programming languages which is pretty interesting.
Every undergraduate CS concentrator should take compilers.  It's part of the core.  And every person who wants to be a software engineer should take compilers.  If you're going to make a living feeding input to a compiler, you better have some intuition for how the damn thing works.And 153 is a great class.  It's really a clean, effective survey of what it means to implement a compiler, up and down the stack.  (Of course, to that regard, there are some sacrifices made to fit the material into a single semester, but overall, I really think the course does a great job.)
The assignments are the best part of this class because they teach you the most. Be sure to spend enough time on them and do them well / thoroughly. It's quite enlightening to see what actually goes on behind the scenes in a compiler, so I found the material and assignments very interesting and enjoyable. In my opinion, Morrisett is a pretty good lecturer and explains the material well, so I found going to lectures to be useful too.
