Wonderful course material, mediocre class structure and organization.
Kinda hard but fair
CS 121 is a good theory course but you don't learn anything practical beyond the first 3 or 4 weeks. Prof Lewis is brilliant and great to talk to one on one but he's a terribly dull lecturer. I would not recommend this call unless you are a cs concentrator and its a requirement.
You probably have to take this course. It's not as bad as people say. Don't be afraid if you only have math 21a/b background; you'll be fine without cs20, just do pset 0. Here's how to (nearlY) painlessly take CS121: - Get the textbook (can be found online in pdf form I think) and read it (it's a breeze, readings for the week take maybe an hour max) - Do all the psets so you understand them, don't just try to get the answer from a TF or something; this is the bulk of where learning will happen in the course. Go to OH, find a group to work with, and work on where you've been stuck (but try the psets for 1-2 hours ahead of time so it's more efficient).  - Some people choose not to watch lectures. I recommend you skip lecture but watch the videos, because: a) Professor Lewis is good but speaks really slowly. You will space out if you go to class and it'll be a waste of your time. If you watch lectures at 2x speed after reading the textbook section so you know what's going on, you can speed through it, understand it, and save yourself a lot of time. b) Watching lectures at 2x speed takes ~37min/lecture. c) Sometimes there is material or notation or terms in lecture not in Sipser, that later show up on tests or the pset. Seriously, WATCH LECTURES AT 2X SPEED. Sometimes, for fun, I will slow down lecture to 1x speed for a few seconds just to ask myself how it is possible that things go so slowly in real life. 2x speed is a normal pace for most professors, sort of more like how fast Malan talks in real life.
Really great class!! As a CS concentrator it is really useful regarding the problem solving skills and proof-writing you'll need for 124 and other theoretical classes.
The material is important, but it's not that much fun
If you're taking it, it's because you have to. Adding CS 125 is a move in the right direction. The material is "important" but not useful for software engineering. Hopefully in the future there will be more options to learn this material. I feel like Harry Lewis is dumbing down the material for half of the class. The grade distribution is clustered towards 100, and I feel like those students could and want to do more.
The material gets significantly more difficult after the midterm. Plan to spend a lot of time on the later psets. Overall, it was a good course.
You have to take it if you're concentrating in CS, so you should try to make it interesting for yourself. The material is pretty interesting and it's a good way to learn how to write proofs. The textbook is really really good so make sure to read it!
Necessary stuff for the future
This class is not a bad intro to pure theory however you will likely learn more and understand more tangible applications of the material from 125. The bright side is you never have to go to section/lecture even the midterm, all you have to do is the psets which are not very hard nor time consuming.
In terms of content, this course is quite interesting - you learn a lot about the theoretical underpinnings created by the likes of Turing that would later evolve into what we view as modern-day algorithms and even computers.  Going into this class I was excited to get back into taking something more mathematical, but was slightly disappointed by the reasoning, which can be described as, to quote Lewis, "handwavy."  In terms of execution, however, this class was quite poorly taught.  Even on 2x via Google Chrome Lewis' lectures are inferior to simply reading Sipser, it's just about taking the time to do so.  Grading on problem sets varied vastly depending on which TFs were in charge of the problem set for that week, which was frustrating.  Office hours felt all to similar to CS50's, a cluster of confused students struggling to piece together something that could pass of as a plausible proof, with the TFs almost as spectators.  All in all, if you're taking this class it's probably for a requirement for the CS concentration, so just bite the bullet and the pain will be over soon enough.  Looking forward to seeing how 124 is.
CS121 was relatively painless this year I would say. The material isn't terribly hard, but the psets became a bit tedious after add/drop. It's required for concentrators, so it's hard to avoid, but I honestly don't think it's that bad compared to other CS courses. No one really goes to lecture, and office hours suffice for understanding the material/psets.  I also took CS20 before this class, but I think it wasn't necessary for the course (considering it doesn't count for anything). We got free t-shirts at the final!
This class is for those who want to learn relevant and important material. It will form the foundation for the way that one thinks about future CS classes. If there were fewer requirements, I would take this course as a freshman. This should be the first course that CS concentrators should take. Fortunately, all of the TFs were very passionate about teaching and were clearly very excited themselves by the material. Lewis's lectures were engaging and exciting. It is a regret that more students did not attend. The textbook is helpful, but not necessary to do well. If you are short on time, understanding lecture material should be enough to do well.
it's a good course to take if you're not a math major in CS
The psets were tedious and sloppily put together. Came out of the class feeling like I learned a bunch of useless theory without any applicability, but I guess that's what the slogan was. Good to just get out of the way early on for me as a CS concentrator.
You probably look at this course because you have to take it. But seriously, do not despair. It is pretty pleasant and 100 times less stressful than CS50 (YES, IT IS) or CS51. So if you survived any of them, (as long as you read text book and don't mess around), CS 121 is gonna be bread and butter. Harry Lewis is a bro, and although the lectures are a bit too early (10 am!? who are they!?), all the lectures are worth watching.
Don't bother with lecture. Just read the textbook and find someone online who knows what they're doing.
It is as it sounds, all theory, no coding. That said, the problem sets are at least sometimes still quite engaging.
This is a really good intro class (don't feel like you need to have any background in anything). Obviously some math, ES, or CS will help give you a foundation of some topics, but the course is really self contained and you shouldn't be afraid to take it. That said, be aware that the psets are of about average length so don't expect it to be too easy; you'll need some help from TFs on some psets. But the class is pretty fair in difficulty and grading. Harry Lewis is also super nice, good, compelling, but talks so slowly so watch the lectures on 2x speed (this is also nice because you don't go through material too quickly)
This course isn't that bad - the fact that lectures are recorded is really convenient.  The lecture notes aren't that helpful, and the book takes a slightly different approach to the material than the class does, so definitely watch the lecture videos (2x speed is fine).
This class feels like a math class. Be prepared to write a lot of proofs, although you can do just fine if you have no prior proof experience. CS20 is definitely not a hard prerequisite (I'd guess that about half of the class never took CS20). The material is interesting, but can be a bit difficult. It's one of those classes where getting the right answer sometime requires a spark of ingenuity (or lots of help at office hours) (think stat 110, but not quite as difficult).
If you're CS, then you have to take this class (and honestly, it's really not as bad as everyone says it is, I'm not mathematically inclined but still at least somewhat enjoyed it). If you're not CS, but love the philosophy of infinity or pure math, consider taking this as an elective. Otherwise, there's probably other classes you'd enjoy more.
Lectures are incredibly helpful! Sipser is a great resource, but I think that lectures provided a far better representation of the course material.
The course is well run, but seems to run out of enthusiasm
Gotta take it anyways! The material in the class is actually very interesting, especially the latter half of the class once you introduce turing machines and get into NP problems/reductions. Lecture can be dry, but if you go to section and OH you can make up for missing it (or read the textbook).
cs121 is a must for cs concentrators, and it really isn't bad. the only thing is that harry lewis is not the best lecturer, but the book is very helpful!
Harry Lewis at 2x speed is a very engaging lecture.
Read the book as you go. The book is very helpful. If you fall asleep in lecture then watch the videos on double speed, but don't fall behind. I thought overall the material was pretty interesting. I describe it as "fun math."
The course is fine as long as you read the book. The book is amazing and it's all you need to get through the psets for the most part.
Great material and psets, learned a lot from those. Lectures went hand-in-hand pretty well with textbook.
Keep up to date with lectures and the textbook as you rely heavily on what you have already learned
This course is a fantastic introduction to an intriguing field of inquiry that's both integral to the development of computers and yet highly philosophical at its core. I took this course as a senior looking to get a better understanding of how computers worked at a theoretical level, and am leaving with a strong strong respect for the mathematicians that allowed computers to come about. The text (Sipser) is excellent and probably sufficient for learning the material of the course by itself. Take for sure, if interested in the topic!
The lectures are a bit dry, but the material is interesting.  The problem sets are rewarding to finish, and the exams are fair.
If you have to take this class for CS, make sure you read Sipser.
Many CS concentrators say this course is practically useless, but I disagree.  I certainly agree that lectures are not very engaging, but the material is important for taking a step back and thinking about problems before you solve (code) them.  I didn't find the class all that interesting, but I'm glad I took it.
I mean it's required... but all in all, not a difficult course. I came from a very solid (but not remarkably strong) math background, and I took CS20 and it was wholly unnecessary. Lewis is unfortunately extremely boring, and it's really hard to stay engaged in class -- I went to over half the lectures (which is MUCH more than the majority of the class), but I still felt distanced at times. Some of the problems on the problem sets were really cool, so I definitely don't feel like it was a waste of time at all. I felt that all of my grades were reasonable, and the course staff was decent about being there as resources.
This course is a CS concentration requirement so in all likelihood that will be the reason you will take this class. If you have some experience with math and/or proofs you will likely not find it terribly difficult, that said, the computational models presented in this class are interesting.
CS121 was excellent. Some of my friends seem not to have liked the course as much as I did, so I feel it's my responsibility to say in the Q just how much I enjoyed the course.CS121 is about the *real* problems. Yeah, maybe in CS50 you learned the aesthetic differences between radio buttons and checkboxes, or how to make a website that delivers fake pizzas or some other equally useless function. But honestly, no one cares about those problems. Your website won't be popular. Your idea for an iphone app isn't "revolutionary".But not with CS121. There is no bull in CS121. What kinds of things are computable? What is computable efficiently? And most importantly, is it possible to talk about these things in a precise way (spoiler alert: yes) and how can we go about thinking rigorously about these problems, in ways that can actually hope to solve them? I was astounded at how much ground we were able to cover, and how deep we were actually able to go despite this being an introductory course.Honestly an amazing course, I would recommend it to anyone, but particularly those with some background in proof-based math.
This class is not as hard as many make it out to be. It's important to remember that many students (approximately 90%) were not attending class by the end of the semester, myself included. Many of those students were not even watching lecture videos, which is why many students consider the class to be difficult, since many of the problems on the psets, the midterm, and the final are discussed in class but not in the assigned readings. I went to or watched lectures but never read the book and found the class of average difficulty only. The material was interesting, but very theoretical (which is great if that interests you). There was no coding on psets or otherwise. I don't believe I will find the material I learned in this class as applicable as I expected before taking the class, but I enjoyed the class far more than I was expecting.
This is a solid class. he problem sets are good. They take a lot of thought but can usually be done in a single productive afternoon. Professor Lewis is fun to get to know individually, but does nothing to encourage people to come to lecture, which I think causes many people to take the class much less seriously.
If you're taking this class, it's because you're a CS concentrator and have to, and I'm genuinely sorry. This class isn't hard, but it is uninspiring and unenjoyable. Maybe Harry Lewis will start caring next year.
It's the only specific CS requirement, so just take it. It's not particularly difficult, as long as you keep up with the material and know your definitions well, you'll probably do just fine.
Don't take this class unless you're a CS concentrator (and only because it's a requirement)
I had misgivings coming into this class due to no prior exposure to formal proofs. However rest assured that if you put in the work, this course is very manageable. Office hours and section are really helpful, so go whenever you can.
This course is pretty mindless and boring. It is rather straightforward. However, be warned that the class is not scaled generously and hence it is actually requisite to do the extra credit on psets as some of the TF's are annoying about grading
This class is very interesting if you like thinking about computational logic.
If you're a CS concentrator take this ASAP to get it over with. If not this is still an interesting class for the mathematically-oriented.
If this class wasn't a requirement, I wouldn't recommend it.
This class is a good intro to the theory side of computer science. It's a little boring at times, but I definitely learned a lot. The homework is also really manageable, and the course policies for dropping psets and late hours are very generous.
This class is required for the CS concentration, so you obviously have no choice. It's not as terrible as its reputation makes it sound. That said, don't go to class -- Harry Lewis is way easier to listen to on 2x speed on a video tape. You should watch the lectures, I think, but you should also read the textbook, which is excellent. Find a group of people to do your problem sets with, which will make your life easier and the course much more enjoyable. That said, don't let the other people carry you, since you'll have a harder time catching up. The new final exam format was great.
I enjoyed this course, as it gave enough time to properly learn the concepts and did not rush through them.
Great book. Keep up with the readings and you can do really well in this course. Occasionally tricky problem sets. Hard to describe the material briefly but Ill try. It's looking for and describing patterns of symbols, drawing and describing theoretical machines that read and write those symbols, proving and using facts about the interplay between different patterns. Psets definitely test understanding of the material, but they're not crazy. Midterm can be dropped, counts equivalent to a pset. Every class should do that. Final this year was not as difficult as previous ones, multiple choice and short answers. No projects or coding at all. Dense lectures. Brilliant Harvard professors are all fairly similar in that they occasionally spend long bouts of time on easy material and shoot through the difficult stuff, and Lewis is no exception to this. He puts the videos online, though, and has said he's ok with people missing class as long as they watch the videos, which is huge because if you really read the book and then watch lecture, they're extremely useful. Pretty theoretical stuff, but it starts from the basics and builds up. You dont need to be a math genius to understand this, but you will be expected to focus in and think through the problems rigorously. You get to learn about countable and uncountable levels of infinity, what the difference between polynomial and exponential speed is. It's a math/logic/cs class. Sure its math and theory and abstraction but I bet youll leave it feeling far more confident in your understanding of what computers can do and what kinds of problems we can solve with them. If youre at all interested I seriously doubt youll regret taking it.
CS121 is required, so you have to take it. This means you have to plod through it. OH aren't super helpful, so really find good pset partners. it's not super hard until Turing Machines, so dont fall behind.
Read Sipser. It is an invaluable resource and makes going to lecture all but unnecessary.
Interesting, not very practical, introduction to computation theory.
Take it for material content
I had no CS background before arriving at Harvard and had taken 50 and 51 before taking this.I probably wouldn't recommend this to non-concentrators. Material is awesome, but you could also just read Sipser... And if you're really interested in it, cross-register for the one Sipser actually teaches (which is supposedly really rigorous, engaging, etc) at MITThis said, CS 121 has an unfairly bad rep. Prof Lewis clearly cares a lot about his students, and the material improved the way I think about CS. (I probably wouldn't have gone through any of this if not for the class.) I got out a great overview of formal math plus theory of computation and am more comfortable in my ability as a mathematician / computer scientist.Definitely get a good PS group if you're unfamiliar with the material to start! Working through problems with my peers was really helpful.
You have to take the class if you're a CS concentrator. If you're not a concentrator, perhaps there are some better CS courses to take instead where you program. There is no programming in 121
it is very very hard if you are not good at proofs
Too bad you have to take it. The course material is actually interesting but the way Harry Lewis teaches it, it is bound to disappoint. This class possibly turned dozens away from theoretical computer science - sad because it's actually a fascinating area of study. Advice: read the book, ask questions in section, and go to office hours.
Class material is so interesting, but its applications are not described well enough. Represents a foundation for CS, so it ought to be held with higher importance. Textbook (Sipser) is dope but Professor Lewis does not do enough explaining of core concepts. There is a lot of subtlety in the proofs in this class, so attention to detail must be paid both by the student and the professor!
This is a really interesting course but its taught pretty poorly.  Professor Lewis could make it so much more interesting and simple simply by distributing more resources (better slides, notes, videos, illustrations of diagrams).  One wastes so much time trying to visualize what is going on that one can't explore the funnner more nuanced aspects of this course.  That said, it really is interesting and I encourage anyone interested in CS, its history, and visualizing modern computers and their theory to take this course.
Some people hate CS121, and some love it (maybe?). Most of you have to take it anyhow, as it's a CS requirement. Personally, I didn't find it as bad as most people. Yes, the material is inherently boring, but it wasn't too tough of a class, and the textbook is very good.
We got shirts at the end of the course, which was cool.
Take it if you have to, avoid it if you don't. Extremely dry course, a huge drag, boring as anything, totally useless as you continue with your CS education. Lewis is cool though.
Good class. Stay on top of the material.
Take CS20, have proof background, or take with a group of your friends in order to make it more manageable.
Awful class. Material has potential to be interesting, but Harry Lewis is not a very god lecturer and course is overall pretty dry. Sipser (the textbook) is awesome though. My advice is to not waste time actually understanding the material. Sucking it up, going to office hours, and trolling for answers is the best way you're going to get an A. As someone who rarely went to office hours, did the psets by myself, and consistently did well, I ended up getting a way lower grade in the class than expected because of all the little points I lost for things that would have been fixed had I trolled around at office hours (and the final exam, which was by far the worst measure of performance I've ever seen in my life). I sound salty right now (and I am) but this is one of those classes where understanding the course material doesn't really matter. You need to know how to bullshit a proof, manipulate a test, and troll for answers, and that's about it. It was overall disappointing experience.
Only take this if you have to.
This class is a nice counterpoint to programming-heavy CS classes.  The material and problem sets are interesting.  Having some background in proof based math will make this a more enjoyable and relaxed experience.
I wouldn't recommend that anyone take this course who doesn't have to. Of course, most CS majors do have to. With that in mind, the course staff does a good job presenting the material and it could be a lot worse. The course does suffer from the fact that most students in it don't want to be lecture attendance is hilariously low. The first half of the course is actually pretty enjoyable. You get introduced to interesting concepts, do a few manageable proofs, and the psets mostly consist of reasonably fun puzzles to do. Around the midway point, things get bad. The problem sets become very abstract, less interesting, and much harder; solving them becomes much less rewarding and requires much more time.
You do not really need CS20 before taking CS121. I was able to just spend time with a good group of friends working on psets and pull of a really decent grade. Lectures are dry but very informative; also supplement lectures with Sipser is basically all you need to do to do well in this class. Although you do not learn much that is applicable to applied CS stuff like web design or systems, you learn COMPUTER SCIENCE and theory which is actually pretty cool. The theory is what computers are based off of, so understanding CS121 will help for your future CS classes.
This class is boring af
Really good class for CS concentrators
I would recommend this course even to someone who isn't required to take it if you're interested in the theory of computation ("what problems are unsolvable?", "can we solve more problems with a better sort of computer?") or anything to do with compilers. I would also recommend comfort with writing formal mathematical proofs, as most of the problem sets are proof-heavy.
I took this NOT as a requirement (not a CS concentrator, though it counted for my Applied Math focus), and I enjoyed it. The material is very interesting, if you're into almost brain teaser puzzle-type problem-solving. Yes it sometimes gets dense, lectures aren't the most interesting (Lewis are often monotonous), and the problem sets are often challenging and not helped by class lectures. But the work is manageable, and for an upper-level CS course, it's not all that difficult. If you're a hardcore coder, you probably won't like this class. If you enjoy the more theoretical, problem-solving aspect of CS, you may very well enjoy it.
I took this as an elective! It wasn't a BAD decision, but it certainly wasn't my best decision. The course isn't too hard, and it's well organized. It's just...kinda boring. Harry Lewis does the best he can with the stuff (his lectures were entertaining sometimes, we even got T-shirts), but it's just so abstract and bleh at times. Then again, some people found it fascinating because it's so unlike anything else you'll ever do in college.
You're going to have to take this course, so you might as well do it well! It's always not the most fun, but if you find good PSET partners and go to office hours, and find out whether lectures or the textbook work best for you, then you should be good.
This is an incredibly boring class. No one really likes it, but its required for CS concentrators so you have to do it. Just get through it. It's really not so much hard as it is boring and dry. The material just isn't all that interesting.
People love to complain about CS121, but I actually thoroughly enjoyed this class. If you like logic and puzzles, then you'll enjoy learning about algorithms, languages, and Turing Machines. Reading Sipser's textbook is by far the most effective and efficient way to learn the material. Since there was no need to attend lecture regularly, I found myself with a lot of extra free time to work on the psets, attend office hours, and catch up on sleep. 121 may be required for CS concentrators, but it's genuinely interesting, relatively painless, and it will teach you to think like a computer scientist.
I absolutely loved CS 121. The class is beautifully structured and well-organized, and I thought the material was really fascinating - that being said, I'm a math concentrator, and a lot of my CS-concentrator friends will disagree, so beware! The TFs hold both lecture review and practice problem sections, which are really helpful for staying on top of the material as well as reviewing for the midterm/exam. The problem sets are also relatively simple (you won't be spending hours and hours debugging things, which is a nice change of pace from CS 50/51) and the exams are pretty reasonable as well. Overall, I loved the course because it not only made me view computer science in a different light, but also the nature of proofs/logic itself. I know most people take CS 121 because it's required for the CS concentration, but I would highly recommend it to anyone interested in math or other related fields. TAKE THIS COURSE!
The class is very difficult, and the subject matter is not very useful from a practical standpoint. Unless you are a CS concentrator, or have a burning desire to dive into theoretical CS, I would skip this one.
That it is going to require far more hours than you suspect.
This course is a painful requirement.  Painful in the way that Math concentrators can beat up pon new computer science concentrators.
Pretend it's in the math department. You won't need computing background, but it's better if you enjoy programming, because sometimes the light at the end of the tunnel is that someday you'll be programming and you won't need to think about any of this stuff any more.
I think that the topic is really interesting and should not be missed. I recommend reading the book throughout the semester, and going to section. Lecture is fairly optional. Get good partners!
If you're picking classes to do a secondary field, I would not recommend this course. It was the biggest mistake I've made in picking courses since I've gotten here. It ate up all of my time, and I honestly will come away with very little from the course in terms of practical applications.
Don't start the problem sets the night before!
This class is a great introduction to the theory of computation, but do not be fooled by the word "introduction". It is a very challenging course and requires a large time-commitment. The problems in the homeworks are generally quite difficult.
Only take it if it is a requirement, or if the subject matter interests you.
A theoretical computer science course - if you like that stuff, you will like this course.
It is NOT a programming class.  It is 100% theory, and it resembles a math course more than a CS course.
The professor is quite boring but the topic is very interesting.
It's very difficult, but somewhat worthwhile. The lack of prerequisites is very misleading.
The problem sets are hard, but they have interesting questions. There is not as much complexity theory as I expected.
only if you have an interest or need to fulfill something
If it were not required for CS concentrators, I would not have taken this class in its present form, and would not wish it upon anyone who can avoid it.
I would not take this course unless interested in the material or required for concentration credit.
It was mostly a great class, but be prepared to work hard and get frustrated every Thursday night!
This class is really not as bad as people say it is. The material is not very difficult to understand, and the problem sets, while they do take some time to figure out, require only a night or two a week and are pretty fun if you have a small group to work through them with.
This is a great course if you are interested in logic / theory of computation
Do not take this class unless it is a requirement for your major.
Would not recommend to anyone except those with a penchant for theoretical math and an interest in its applications to computer science.
This class was a terrible choice: it was extremely difficult, it was not well taught, and the material has absolutely no bearing on anything else that I have ever studied.  I doubt I'll ever take another computer science class.
This is a poorly taught class with a frustrating teaching staff and an incredibly burdensome, difficult, time-sucking workload.  The collaboration policy is fascist and means that unless you can latch onto students who have already done formal mathematics, you are in for a tough ride.  It is prohibitively difficult.  Welcome to Computer Science.
I would avoid this course at all costs.  I love computer science, but this is the one class that I hate about computer science.  Theory is very unpractical and this class confirms it.  This class is meant for students of strong math backgrounds rather than strong CS backgrounds.  I would steer clear from this class if it wasn't a concentration requirement.  The Sipser text is good but the rest of the class leaves you hanging.  Its a class that you'll be glad once its over with.  Onto more exciting CS courses we go!
Overall, I very much enjoyed CS121.  The class provides a theoretical underpinning for much of the work done in the department, which is nice.  The mid part of the semester can get a bit pedantic, but the finishing material about P vs. NP is fascinating.  Professor Lewis is not the most compelling lecturer, but he's a wonderful professor overall.  The textbook for the class is very good and the problem sets do a great job of teaching the material.  Some mathematical maturity is required, in that you have to be comfortable writing proofs.  But unless you feel very uneasy, taking CS20 doesn't seem worth it.
Unfortunately, if you're a CS concentrator you're probably forced to take this class. It's not terrible per se, but Harry Lewis has taught for so long that he's no longer able to inspire passion for the topic. Don't expect this to be a programming class; it's not. If you're not sure if you want to do CS, take a more interesting class like 61 instead, since taking 121 risks destroying any interest you might have had. On the other hand, if you love theory and mathematical rigor and like getting minute details in your psets nitpicked out until you're forced to spend hours reviewing your completed psets in order to not lose multiple points for such trivial things as omitting "without loss of generality," this is the class for you.
It's a good class if you are interested in the theory behind computation.
If you're ready to put in a minimum amount of effort in terms of doing the reading and going to section, this class is very doable.
If you enjoy the process of formulating proofs (in a non-mathematical context), this class will be enjoyable. Even if you do not, this class will definitely make you think on psets. This class is definitely theory heavy, though, so be warned.
If you are a math major and are interested in the more theoretical aspects of computer science, take this course.  With such a background you should find this class pretty painless, and the material fascinating.
The class is required of CS concentrators, so you don't really have a choice. The course's progression of material is quite interesting, ending with the whole P/NP problem. It also provides a nice introduction to the more theoretical side of CS.
Although the class itself might not be what you are expecting from a CS class, if you are at all mathematically inclined you will find the subject very interesting.
Harry Lewis is a boring lecturer, and makes a tedious topic even more insufferable.
It's a well-structured class, but if you're not actually interested in the material (I'm totally ignorant and have no clue what people use this stuff for), it's a whole lot of headache for absolutely no end-purpose.  I don't understand why it's such a highly encouraged course and a pre-req for other courses.  The first half of the course is much easier than the second half, I think, just as a warning.  I got hit hard late in the semester.  It's difficult overall; if you're less theoretically and abstractly inclined, you might struggle more, but it's not impossible, and most of it is very intuitive.  Proof-writing was new to me, so I had basic questions about what constituted a proof.
Read the textbook!
fun material, but psets are a bit tedious...
The pace of the course is tricky. It's really slow for the first half and then way too fast for the second half. He spends half the course (first five psets) on the first two chapters and the second half of the course (last four  psets) on four more chapters. Not only is he trying to cover twice as much material in the same amount of time, but the material itself (Turing Machines) is much harder. If you take this course, you have to be prepared to be bored for the first half of it and completely lost and stressed out for the second half.
Literally the only reason to take this is if you have to for your concentration or if you're one of those pure math kids who thinks this kind of thing is easy.
Take the course with Sipser at MIT because you'll be learning from him anyways (the textbook is by him).
Harry Lewis is the man. Not too hard if you stay on top of the material consistently. Each week builds on the previous week--keep up with it! I can't stress enough how essential weeks 1, 2, and 3 will be for weeks 8, 9, and 10! If you don't master the basics early, you'll be frustrated later by your inability to understand some concepts. If you do, on the other hand, you'll breeze through many of those same concepts. Also, it must be said: this year, the Red Sox WON THE WORLD SERIES. GO RED SOX!!!
The lectures can be dull, but the topic is of importance, if you're intending to study CS seriously. I found the psets very interesting.
I know the course gets significantly worse Q scores under Harry Lewis than under Salil, but I still liked it for the material. Professor Lewis was a competent lecturer except when he gloated about the Red Sox (I'm a bitter New Yorker). Homework wasn't usually too difficult since you could get away with some handwaving. The Sipser book is one of the best textbooks I've ever used. We saw some of the big ideas in CS, like P vs. NP and the halting problem, explained by modeling what machines can do.
Unless you're a pure math person who gets enjoyment out of proofs, or you're a CS major who is required to take this class, don't take the course! Not only is the material incredibly difficult and the class graded really hard, but the material is very dry and I struggled to gain enough interest to actually put effort into learning it.
Very good introduction to theoretical computer science, with a good pace and excellent explanations. You should make sure to join a pset group and go to office hours -- the grading is pretty picky for the proofs on the homework.
It's just kind of hard to get excited about the course. I was not very interested or engaged, but I just had to drag myself through it because it's a requirement for CS.
I loved this class. It is like a class where you get to think about super interesting problems and prove a bunch of theories. In reality, it is more of a math class than a CS class. Not a painful difficulty level, but assignments do get to be time consuming. I enjoyed lectures too: Harry Lewis is a great and engaging lecturer.
This is a very difficult course. It is mainly proofs, so do not take this course without having taken CS20 or some sort of proof-based course. However, it is difficult because the material is difficult. Overall, I found it interesting, though difficult.
The lectures and lecture slides are not very useful, but the book (Sipser) is wonderful. Problem sets are challenging and grading seem arbitrary and inconsistent, though that will likely vary by teaching staff.
Good course, although perhaps not the most interesting or useful
It's a fine class. Read the textbook closely.
i personally didn't find the class very exciting. i think it's good knowledge for a computer scientist to know, so it makes sense that it's required for cs concentrators, but I would have preferred to  read sipser on my own to get exposure to the topics without having to dedicate a class to it. i wouldn't recommend a non-concentrator to take this class unless they think the material sounds very exciting and intriguing to them because the class can feel a bit dull if you aren't in love with the subject.
Course content was paced well, and even if you fall behind, Sipser is a great textbook. Lecture slides are OK; Lewis does a significant number of the long proofs by hand during lecture, so if you skip lecture be prepared to go scanning through the videos. Challenging course but very reasonable.
Be prepared to think in a new way about computation and computer science in general. This course is very rewarding if you read the textbook and attend office hours, something that cannot be said for many other CS classes. No background required; after a week or 2 you'll get it.
It's a good class, but beware of the psets. You need to spend 10 hours or so on them to do well on them. The class is fun but most of your grade is psets, so make sure you put in a lot of time on effort on them!
I actually found CS121 to be less stressful than most CS classes at Harvard.  Although the subject is very difficult, the textbook and office hours are both really helpful for getting p-sets done.  That being said, the grading is still fairly harsh and if you aren't constantly checking answers with classmates, it's hard to get good grades on them.
It's a really interesting course, but is very difficult. However, almost everyone tends to find the course difficult so it is important to go to section/office hours and read the textbook.
Go to office hours *early* in the course.  It's important to work as a group on the problem sets, as while there are some people who can do the whole assignments on their own, most people will be working in small groups, and a great way to find a group is at OH.
Not as bad as people say it is... Pretty fun ideas.
The course covers some interesting topics, mainly in the theory of formal languages.However, problem sets are often repetitive and are graded very pedantically. For instance, the powers that be once deducted points for using the usual empty set symbol  rather than {} or (supposedly even better) {x : x  x}. Well, the last one isn't even a set as it stands, since ZFC and most other axioms of set theory don't allow unrestricted comprehension. I suspect such distinctions are lost on the grading staff.Lewis is a great teacher though, and the intuitive but never handwavy way he explains things in lecture is a great relief from the frankly annoying rigid way you have to write things up in the problem sets.
If you are a CS concentrator, you will need to take this class. You should be familiar with proof writing or be willing to learn how to write proofs in this class. However, if you are comfortable with mathematical proofs, the problem sets will feel tedious, since the amount of time taken to write up the solutions far exceeds the cleverness to come up with the solutions.
Grab a study group and prepare to spend a lot of time on the psets.  They require a lot of thought and refinement.
I honestly don't recommend this class.  Good luck using this material in 95% of CS jobs out there.  Oh wait though, this class is mandatory for the major... Guess this doesn't matter anyways.
This is a good class. The material is actually pretty fun, although Harry Lewis hand-waves his way through entirely too many proofs. Take it if you have any interest in the math behind CS.
Awesome class. I went in expecting to be bored as this is the only required CS class for the concentration, but it was really interesting. Take it with friends if possible. Prof. Lewis' psets are fun to work through. Explain your answers in great detail.
Make sure to do your problem sets diligently. Because I could not devote as much attention to my psets regularly as I was taking another high level CS class and Stat 110 concurrently. I ended up learning a ton, but man is it annoying that psets were 75% of our grade and the midterm only counted as a pset.
You have to take this class for CS, but it's also a great class to take before CS153. I found a lot of the same topics covered such as regular expressions and finite automata, and this class is good to take before CS124 if possible. It's a great class to take to learn how to write proofs and understand the theory of CS, which is fundamental to becoming a computer scientist that people take seriously.
If you're in CS like me, then you have no choice. As a software engineer, I don't find the material particularly interesting or relevant. It's also quite difficult and everyone does well on the psets so your grade comes down to the exams. What I disliked the most was trying to fight through the crowds at office hours. Nightmare. The teaching staff and Harry Lewis are cool though.
It's a tough class, especially if you don't have much experience with proof writing. Additionally, make sure you understand the purpose of the course and read the text early on so as to not be lost or confused mid-semester
I thought this class was very in the middle - it wasn't my least favorite but it wasn't my favorite.  It was fine - not particularly not enjoyable, not fantastically enjoyable.  The textbook is great.  The material is interesting.  Problem sets and exams are fair.  Office hours are helpful for the problem sets and the TFs were all really great about giving you things to think about that help with problems without actually giving you the answer, so you really learn.
I'm sorry you have to take this class. If you don't have to, don't take it. It is possibly the worst class I have ever taken. Lectures are intolerable. You'll have to read the textbook exclusively. It's honestly such a shame that it's a requirement.
If you like learning about theory and writing proofs, this course is great. Don't be discouraged from taking it if you are not a CS concentrator (I'm doing Neurobiology).
This class gives you a very solid understanding of proofs and theory of computation.  It doesn't require a lot of time but can be very tedious at times.
It's a good class that covers the necessary material well. Perhaps a bit dry at times, but overall good!
I really enjoyed this course.  I thought it had a good mix of breadth and depth and helped me think more rigorously about proofs.  I enjoy discrete math and enjoyed the chance to work with an interesting subfield of it.  I know a lot of people say that Salil is better, but I enjoyed having Lewis as a professor and I hear the psets with Salil were more tedious than ours.  That said, it probably doesn't matter what I think because if you're CS, then you're here because you have to be and if you're another concentration, you're here for the fun of it already.
Although the subject matter is a little dull at times, this course does give a good introduction to the theory of computation as it purports to do. The class comes to together in the last couple weeks and everything you have learned clicks into place. Sipser is also a great resource so following along will be very helpful
Go lecture and pay attention, and then if you're interested in math-y stuff, you'll love it.
Find a problem set group because you will not be able to do this alone, as with every CS class. You have to take this class so just try to make the best of it. You'll spend many late nights with classmates doing these problem sets and through this, you'll make lots of friends. Try to start early and read the book. Sipser is really all you need and if you spend time on the book, you'll make it through this course.
It's a course you should take if you have to.
This is a great class, especially if you're interested in links between math and CS. You'll get a good intro to linguistics and the P vs. NP problem, and will learn quite a bit of good material in the process.
If you are interested in Computer Theory or advanced logic take this course.
the material in this course is the meat and potatoes of CS, I just wish the lectures are more exciting.  Lewis is a wise master of this material, but very dull as a lecturer.
Office hours are incredibly helpful
It's a good class. You may think it's unhelpful, but I actually think it gives an interesting perspective in terms of going about computing. Likely to recommend.
Don't let this class stop you from being a CS concentrator. It's a slog, but you can go to OH and get the psets done to a B+ level in 7 or 8 hours a week.Still, this class should not be required. You learn so little, at such a glacial pace. It's cool we can't solve certain problems and stuff but we also learn that in 124. Also, professor Lewis doesn't really seem to care at all about his teaching.
CS 121 definitely exceeded my expectations. As someone who's more interested in the applications of computer science instead of the theory, I thought I would hate the course. However, the theory was actually interesting and it teaches you to think in a whole new way, which is useful in solving problems. Plus, the practice in thinking critically about problems and proving your solution's correctness extends to lots of other things you'll do in college and in life. Finally, I actually like Lewis's teaching, contrary to what others may say. That said, the book is awesome. You should not get through the course without reading it.
Very interesting material but hard for people with no experience with proofs
Dear potential reader: please read this comment. If you do not have to take this class, please do not. The content is extremely interesting, but you can learn all of it by your own by reading the textbook (Sipser). You could probably cover all of the material to the extent that it is practical within a week. The extra mathematical fluff is interesting, but not really that necessary. You can also learn it on your own without much trouble, but the way that this course assesses you on such topics ends up just being a major headache. The lectures are also not helpful at all.Also, the class is pretty harshly curved down, so you'll have to get nearly 100% on every graded item to get an A in the class. Take that as you will.
I took this without any background in proof based mathematics and did reasonably well. However, having that background will make the class take significantly less time and certain aspects of it seem trivial that were not so for me. If you don't have as much of a background, working on problem sets with other people at office hours is very helpful and sometimes crucial. Also, SIPSER. SIPSER SIPSER SIPSER. I would still attend lecture b/c having the scheduled learning time is useful, but it is so much faster and more effective at times to learn the material from Sipser. Especially if you've fallen behind, use Sipser to catch up. If you haven't, still read it. It's a wonderfully written, very clear explanation of the material
This class teaches you the basics of theoretical computer science. The lectures are alright and I found them somewhat useful. The book is very good, so many people choose to skip some or all of the lectures and simply read it instead. The problems sets are sometimes tedious because writing up and formalizing your answers will often require much more time than actually thinking about the solution. If you are considering studying CS in depth I would definitely recommend taking this class (despite its flaws) to see if you theoretical computer science is interesting to you.
Concentrators have to take this course so you are at the course's mercy. I have mixed feelings about this course. On one side it's great. The material can be really cool and the textbook is really helpful. Lectures are really organized and the slides are helpful. Plus everything is recorded which is useful. Professor Lewis knows his stuff. He is an ok lecturer. He's rather nice and approachable yet he can move rather quick. Also he felt really disconnected from the course. Probably a result of how all the logistics of the course are handled by the TFs (his office hours are even appointment based which I hate). Now what I hated about the course were the psets. Expectations are super vague and unclear. You'll lost points are things you never knew you had to explain. Sometimes they expect more than is asked while other times hand wavy statements are expected. It seemed like if you didn't give the exact answer in the solutions you were going to lose points. Plus the grading was ruthless. One small mistake led to losing 60% or more of the points. It wouldn't have been so bad if the TF's did a better job explaining why things were so wrong.
the concepts learned in this class are interesting and important/applicable in many fields of cs. although the problem sets are a nuisance (so get started on them EARLY!), the textbook is awesome and the staff are generally very helpful. all in all, though this course is required for the cs concentration, it's a pretty good course in its own right.
If they tell you your grade is secure, don't trust that. You can get nearly 100% on the problem sets and it wont matter, because everyone does well on them.
I took this without taking CS20 and was fine. Take this class as early as possible in your CS career, because even if a course doesn't list it as a pre-req, taking CS121 will make the material more meaningful.
Problem sets are very important. Reading the book is better than going to class. It is clearer and you can go at your own pace.
The material is not very interesting compared to 124, and the lectures are slow. However, the class is not too difficult and is a requirement for CS concentrators. Sipser's very useful.
Great class. Challenging but worth it. Material might seem contrived at first, but it gets to the good stuff.
It's a required class but it is really not that bad. Don't go to lecture. Go to section. Read the book.
Be prepared to spend a lot of time on problem sets. But if you attend every lecture and section, you'll have no trouble.
It's super boring and lots of tedious work. The material is really not that difficult, but this class is a real pain.
This is one of the best courses I've taken at Harvard, and Salil teaches it well. It is difficult, but the problem sets are very rewarding.
Get started on Problem sets on time, and go to office hours/work with other students if you need to. It isn't easy per se, but it shouldn't be impossible either. The exams are very reasonable, as are the problem sets.
Take it when Salil teaches
I'll be blunt - Salil makes this class great. If it's going to be taught by Lewis, I highly recommend waiting a year or two until Salil teaches it again. I was dreading 121 after hearing stories from friends who had taken it with Lewis. But I found the course to be almost the exact opposite of what I'd expected it to be. Salil's lectures are precise, clear, and easy to follow. He also answers questions very well, and always seems to be happy (which is nice at 10 AM three times a week). I actually found the course fun with him at the helm.
This class is alright. If you can take it with Salil, do it! He made a very difficult class only somewhat difficult. That being said, I had very little proof based math prior to this class and really suffered. The first half of the class is really easy, but the second you hit Turing Machines (right after the midterm) you need to double the amount of effort you put into this class. More than likely, if you're reading this, you're a CS major and have to take this class. Just be prepared for the sudden spike in commitment.All of this being said, now that I'm done, I definitely appreciate the fact that I have to take this class.
Do not be discouraged by cs concentrators moaning about the course. If you are someone interested in math or linguistics, you must take this course.
While mandatory for concentrators, CS121 is an important introduction to some of the fundamental concepts of CS. Even if you are more a systems-person (like myself), it is important to see these concepts and CS121 is well-executed.
Take it for some of the ideas and take it for your requirement. Else only take if you like theoretical math.
You don't get to the really interesting stuff until the end. The first half of the course you could do with just the textbook, the second half was much better and more interesting. Hopefully in future years they will make the course that rigorous throughout. Second half of the course was challenging but manageable. Overall quite painless.
Unless you need it as a CS requirement, I think there might be some other courses that you'd more out of.
Thoroughly enjoyed this course!  I'm changing concentrations because of it.
Work hard. Work early. Watch lecture, and read the book. The book is particularly good. It has lots of examples.
CS121 was the class this semester that I really, really, really wish I had paid more attention in throughout the whole semester. At the very end of the course (and in cramming for the final) I became extremely aware of just how cool and interesting all the material was, but unfortunately didn't make the most of all the resources given by Vadhan and the teaching staff during the semester. Since it's a requirement, you'll have to take it as a CS concentrator, but I would definitely recommend it for people who like math and are marginally interested in computer science... it's more of a math class, in my opinion.Either way, Vadhan is great. I would highly suggest taking the class with him as the professor.
This class is great
Start the psets early. If you are confused, go to Prof. Vahdan's OH because he is GREAT at explaining.
The topics covered in this course are very interesting. It isn't too difficult, but at the same time, this course offers a challenge section and challenge problems for those who do want more difficult problems. Prof. Vadhan did a very good job lecturing and I would definitely recommend this course to anyone interested in learning some theoretical computer science.
Great class, easily one of the best I've taken as an undergrad; not sure how things are with Lewis teaching, but I had no formal math experience and didn't feel hampered at all
The course is really well-taught, and the material is very important and fundamental for many areas of inquiry in computer science.
This is a great class to understand the underpinnings of theoretical computer science.
If Salil is teaching this course (and that's a big if) then absolutely take it. I didn't have a particularly mathy background and was able to do okay -- Salil is REALLY good at explaining things. Also, the homeworks are basically like solving fun little puzzles. CS121 is cool, yo. Take it.
Great professor, cool concepts, uses logic and math, not too much work but awarding, teaches you new ways to think
I think it was an interesting way of thinking about computation that really helped my conceptual framework of computers. Also a good intro to algorithms for CS124, hopefully
Don't be afraid of CS 121; it's an extremely well-taught class with really cool material. If you're a CS concentrator, you need to take it at some point... I'd wait until after taking at least one upper level math/applied math class, as the material is largely proof-based. THe material is very accessible and the textbook is great. Be sure to work on the psets in groups... they're not terribly long, but often deal with tricky concepts. Overall, a very enjoyable and not too work-intensive course.
Not bad for a required course. The material is pretty interesting, but I don't think that Turing Machines are for everyone. Nobody really goes to lectures (we watch them online instead), but the lecturer was really good.
Prof. Vadhan is a great lecturer (though sometimes goes a bit slowly) and the TFs are super helpful! Not to mention this class is a requirement if you're a CS concentrator so you don't really have a choice ... but it was pretty interesting and only moderately painful (though psets due Tuesday at midnight were a huge inconvenience).
This is definitely a good class. It is also quite difficult and time-consuming. But, if you are a CS major, why are you reading this? You have to take it anyway, so take it. Sipser is a great text, so enjoy it, but make sure you do not take this class lightly. If you are not a CS major, I would highly recommend thinking through why it is you want to take this class, if it does not count for anything for your degree. It is incredibly time consuming and really is not the best elective for most people.
Salil is an awesome professor, and the course material is really interesting. It might take a while to get used to doing proofs in a CS course, but it's totally worth it and I feel like I have a better grasp of the theory behind programming (i.e. what kinds of problems are solvable in a reasonable amount of time)
Difficult but definitely worth it!
I thought the material was very interesting.  The class is not exciting, but it's worth taking.
This course is a solid introduction to theory of computation. It starts out slow at first, but the material definitely builds on itself, so spend a good amount of time on the psets, and in the end you can really understand the P vs NP question, which is pretty cool. I'd also highly recommend going to sections- Perry (one of the TF's) is great at explaining things.
This is a good class, espec. when taught by Salil Vadhan. The material is challenging but not difficult, and the psets will be rough, but it's worth it. Also, the exams are very fair.
Good introduction to theoretical computer science. It is pretty hard and takes a lot of work but interesting material.
Not too hard if you have taken a previous class with extensive use of proofs.  Some of the concepts are challenging, but nothing too difficult.  The midterm was as expected.
One of my favorite classes this semester, Salil is an amazing lecturer and the TFs are readily available to answer all your questions.
This is a great intro course that I would consider a necessity for anyone studying computer science, and extremely interesting for anyone interested in the implications of computer science (I'm a non-CS concentrator). This course covers different models of computation, which we use to prove what is computable or not. It also covers computational complexity to explore how much resources (time) problems can take, which limits what we can compute (exponential time algorithms are not feasible).This course may not seem immediately relevant or applicable, as we do not do any coding, but the lectures still touch on the applications of these topics, which are quite interesting.The class was well-organized, the material was taught well (the book, Sipser, is great!), and the staff is very supportive.
Surprisingly interesting and painless, given what I've heard about previous years of the course.
Make sure you read sipser and go to lecture, it's actually helpful. Start the psets early.
Make sure you do the Sipser readings before class. At the very very least, if you don't have time to read it all then at least spend a good five minutes skimming it, as it will go a long way and it's extremely useful in class. Also, I hope Salil Vadhan teaches the course again because he's great! Good luck, I had a lot of fun in this class!
Salil is a great lecturer. He is very clear and precise. If you like math for the sake of math, you will like this course a lot. If you don't, you will find the first part of this course rather boring. The second half of the course is cool. I recommend reading Sipser, which is literally the best textbook I have ever read. Attending a good section is also helpful.
As a CS concentrator, I never liked computation. I thought I was gonna hate this course, but then two months later I found myself actually enjoying the course. It's satisfying to see how all modern computers, however complicated, is backed by such a simple and elegant theory. Salil is awesome.
The concepts in this class are difficult but fascinating. This course builds your understanding steadily and systematically so that by the time you arrive at every new topic it feels very understandable. The structure of topics takes fairly difficult theoretical material and makes it feel intuitive, which is pretty amazing. That said, it's all theory-- those who like math may enjoy it much more than those who like coding.
This is a great theory class. Salil is a fantastic lecturer and Sipser is the best text book I have ever had for a class. It was well organized and well executed overall and even fun to tackle hard probles.
Read Sipser. Please, please read Sipser. No matter what they tell you, go to lecture. Salil is awesome at lecturing. Do your psets early, make sure you're doing at least the average(get the graders to publish mean/standard deviations). Going to TF OHs is a pain but you have to in order to get a decent grade. And well, read homework solutions. Really, put in the effort.
just read the book and go to office hours. save you some time every week.
Salil does a great job teaching this course. It is well organized and comprehensive. The psets give you a solid understanding of the material, and by the end of the course I felt like I really challenged myself and learned a lot.
Great course! Super interesting and well taught. Anyone interested in CS should take it.
If you're a CS concentrator you have to take it, but luckily the material is interesting. It might be difficult at times and not as applicable as some other classes, but I think it's good to get a general understanding of some overarching CS concepts (P vs NP, Turing machines, etc.)Take this class if you enjoy thinking about problems. Writing up the problems can get tedious, though.
Read Sipser (the textbook). It's fantastic (often enough to replace lecture if you fall behind). Salil is a clear lecturer, albeit sometimes he moves through the material slowly. Overall, this course is a solid introduction to theoretical computing concepts, though I wished I saw more applications of what we learned. Familiarity with proofs is necessary, but that doesn't necessarily mean prior proof courses. Concurrent enrollment in Math 23+ or another proofbased course is more than sufficient, as well as reading through the CS20 and/or MIT's OCW discrete math for cs material.
If you can take this with Salil, definitely do! He's a complete badass. He really cares about the class and students, teaches everything very well, and ya. He's awesome. His office hours rock too.The book is super useful too, so definitely buy it.And yeah, actually take this, especially if you can take it with Salil.
This course is truly excellent!
This course is an excellent course for those who have never been exposed to theoretical computer science before. If you have already seen some level of it, you might consider taking the graduate version.
Extremely well-run and well-taught course.
This is a pretty interesting class on theory of computation. The first half of the class is extremely easy and then ramps up significantly after turing machines are introduced.
A slightly tedious but vastly rewarding class
It is a good introduction to computer theory. It is well structured. I would recommend going to office hours, which are really helpful.
Very Tough and time consuming problem sets
Salil's a great teacher! Problem sets were very fair.
This course gives you the fundamentals to think about the science of computation.  It's a useful course and the material is actually fascinating.  The psets take a bit of time.  Salil and Sipser (textbook) were great!
Salil is one of the best professors I have ever had. I started this course very nervous because I don't have the strongest math background but in the end the course was very straightforward. Problem sets do take a bit of time but they're manageable. Exams are also very fair so if you study the material, you will be fine.
Overall a challenging but very reasonable class. Lectures are interesting if a bit slow. Problem sets are pretty difficult but very informative. Make sure you stay on top of the material as the course gets extremely difficult if you are behind. Worth taking as an elective only if you're interested in the subject. You should have a bit of background in basic proofs and notation.
Salil made this course very manageable. It was easy to stay current with, and understand the material.
Obviously required for CS concentrators. If you enjoy math / theory, this class is great and foundational. The assignments can be a bit tedious at times (especially some of the later proofs) but overall many of the results of the class are counterintuitive and interesting. Professor Vadhan is an engaging lecturer and makes what could be very dry material seem interesting. On the other hand, it is easy to see why some people find this course boring. Also, it's definitely easier than 124.
Salil's amazing! Not sure who will be teaching it next year though....
Excellent class. Sipser is an amazing textbook. Salil is extremely clear, and did an excellent job. Actually interesting material!
It's hard. It's not fun. It's a lot of work. It's required.
If you're good at math (like, 23-25-55), this course will probably be pretty easy; if not, you'll have some catching up to do. Be careful when writing up your proofs and justify all steps, because otherwise you'll quickly find yourself very confused as the course progresses.
It's a great intro to theory, which I think is really interesting but not all that accessible before college, so a fun class.
Course is required for comp sci, but helpful if you didn't know how to write proofs. Learning latex was a useful thing by itself. material was interesting, but seems highly irrelevant. The final was really based on how many facts you knew and how well you could figure out which fact/theorem was needed. Early on, useful to attend lecture. Later on, especially for decidability/turing machines/P vs NP, it was definitely better to read Sipser (great book). Most people stopped going to lecture after the midterm, the book is far more detailed than Harry Lewis is.
It's incredibly difficult unless you know what you're doing.  Take CS20 first if you don't have experience writing proofs.
Unless you need it for a requirement, I would say it is not worth it since it is theory based, not applicable.
Only take this class if you have to. Sometimes math people take this class for fun and then regret it. This class honestly made me want to drop out of Harvard. Harry Lewis is a really nice guy, but he can't teach. It's sad that this is the only required class for CS majors and it is arguably one of the worst.
This class is poorly taught and uninstructive. It is simply a requirement that everyone majoring in CS must get through. I wish the CS department would seriously consider thoroughly reorganizing this class.
Required for all CS concentrators.  It's really more of a math course than a CS course.  So not all CS people like it.  If you like math and CS, you'll love it.
If you're in CS, take it. If you're not in CS, there's a good argument for taking it too. The material itself is awesome and contains some pretty incredible results. Make sure you keep up with things and know what you're doing every step of the way, it'll help.
Read Sipser!! It's a great textbook, and will help you understand the concepts IMMENSELY. I wish I knew this at the beginning of the semester.
Be prepared to go to a lot of office hours with questions as there is little revenue material beyond Sipser.  Additionally, I highly recommend working with a partner on hard problems.
A lot of CS concentrators take this class grudgingly; I think this is mostly because they don't like being forced to take a theoretical class that's mostly math. However, I found the material fascinating. I did struggle quite a bit, since I didn't start out with the strongest math background, but it was very much worth it. If you don't care about the theoretical puzzles and just want to code, this isn't the CS class for you.
This class far exceeded my expectations. The material is really interesting and while the problem sets are challenging, you will come out of the class feeling like you have learned a lot. I think the class is essential for anyone interested in CS or math.
This course is fairly difficult, and the problem sets are extremely long and a pain. Also, the lectures are not really helpful either, if you read the book. That said, the course itself does a great job doing what it is supposed to do--teach computing theory. Take it, since its a requirement for CS concentration. Also, the level of math exposure gives you practice with proofs.
The material in this class is really interesting. Although it's all theory, and nothing really applicable (or obviously applicable), the problem solving skills you pick up will help you immensely elsewhere.Be warned, Harry's lecture's go a bit slow, but this is mostly to ensure that shows up understands the material well. You may find yourself sitting in very empty lecture hall come semester's end (as compared to day 1 of lecture) if you choose to go. If you don't, make sure you read Sipser, or you'll quickly fall behind.
This is a math class.  If you consider yourself a pretty capable math student, you'll find yourself breezing through it and learning some interesting stuff along the way.
Unless you're a CS concentrator or you really love math, I wouldn't recommend it. Material is interesting on an intellectual level, but it's extremely difficult and the problem sets always take a huge amount of time. They're also impossible to do alone unless you're a genius, so find some smart people to work with!
It's a hard class that I wouldn't take for fun, but is really interesting when thinking about computation. If you're hard-core computer science, it might start off seeming really irrelevant, but a lot of the ideas keep coming back. Don't dread it too much as a requirement--it may be hard to plow through the assignments every week, but I don't think any of it was a waste of time.
A great class with an enthusiastic teacher.  Problem sets are really good and force you to think about exciting problems.
Take it if you're going to concentrate in CS. Otherwise only take it if you are going to go to every single lecture, learn all the proofs and learn why they are.
The material is not terribly interesting, but is fundamental to computer science as a science.
This class is NP-hard. But the material is awesome.
This class is actually really fun if you find reasoning about questions and problems interesting.
Take it only if you need it. If you are reading this you probably need it.
The material is interesting, but the problem sets can take a LONG time. Office hours are extremely helpful, as is learning from other students in the class.
Fascinating material but the course is sometimes frustrating because it seems removed from current research/the real world.
It's not the worst, but it's not the best. Get the textbook and read it, as it will help with the problem sets. If you don't have to take it, make sure you are really interested in the theory underlying computer science.
Meh. It's painful, uninteresting, lectures are virtually useless, psets are frustrating. But if you're CS it's an inevitability.
Unfortunately, a lot of people will have to take this class because of CS concentration requirements. I didn't really enjoy this class mainly because the psets were very uninspiring. In some class, the psets are difficult, but the results are beautiful or satisfying, but not in this class. An unreasonable amount of rigor was also asked for on the pset proofs, which was annoying and sucked up a lot of time. The material in itself (theory of computation) can be actually quite interesting, but the class did not make it particularly enjoyable. The textbook (Sipser's Intro to Theory of Computation) is very well-written and easy to read. If you're a Math concentrator and considering this class, be sure to also take a look at CS 221, which should be better than this class.
If you're interested in some of the more theoretical CS questions, this is the choice for you.  The more math background you have, the gentler it will be.  Expectations are very fair.  The course staff is really helpful.  Harry Lewis is beautiful.
I mean, there's literally no way to avoid taking this class. Take a higher math class (though apparently CS20 will be helpful) before you attempt taking this. The fact that this is a CS class without a single programming assignment is pretty sad.
This class was incredibly painful for me.  I scheduled my life around office hours because I was not able to do the problem sets on my own.  I didn't find the sections to be helpful (perhaps other TFs were more effective).
Recommend that you carefully consider what other courses you will be taking this with from a workload perspective.  Also be familiar with proof reading and writing to adjust to amount of rigor required.  Form a study group if possible.
assignments are doable and the tests are pretty straightforward/easy
This is a solid first course in theoretical CS. The lectures aren't great, but the material is pretty interesting, and the last few psets are very fun. I was very frustrated at the pace in the first few weeks of the course, but it got a lot better as it went on. If you take a lot of math, you probably won't have too much trouble with the course.
Bear with the beginning of the course. It gets really cool in the second half.
An extremely interesting course that covers material that will be of particular interest to mathematically-oriented people or those that enjoy proofs. The problem sets are very time consuming, but very well constructed and cover a very appropriate range of material. You must have a partner(s) to do the problem sets, but that's just an excuse to make more friends. The psets will make you think and definitely test whether you understand the course material. Harry Lewis is an... interesting experience. You should definitely get to know him, however! He is very well connected, extremely nice, and will certainly help you out if you're looking for research or have other questions.
This course is required for CS credit. We all have to take it and endure the hard work. What isn't really very fair is the deluge of Math concentrators who take it as a "easy, fun, and practical class" (actual quote). Seriously? This class is hard enough as it is. The psets take a long time to complete, and some of us students actually spent a while trying to do them. I went to almost every lecture, and there were very few people there, which was unfortunate because Professor Lewis himself is AMAZING and is a great person. However, this course needs better course staff and less intense problem sets. Seriously, a large contingent of the class has no prior math background (I understand this will change with CS20, but still). I imagine a ton of people got perfect scores on the homeworks and quite a few people were struggling (like me!) The psets are tough, and it's an uphill battle for those of us who have to BOTH understand the material and then understand how to prove it. I pulled 4 or 5 all-nighters working on these psets, but I felt my wheels were spinning in place. I know this is useful and necessary stuff to know for CS, but can it be made a little less intense? Making it enjoyable would actually improve people's performance in the department...
I personally did not find the material very interesting, but it is generally a well-taught class with a good textbook (Sipser) and fair assignments/exams.
Not as difficult as many people might say if you are mathematically inclined. Really interesting, decently taught. Definitely useful knowledge to have as well (and I say that as a non-cs major)
You have to take it if you are CS....go to office hours it will save you hours of time.
It's very hard, but the problems are some of the most interesting and challenging that I've thought about.
Be prepared for lots of work, other people with mathematical backgrounds, etc
You may find this class difficult and unenjoyable unless you are good with abstract math and proofs.
This is a really awesome class.  The material is just so cool!  You prove all sorts of things about computability and gain an understanding for the fundamental limits of computation.
unless you are a proof-loving pure math kid, i would not recommend (unless you are CS and are required to).  some of the material is interesting, but most of it is rather tedious and dry.  the psets take a decent amount of time and the grading isn't amazingly generous.  there are so many other fun and interesting classes I can imagine would be better use of time.  just read the textbook by Sipser instead.
Enjoy the problems, they are fun.
Take the time to learn how to do proofs before taking this course and CS 121 will be a lot easier
Difficult, but interesting course. Keep up with the problem sets and go to office hours!
You will learn the material: the lectures are pretty good (though a little slow at times) and the textbook is excellent. The homework is not really hard if you have experience with proof writing in other classes, but it is really tedious at times and unpleasant. The course has a really poor collaboration policy. Overall, the information is fascinating and well worth learning. If you're very mathematically inclined and don't need this as a concentration requirement, I would just recommend reading Sipser yourself on your own time.
Obviously this is a required class for CS concentrators. For everyone else, it's a very important and yet very limited subject area--if you're interested in it, then by all means take the class. But sometimes it's tough to be motivated to work through the homework problems, even when you understand why it's important. Working through various constructions reductions can also be "fun" if you're into that sort of thing.
If you do not have a strong background in mathematical proofs then do not take this class until you have.
It's difficult and time-consuming. Be prepared to go to office hours once or twice a week to actually understand what's going on in the course.
This class is definitely worth taking if only to get one's feet wet in theoretical computer science. The challenge problems and advanced section--as well as the great textbook--expose the interested student to some pretty cool work.
Manageable, but go to office hours and ask for help, otherwise you may be staring at the problem sets for a very long time, or go about it in the wrong way, or forget about edge cases.
lectures are so-so, but the textbook is very clear and the material incredibly interestingpsets are time consuming (but then I don't have too much math background)
Take it only if you have to.
difficult course for non math students
Unless you're a math or cs concentrator, don't EVER take this course.  It's just not worth the pain or semantics, and the material isn't at all interesting until the last 2 weeks.  Go to office hours as much as possible.  If you have no experience on your own, start studying them and working on them on your own before taking this course.  I suffered through this course because of my lack of background knowledge.
I was intimidated by the class since my total math background was Math 1a / 1b, but if you anticipate putting in some extra effort to learn proof techniques you'll be fine.
This class requires a good amount of work on the problem sets, but it is doable and rewarding if you put in the time. It is interesting material and will definitely make you more comfortable with doing proofs.
Make sure that you know how to write a proof start to end before you start this course.  A lot of hand-waving goes on regarding how to form a proof, and most of your grade rides on being able to write on.
This class requires a serious time commitment to make the material enjoyable. The understanding of computation is fundamental to many disciplines. Only a thorough understanding of the material makes it useful at the practical level.
CS121 is a course mired in bad pedagogy and incongruity of expectations.  Simply put, the course is taught poorly.  Lectures are poorly paced and sections are not useful; moreover, whereas problem sets are expected to have a high level of mathematical formalism, this formalism is rarely presented in lecture with much clarity, and the specific expectations of rigor on individual problems are left unclear.  The course, while targeted at those who do not necessarily have strong mathematical background, ends up being a nightmare for all students regardless of experience.  On the other hand, Sipser is a good read -- which leads me to believe taking this class at MIT might be more worthwhile.
If you are confident in your abilities in math or computer science, take the course equivalent at MIT.  This course is poorly organized, slow-paced, and covers very little material for the time given.  At the same time it is also not a "slack-off" course, as the psets are graded harshly to the point you can get penalized on your word choice or a typographical error.
It won't be easy but it is a necessary class to take if you are a Computer Science or Math. It will teach you the basics of proof reasoning.
This class is great. Be sure that you  know math (proofs on the order of Math 23 or 25 or higher). While the proofs that you do in this class aren't that hard, there are enough of them that you need to be familiar with how to write a proof.
The material was interesting, but not very well presented.
If you want to learn about theory of computation, then you should make the textbook your best friend.  Concepts are explained much more clearly in the text than in lecture.
Don't be fooled by the label - this is a course in discrete math. Be prepared to spend some nights proving facts that intuitively seem obvious.
If you're not a cs concentrator, don't take this course. While the content is interesting, Sipser is pretty easy to read through. Lectures were boring, and the course teaching staff was not very good. Pset solutions were also not very helpful/thorough. The class is not very well-organized. I don't feel like the problems are that interesting to do either, and you could probably get just as much from working through examples and practice problems in Sipser.
If you are a CS concentrator, this course is your Bible and Harry Lewis is your God. Yeah, maybe you won't end up using finite automata and context-free grammars in your daily life, but at least you will make a step toward knowing what makes computer science a science, instead of just "programming." You can tell all your friends about the Unsolvable problems and the Unanswerable questions. See if they can beat the awesomeness of that with their lesser sciences.
If you're a CS concentrator, you have to take this class, but it's not bad.  The material is pretty interesting, especially if you're on the mathier side. Likewise, the more experience you have with math/proofs, the less difficulty you'll have. No matter what, do the textbook readings (gasp!) - they help a lot. Overall, the class isn't bad, and it gives you info on a bunch of important topics for computer scientists.
Generally very good, problem sets are pretty difficult. Sort of need to have a theoretical math background to do well
It's basically a proof writing class, so if you're good at that then it won't be too hard. Otherwise, it's a little confusing to learn the material in the class while refining your proof writing skills.
I might recommend it to people who love math, but even my math concentrator friends didn't enjoy it much. A math concentrator said that his life would be much happier had he not chosen to take the class.If you're a CS concentrator then you have to, so I would recommend it if you're expecting to graduate.
Have experience with proofs!!!
Although there are technically no prerequisites, the course pretty much assumes you are familiar with and comfortable doing long proofs. If you have not done advanced math prepare to be at a serious disadvantage for the first half of the class, and expect to spend 20-30 hours on the first 4 problem sets.
This course covers critical, cool material. Professor Lewis cares about teaching the class, and the presentation is smooth if a bit dry. Expect to spend lots of time perfecting your problem sets because they can be graded very harshly.
The TF's were very nitpicky, so make sure you prove everything in great detail... even if something is obvious, prove it (via induction, or proof by contradiction, they love those)
This course is not very helpful.
take the class if you are interested in theoretical computer science or just abstract thinking
The subject material is fascinating, and the instructor loves his subject. However, intimate familiarity with proofs IS necessary. Prior knowledge or willingness to learn discrete mathematics is also necessary. If you do take this course, know that problem sets take about a week to be returned and once you have recieved your old problem set, you'll be too busy finishing your new one to check your mistakes and the TF's will all be too busy helping those who are working on the PSet due the next day to help you figure out what you did wrong. It takes two problem sets to fix your mistakes. One last note, there is NO way to know how well you are doing in the course. Read the syllibus if you don't believe me. The instructor has no preset way to decide scores and thus no way of giving feedback except for the mid-term and when it is too late and the course is over.
Despite the level of difficulty and the personal struggles, I think the course is very interesting, important and worth taking to many people. I would warn them about the work load and the difficulty but would also enthusiastically recommend the course.
Requires hard word, and a good understanding of proofs.
Problem sets are not as easy as they may seem.
Be very comfortable with proving mathematical theorems, understand the basics of computer science, and be prepared to do a lot of outside-class research for topic clarification.
It requires some thinking, but is very valuable and a lot of fun to take.
it's very theoretical, not too many practical applications. but it's certainly intellectually engaging, if a little bit of mental masturbation
This course teaches too little given the depth and breadth of the subject; I believe that 121 should be split up into two semesters, an optional first semester that covers how to write proofs, basic mathematical concepts like sets, countability, etc. at or around the level of math 23, and then a second semester that teaches the more CS-specific portions of the course.
very goodyou learn a lotbecome comfortable with proofs
It is hard if you don't do math.
Although others might complain that this class is difficult, that it presents overly theoretical material without obvious practical applications, CS 121 teaches important insights about what problems are computable and how feasible those computations are. Moreover, it provides valuable practice with proof-writing.
Interesting material, not painfully hard, well taught, great textbook. Just make sure you are familiar with proofs, otherwise you're screwed.
I felt like I learned a lot but probably wouldn't take it if it weren't a requirement.
I would recommend it as a fairly painless way to learn the basics of theoretical CS to anyone with some background in abstract math.  To someone without such background I would say that they should proceed with caution as the mathematical methods used would cause a fairly steep learning curve.  I am aware that this is a required course in the CS concentration so this advice does not always work.
Take the class with a friend. Without a partner, you can feel overwhelmed by the difficulty of the problem sets in this course. And if you depend too much on strangers for problems you can't solve, you will not get the basics of the course.
The staff are great; however, only certain people (most mathematicians, a minority of computer scientists, and an even smaller group of people who are neither) will like the material.
A lot of work, but worth taking
It's very hard. Be prepared to sleep only 2 hours a night.
Cornerstone theory class that is  useful for all branches of advanced study in the sciences.
If you really like theory or proofs then take the course.  Otherwise avoid it, unless you need it as an requirement...
It's good if you are interested in proofs or computer theory. Otherwise, I can definitely see why it's a requirement...
This course is a train wreck and the pure joy of a baby's smile all rolled into one. Alot of times, thinking about the proofs feels like you're standing on top of a train fighting a bad guy in an action movie, except oops, the train is about to enter a tunnel. But once you get the idea and write it up, it feels like you just made sweet sweet love with Halle Berry*. Great course.*Halle Berry does not endorse this course or product.
Incredibly interesting and important material about computation.
Material is good and interesting, but the class is hard and a lot of work
CS121 is a very difficult class. It's generally not fun work, but after every problem set is through, and you leave Maxwell Dworkin exhausted, ready to sleep the rest of your Friday, you have a real feeling of accomplishment. The course definitely helps teach you to think analytically, and you can definitely get a lot out of it, but it's for sure very consuming, and very hard.
If you don't like Math 23 or above, you will hate this.
CS121 is exactly as advertised: fun, painless, and a good introduction to cs.
Pset 0 is deceptively easy.
It's rewarding if you put a lot of time into it. It's not like any other CS class you've taken before, and sometimes it's hard to see the connection to CS, but it's worth it in the end because you do learn some cool concepts.
A good course, although it would have been nice to pursue more in-depth into the subject matter, with less time spent on regular and context-free languages, and more time on TMs, time/space complexity, etc.
Take this class.
This course makes you think about computation in ways you never have before. Can any problem be solved with a large enough computer? What makes problems take longer to solve than others?
This course's experience differs for each person. Some find it hard; some find it easy. Make sure to shop it.
This class is a huge challenge but well worth it, especially if you like math
very interesting and fun, but requires careful attention to detail and constant lecture attendance.
Anyone taking this class who is interested in the mathematical aspects will be disappointed. The course was extremely pedantic and additionally the course dwelled on the uninteresting notions of finite automata for weeks.
Don't take this unless it is an absolute requirement; even if it is a "prerequisite" for another class, don't take it unless it is actually necessary. Harry Lewis is a dry lecturer and you probably will end up skipping lecture and teaching yourself the material from the book, which, to say the least, is unpleasant.
Pretty straightforward.
Interesting intro to computer science theory.
this course is fundamental for any computer science student; plus there are all the fun moments in lecture when the professor tells us about the history of computer science. If you're really interested in compsci, you should take this course.
I would not recommend taking this class unless you have to. It is very unforgiving, particularly to those without a background in mathematical proofs.
Get ready to think about computer science in an entirely different way.  The problem sets are going to be a lot of work, but in my opinion the material is just awesome so it's all worth it.Make sure you go to section, as a lot of times this is more directly applicable to skills needed for the problem sets than lecture is.
The psets were pretty fun, and the material was interesting.
It's fun for people who like to think about conceptual things
PRACTICE DRAWING AUTOMATA!
If you're a CS major, you *have* to take it. So, there's not many options here haha.
You probably have no choice but to take this, so remember two things.  First, there is no such thing as too obvious to state on the homework, because an overzealous TF will take off points.  Second, the final is the grade, so good luck.
A good course if you're interested in the material and have a background in math.
If you enjoy thinking about solving problems abstractly, then this course is for you. You will learn how to approach Computer Science from a new perspective.
CS121 is an excellent course, particularly for students who are interested in applied math or abstract computer science. Straddles the gap between abstract theory and constructive, applicable understanding. I am going to switch to applied math: CS as a result of this course. Excellently organized and prepared course, Professor Lewis is great, homework was fun, I'll probably keep the textbook. Take CS121!
Obviously, do not take this class unless you are required to do so -- Lewis is a nice guy, but a mediocre lecturer and while the information is interesting, it's nowhere near the best of Harvard
This is a great introduction to computation theory.  The textbook is classic, and Prof. Lewis, while at times dry, has a good sense of humor, and cares about his students' success in the course.  This class would be useful for computer scientists, mathematicians and logicians.
Start problem sets early and go to OH in order to have a manageable experience
beginning is really cool, end gets a bit unclear/harder
The lectures are actually worth going to.
It's a difficult course, but definitely worth it if you keep pace with the material.  Actually go to lecture.  They can be a bit dry, but they will also make the psets more manageable.
Useful jump into learning about theory of computation
only take it if you have to or if you're really into proofs
This is a good course, but there are several things you should know.  Make sure you have enough background in math and proofs to take this course.  The problems sets are challenging and require a lot of work.  I would recommend going to office hours as much as possible, even if you don't have any specific questions.  The most significant fault I had with the course was in translating what we learned in lecture and in section to the work we were expected to be able to do in the problem sets.  It is one thing to learn why a proof works, and it is something else entirely to be able to prove something on a blank slate.
This class is very hard. The psets take a really long time but they are manageable.
Please take CS20 if you're not used to writing proofs / formal mathematic notation like I was. It immensely helped me. This class is difficult, but definitely doable if you have the right support network. We were allowed to work in groups on the problem sets, which was good for my mental health.
1) you have to take it if you're a CS major 2) you'll like it if you're into math 3) it actually turns out it's pretty useful
Challenging course.  P-sets will take a lot of time, office hours are a must.  Read Sipser
Professor Lewis is not bad -- not extremely engaging, but very knowledgeable.  The material is really interesting.  If you have a strong math background, this course may very well be easy for you, if not, it may be a struggle (people who've already taken 124 tend to have a very easy time with this class).
If you're a CS concentrator, you're required to take this class.  Thankfully, it's not that bad.  The lectures are usually pretty boring and not very well attended, but you can usually get by via reading the book and reading the lecture slides.  The pace of the class is slow which is great since the material does get difficult.  Overall, it's a tough CS course but it certainly won't destroy your semester.
Come into the class with an open mind and some of the material can get quite interesting near the end of the course with the perennial P vs NP problem and other important computational theories. If you are the theoretical/mathematical type, this course is suitable for you!
It's a good course, but the material isn't directly applicable to coding (you won't write code in this class) and it's highly theoretical.
Don't bother going to lecture, section covers the material just as well and in a less confusing manner. Lewis is not a very good lecturer, and constantly makes mistakes in his slides and explanations. It's frankly a little unacceptable how many times it happened this semester.
CS121 is interesting and necessary for future classes, but definitely not the highlight of the cs department.
Looking at the Q Guide you can see that there are a lot of people who don't like this course. But honestly, it is a great class. I think most of the people who don't like it are the more traditional CS students. But, if you are coming from another discipline (like Physics or Math), I think it can be a lot of fun! The problems are very well laid out and fun to figure out how to solve. It is more of an exercise in thinking in creative ways than anything else. Definitely would recommend this class to science and math people. You definitely learn a lot. This is probably in the top 8 classes I have taken at Harvard in my 4 years here.
If you've never done serious formal proofs before, get some guidance from a TF earlier rather than later. If that technical stuff isn't a problem then the course shouldn't be too hard at all.
This is a fine class. You're probably taking it because you have to, but if not I would still recommend it. If you've never done proofs before you can still totally do fine in the course, and you'll gain a decent bit of mathematical maturity in the process(really a basis for further exploration--you get exposed to basic ideas like proof by construction/contradiction, reduction, etc. which are staples of mathematical activity). 

The class does become slightly more involved as the semester goes on, but the material becomes more interesting and significant as time goes on(you'll go from drawing finite automata to dealing with P vs. NP, one of the most famous unsolved problems in all of mathematics).

Professor Lewis is not the most compelling lecturer, but can be pretty funny at times. Most people don't attend lecture(the class had 150 in it this year but only 15 or so would be at any given lecture) and I'd say that watching the videos at 1.5x speed is probably the best way to go. Lecture can be pretty slow and we sometimes get bogged down in details that we won't ever really need, even for the problem sets and exams--in fall fairness I understand Lewis is just trying to give things proper context a lot of the time. Sipser is great, so read that over attending lecture if you're ever really pressed for time. 

Also, the grades on problem sets tend to be pretty high, so make sure you clearly explain your solutions in detail and check your work twice! I felt at times that TFs had to take points off for irrelevant things just to bring the mean down. Also, do always try the extra credit! Even if you don't get towards an answer they're good exercises, and if other people do them then it'll be tougher to be ahead of the curve.
If you're taking this course, it's because you're required to.
Only take it if it is required.
Well, you all have to take this course since it is a CS requirement. The sort of nice thing is that you get to meet a lot of CS concentrators, and Harry Lewis is an interesting character. The drawback is that the content is probably not something you are going to be that interested in, and if you are good at formal mathematics you will find the course pretty easy. I recommend it - but only because if you didn't take it you wouldn't get your CS degree.
If you've taken Math 25 or up and thought it was a decent class, not unmanageable, then avoid 121 by all means. It's a waste of time, and you would get much more reward from 125. Regardless of what you've heard about how hard 125, 121 is just a total waste of a semester.

If you have no proof training but still want to major in CS, then take 121, I guess.

As for the class itself, Lewis is well prepared for lectures, but he's a godawful boring lectures. I never managed to go to class; I tried for a while to watch the recordings, but even then I could get through three lecture's worth of material by reading the textbook in the time it took Lewis to teach half a lecture.
If you are concentrating in CS, you have to take this class. That being said, it can be a very interesting class, and touches upon topics that you can go into further.
This class is actually more interesting than you would think. The problems that we work on are very satisfying to think through, and it gives you great experience in proofs. It is manageable without prior experience in higher math, as long as you are willing to put the work in. The lectures are fairly dull, but it is possible to learn the material without relying on them.
Have a relatively strong theoretical math background (at the level of cs20)
Coming to lecture is boring, but the best parts are section and office hours. The hardest thing is being formal with proofs.
This is not a very difficult course if you go to lectures, section, and put in the work for the assignments. Go to office hours because they are great for getting the problem sets done, and done correctly.
This class is very interesting but will definitely require a lot of time since there are problem sets every single week - no time to digest information in between psets.
CS 121 is a very gentle introduction to theoretical computer science, and I definitely recommend taking it earlier rather than later (coming from someone who took it junior fall). While your possible suspicion that it won't make you a better developer or be useful in your future career is certainly founded, it is useful in that it teaches you to translate mathematical skills into the world of CS and allows you to looks at the problems of computer science and understand them  something anyone involved in technology should be able to do.
I don't think this class should be required of CS concentrators. It is definitely useful though, and reasonably difficult and time consuming. Harry Lewis is a very entertaining and interesting teacher. The class is very reasonable overall and relatively painless, I just wish I didn't have to take it because it seemed like a waste of a class to me.
It's a math class, not a CS class.
If you love math and computer science, particularly abstract math, then this class is for you. It is not however, particularly enthralling.
If you're a CS major, might as well get it over with. The material was unexpectedly engaging, and it really changes the way you think about the notion of computation, which is fantastic. But in the end, I'm glad I got it over with.
Despite what people may say about cs121, it is a really good class.  Read the textbook and you'll be set.  Be prepared to form a study group / attend office hours to get through some of the psets, but the exams are really fair.  Overall it's a pretty good class and lays a solid foundation in computational theory.
If you're CS you have to take. Try to not get behind or it can get difficult quickly. Also make sure you do very well on the psets
Not useful at all.
I love this class. It was hard for me (minimal proof-y background), that's for sure, but I learned awesome amounts. CS 121 <3.
It's the class you kind of just have to take. It isn't awful, and ultimately, you do learn. It's not taught particularly well (not going to lecture will not hurt you - just read Sipser, seriously) and there definitely isn't as much content taught as could be. If you have a math background, you could take this freshman fall. If you don't, any CS experience will help, and it'll be a bit tougher. That being said, don't expect it to be hard or particularly fascinating, but don't expect it to be torturous.
It's a great class, and the material is really interesting. That being said, the teaching staff (unless you have a really great TF), doesn't really make it that engaging -- it almost feels as if the class plods along and just drones through material. But stick with it -- the content of the course is actually really cool when you step back and look at it!
If you're a CS concentrator, you have to take this class. It's not bad, nor is it difficult--I felt like I learned a decent amount from lectures, though the first half of the course moves excruciatingly slowly. That said, it doesn't take up too much time, especially if you read Sipser instead of going to lecture.
Not really worth taking unless you have to.  Material easy to learn by yourself.
The material can be interesting sometimes, but if you're already comfortable with mathematical proofs, then you should probably take CS 125 to get through the CS 121 material at a faster pace (assuming that CS 125 still does justice to CS 124, which I can't say for sure).
Given that I came in with no real proof-based background (the last time I did proofs was at a math camp the summer after my sophomore year of high school), it was a difficult course. That said, it wasn't impossible  I don't know how much CS20 really would have helped with it seeing as many of the topics seemed self-contained, and were "easy" enough to grasp with just the book and course material. I took it when I didn't have to (I'm not a CS concentrator), and I don't regret it. It was a good course, Harry Lewis seemed like he was invested in teaching it, and most of the TF's were willing to help (though some were rather snarky). It's interesting material, and I feel like it's worth knowing.
I would like them to realize that this course is a department requirement. I'm sure Professor/Dean Lewis is a great administrator that loves undergraduate education and is an excellent administrator and department head, but I find it unfortunate that he should be forced to spend some time teaching this course which could benefit from having a different course head. Perhaps after having taught the class for some many years, Professor Lewis feels as if less time can be spent on the course but the course feels as if it could use a fresh look. The material is relevant, interesting and important and I would love to be able to recommend the course to people even remotely interested in CS because of how much the material should be exciting. Unfortunately, it feels that I can only describe the course as a concentration credit and nothing else. That is a major shame. 

The course is very doable for anyone. Those afraid of proofs or concerned about their math background or not having taken CS20 probably shouldn't be worried. The course requires sharp thinking which all Harvard students possess. The psets take some time to do, especially for those new to the subject area but the course is not a time black hole. Work wise, its very doable and the material is interesting and applicable, even if that is not immediately obvious.
Read Sipser. Keep up in class. Go to office hours. The exams are extremely fair. It's not difficult to do well (even coming in without a proofs background) because of the way the class is structured--75% is psets/midterm and the lowest gets dropped. I think it's one of those classes that teaches not the most interesting topic in the world but definitely something worth knowing about in general.
Wish it wasn't required of CS concentrators because its a very very hard class for those of us who don't have a strong math background.  It is a good class though.  If you don't have much math background (even if you took CS20) might be smart to go over some of the material and notation beforehand, that probably would have made the class a bit less painful.
If you're not a CS concentrator, I don't recommend taking this class. It's incredibly difficult and most people who didn't need to take it had trouble motivating themselves to do the problem sets well.
Would not recommend. Hate theory, hate math, hate proofs, don't understand anything. It's mandatory anyway so you're screwed. My section TF was amazing though. Go to Office Hours, they rock and will get so much help. Also team up with classmates (up to 4 collaborators). Tests aren't that bad.
The course textbook Sipser is clear and thorough in explaining concepts and the class pretty much follows the textbook. Problem sets take a lot of time and you should definitely plan to go to at least one office hours for each pset. Also, for the exams, do all the practice midterms and final exams first before reviewing material. There is a lot that is not going to be tested in the exams.
Read Sipser! It's the best textbook that I've used for a course. Make sure to check psets with classmates and to go to office hours.
You learn a lot about a very interesting area of computer science.  The course is well taught, and the textbook matches up nicely to it.  Professor Lewis's anecdotes and historical asides keep things interesting in a good way.  If you ever have issues, you can get them sorted out in section.  Only one other student ever showed up for my section, so I had a lot of opportunity to get help.  Also, Piazza helps a lot with the problem sets.  The problem sets can be challenging, but you get to drop one.  And the tests are much easier than the problem sets.  I would recommend taking this class even if you're not a CS major, provided you like mathematical proofs and logic.
Some people may feel that this class has no practical use; however, I would say that it teaches students how to approach problems from a computational point of view. I can see how these underlying concepts may come in useful in the future. That being said, lecture/section/textbook all cover the same material in various ways. I would say you could pick 2 of them and ignore 1.
I found the material of this course very interesting.  It's pretty cool how far you can go in terms of complexity theory with a few basic math tools.  I'm glad it's a requirement for the CS department, what with so many of us having a more applied/programming focus.  That said, I think it could be taught a bit better.  Lewis seems bored by the material, and he often was more or less reading off of slides.  Reading Sipser was honestly more helpful than watching the lectures.
If you are strong at proof based math, this class is definitely manageable. I don't have much computer science background but more math and found this class very enjoyable. Don't go to lecture. They're very dry and unnecessary to learn the material. Instead read the textbook and go to section. Those and going to office hours, finding a good pset group will make you get a good grade in this class.
I really enjoyed this course, and it definitely helped round out my appreciation for what CS is as a discipline.  If you work hard on the problem sets you should be well prepared for the exams.
Only take tins course if you have prior interest or if you need it as a prereq
I don't know why this class gets such a bad reputation and Q Score.  I am a statistics concentrator and I thought that this class was really enjoyable.  The stuff we learned felt like a good use of time and I'm glad I learned it!  The PSets were well designed and everything seemed fair.  Plus, Lewis is fun!
You have to take it, and it can be illuminating, but you probably won't like it.
I totally understand why this is a required course for CS: it's a great reminder that computer science != programming, and that there's actually some really cool theory behind it. Lewis isn't the most exciting lecturer, and the pace of the class is pretty slow if you have any background in proof-based math, but the material mostly makes up for that (especially when you get past automata to the P vs. NP part of the class!). I havent heard much about 125, but Id recommend shopping/taking it instead if you want to learn this stuff from a more mathematically rigorous perspective.
Lectures are pretty dry and a bit hard to pay attention to. The material itself also isn't the most interesting thing in the world, but Sipser is a good resource.
I mean if you're a CS concentrator you don't have much choice....
This class is clearly a lot different from most other CS classes early in your curriculum. You won't be writing code or debugging; instead, you'll be gaining a mathematically rigorous introduction to problems in computability theory, algorithmic complexity, etc. Some of the topics (particularly near the end of the course) are very interesting and seem like important issues. The first half of the course isn't terrible, but it was sometimes very hard to grasp the motivations or significance behind concepts. I did not attend lecture for most of the class; I thought Prof. Lewis was perfectly fine, but the lecture slides (in combination with the Sipser textbook) were definitely good enough to cover the material.

In terms of difficulty, the class was not terrible. The workload was substantial, but not overwhelming; I spent around 5-8 hours per week on problem sets, in most cases. The problem sets are interesting, and they make up a very large portion of the final grade, which makes it not too hard to do well in the class. In terms of background/prerequisites, you just need to be able to think about and write tight, mathematically rigorous proofs. If you can do that (or are willing to work a little harder to pick up the skill), you'll be fine.
It's really not hard if you already have a proof based math background. The problem sets were also fun to do, and mostly doable without help.
Lecture can be a bit dry, but the material was actually more interesting than I expected (though most of it will come directly from Sipser). Assignments can be extremely challenging, especially if this is your first proof-based class (as it was for me). Try not to be discouraged - just make sure to go to office hours and, if needed, find a tutor through the BSC. You will get through it, and you may actually end up liking it.
CS requirement, can't help it. But still very useful stuff. Just do like what everybody says: don't go to lecture and just read Sipser. That's the way to go.
This class is pretty boring unless you are mathematically minded. If you're a CS concentrator you have to take it, so tough luck. If you aren't a CS concentrator, I'd advise you to ask yourself, "Do I like math?" before enrolling in this course. It's not very hard though if you have some mathematical background, just boring.
This course is difficult, but necessary. It wasn't till halfway through that I realized how valuable some of the material is. While you'll never apply it directly while programming, it definitely further your understanding of computers as a whole. The end of the course on P vs. NP is particularly interesting. Lectures are poorly taught, so section and more importantly the textbook will be very useful. I strongly recommend taking CS20 before taking this, your grade will thank you.
It's pretty helpful to have taken CS20 before CS121. If you don't have any formal proof background, the class may be a bit difficult to adjust to. The section TFs were awesome - especially Tom. He was the most helpful TF ever, and he made the material a lot easier to understand. 

Expect this class to take around 5-10 hours a week for you.
I thought this was a solid course. Reasonable problem sets, reasonable exams. The textbook for the course is excellent. You can do well by just reading the textbook each week rather than going to lecture.
This is a sad implementation of a theory course. The material is interesting, but Harry's lectures are not. It's a pity that the only required course is so poorly taught.
Make sure you have exposure to this type of math before, don't be huberistic and take CS20 if you did not take Math 25+
1) Unfortunately you have to take this class. Bummer. 
2) The material is pretty boring and not really relevant to anything you'll ever do in the field of computer science or at a job
3) Know proof math coming in, otherwise this class will be extremely difficult
Psets are really important (75% of grade), so stay on top of them. Exams are straightforward but difficult.
This is a really good class. It taught me a lot. I absolutely loved how helpful the teaching fellows were at office hours. Gabe and Ben were my favorite :) Just be ready to work hard outside of your class. Your critical thinking skills will definitely improve if you take this class.
If you at all may be interested in theoretical computer science, you pretty much have to take this class. Considering this class is required of all CS concentrators, you'll probably take this class whether you want to or not, but don't see it as a bad thing necessarily; some aspects of this class are actually really enjoyable!
If you're a CS concentrator you're going to have to take this class, and you'll probably be pretty ambivalent toward it.

If you're not a CS concentrator, you're not going to take this class.
read the relevant chapters of textbook and watch the lectures if  you have time
I was a little afraid to take this course because of the prerequisites, as I did not have any experience with proofs, since I decided not to take Math 23 or CS20. But, I felt that I was strong enough mathematically to take this course, and I sure am glad that I did. I really gained a lot from this course, in addition to learning to write proofs, it really made me think in a different way and expanded my problem solving abilities.

But, there are some concerns. The lectures are absolutely useless. Harry Lewis is a very slow teacher, and you can probably watch his lectures at 2x speed, but even that might not be necessary. You can learn all the material needed for this course from the textbook, Sipser, which is a godsend.
Sipser is the best textbook I've ever used. And boy did I use it a lot. This class starts out really slow, but the content gets more interesting and actually applicable to real life toward the end. Depending on how good you are at math, problem sets are pretty tough. All in all I appreciate the content matter of the class as a whole, but the way this class was taught made it really uninteresting. Don't expect to get any useful feedback from assignments.
I took this class expecting it to be a joke, but it actually turned out to be a lot more difficult than I was expecting. I'm not really sure why it's required for all CS concentrators, but you learn some really interesting stuff. Lecture isn't really worth attending, but the textbook (Sipser) is pure gold, and section is great too. I would strongly recommend finding a study group and going to office hours if you haven't had much experience with proofs and/or sets.
Material is tough but the class is well structured and well organized.  If you think you will struggle with the material, take CS20 in the spring.  Then just rip the bandaid with this one.
It's a good class that everyone interested in computer science should take. As someone who's more interested in the engineering side of computer science, it wasn't my favorite class, but it was definitely well worth my taking it.
I think that this is a really important class to take for computer science. While it was challenging and definitely took a lot of consistent work throughout the semester, I learned a lot. If I had looked at our final exam when I first started the class, I would not have even known what was being asked or how to begin solving the problem. But by the end of the semester, I knew how to solve difficult problems and understood their applications.
If you are a CS major you probably have to take this. It's actually more interesting than you think. Not particularly applicable for me but I guess it's a good perspective on theoretical computer science.
This course is definitely do-able. While you might be intimidated coming into it since it does have the potential to be an extremely difficult class, if you read through Sipser in detail and STUDY WITH OTHER PEOPLE, you will find that the course material is not bad at all. I thought it was easier than Stat 110.
