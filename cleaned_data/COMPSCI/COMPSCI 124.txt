Be prepared for a lot of intensive thinking.
Solid class that teaches you a lot. CS concentrators should really take this class over a math class for their theory requirement.
Be prepared to spend a lot of time on - but enjoy - the problem sets. Also, be prepared to do terribly on the exams, which are much too difficult and contain too many problems for the time allotted. And don't expect anything from the professor outside of his reading the lectures.
Many of the most valuable aspects of this course -- particularly an understanding of algorithmic caterogies and techniques -- could have been gleaned by referring to a good textbook or any of dozens of web sites devoted to algorithm topics.  While this material was generally well presented in class, the pace of lectures was too slow and the lack of feedback from the course staff was frustrating.
Definitely the course I have enjoyed and gotten the most out of at Harvard despite the rather large workload.
This class is extremely interesting and important.  It covers a wide variety of topics in the field of algorithms, and teaches many approaches to problem solving and efficiency.  It is challenging but fun.
It's a great class and well worth taking, but be prepared to work hard.
know how to program well before the class
It is a tough class that a CS major must take. The course teaches you a practical approach to algorithmic problems.
Ask for help when you need it. Take the class with friends, if possible. Take notes in lecture. Be strong.
It is a very structured and fairly well-taught course, and it covers some specific topics that probably are not covered in a typical introductory algorithms course.
very difficult
Leave your ego at the door: if you throw something stupid out, Mitzenmacher *will* let you know it was stupid. This is a good thing, though. Of course, if you throw something smart out, he'll let you know that too.
Wikipedia is your friend for filling in any holes in the fast-paced lectures.  The lecture notes are also very helpful, when they are posted.  Be prepared for long nights and some frustration, particularly if you are more of an engineer.
Avoid it if you can.
The few.  The proud.
It's a good way to fill your "2 as middle digit" requirement. Everything we learned was applicable, but was sometimes difficult to understand.
A lot of work, grading is tough, but interesting material and learned quite a bit.
Very difficult. Very rewarding. Quintessential cs class.
The content is cool, but the tests are difficult. I felt way more pressured on the test than on Math 25 tests.
It's difficult, but you learn a lot in quite a bit depth.
This is one of the hardest but most rewarding classes you might take in Computer Science at Harvard. The class will steal from you your sleep, your ego, and your GPA, but will give you an amazing set of algorithmic tools, a great theoretical computer science background, and a level of confidence when facing difficult problems.
This course gives a very broad introduction to many important algorithms in computer science, and will give you a very good foundation for more advanced classes.
This is a very good introduction to being able to design efficient algorithms.
The content of the course is very good to know, but the course is very challenging and takes a lot of time, especially the problem sets. One needs to take other time-consuming activities into account before deciding whether or not to take the course.
It's difficult
It's very theoretical, not very useful, very difficult, and the professor is not a good lecturer
I think the class is extremely important if you have any plans toward more CS
you will not do well on the midterm and final. just focus on doing well on problem sets and programming assignments.you learn a lot and become smarter taking this class, but it's hard stuff.
Despite the abysmal nature of this class, I must recommend it to all computer science students. Data structures and algorithms are the bread and butter of CS, and there isn't really anywhere else to get said bread and butter. Unfortunately, the class is frustrating, and focuses on some irrelevant topics. The pain will only make you stronger.
Take this course only if you have to as your concentration requirement, and not without considering your other non-CS options as well.
I thought this class did a good job of connecting the theory to some neat real examples.
It's interesting and a good class to have taken, but it's a painful process.
Professor Mitzenmacher seems to be bored by the course material after so many years of teaching the same class, but his notes are clear and the material is important and interesting. Taking this class is like eating your Computer Science broccoli.
It's really, really hard and time-consuming.
Take it only if you have a thorough understanding of the subjects that I listed and if you want to learn to invent new algorithms.
It's useful to learn the algorithms and to learn how to think about solving CS problems, but it could be much more enthusiastically taught and the material could be more relevant and less "stuff Mitzenmacher liked when he put the lecture notes together in 1998 and 2002 and hasn't change since."
I would seriously suggest looking at the other Applied Math courses available for CS students to fulfill their Computer Theory requirements. I really did not enjoy this class - this was probably one of my least favorite courses of college.
Not a difficult course, but time consuming.
The course is necessary for anybody who is seriously interested in computer science. The downside of this class is its professor, Michael Mitzenmacher. The extent to which Professor Mitzenmacher does not care about this course is unsettling and almost insulting. He has not changed the lecture notes since 2001 and refuses to post solutions to any problem sets or exam problems. His genuine unconcern of students in the course makes it difficult to learn the material he teaches effectively.
Very good class, but very time consuming and difficult.
good course, but not very transparent with secretive exams
Great class with great material. Be prepared to work hard.
For the student that desires to learn quite a lot about algorithm design and is willing to work hard, I would recommend this class fully.  You can get a lot out of it, but it is not for the faint of heart.
Find another way to meet the CS theory requirement.  If you don't have to take this for the theory requirement, you'd be crazy to take it.
Great material, poorly structured due to lack of practice problems and general lack of consideration for the students
The course can be very interesting if you like both math and computer science, but hard core computer scientists might find it to be different from the usual department classes.
Be prepared to work your butt off!
The material is great. The TFs are great. The professor is very knowledgable, but seems not to care if you actually learn anything.
Very interesting material but extremely challenging.  Math background is important.
Barring a particular interest in math, computer science, and proofs and a natural talent for the same, I would avoid this course at all costs. Those seeking to fulfill a requirement should heavily consider alternative offerings.
Take it if you really like math or have experience with algorithms already...or because it's required
A lot of hard work and late nights / early mornings, sometimes there is so much work you skip class just to sleep after a problem set, but it's really rewarding at the end.
Beware...
The course can be toilsome work at times, but is effective in teaching a wa of thinking.
A solid introduction to algorithms, but expect it to be quite tough if you haven't had algorithm or math experience.
Take this class. This is one of few classes at Harvard that has truly shaped the way that I think about problems. The material is indispensible for anyone going into Computer Science or related problems, but definitely helpful for any quantitative field. Don't expect to have much guidance throughout - it's up to you, your friends, and the CLRT book. Good luck!
CS124 is one of the hardest classes here.  It (and CS51) are the two classes that are crucial to you becoming a computer scientist. Yes, it is ridiculously difficult, but it's also ridiculously worth it.
this class is hard. you will not get an A. There is a midterm and problem set on the same day. Do not have a hard set of classes to complement this, you won't like yourself very much if you do.
The material in this course is essential for CS majors. Let me repeat that: the material is ESSENTIAL. A CS major not knowing this stuff is like a math major not knowing calculus or an East Asian major graduating without fluency in any East Asian language. Not taking algorithms means your CS degree should be used as toilet paper and flushed down the toilet. AM 107 and AM 106 are not acceptable substitutes pedagogically. That said, this course does have many shortcomings including the lack of solutions to homework problems, no practice exams, horrible curve (mainly because of all the math majors in the class). If you are scared by B's, stay away from this class and honestly get out of the CS concentration altogether. If you work your tail off and/or are anal about the problem sets, a B+ or A- is in the question. You will not get an A unless you are a genius --Math 55 level-- (and you're probably not), you were a TopCoder veteran (of which there were several in the course), and/or you work so hard that you will have no life outside of this course. Note that the second requirement is in addition to being on the Math 23/25 level. If you are below that, you're screwed no matter what aside from sacrificing your firstborn and moving into Cabot Science Library permanently.  The professor is a nice guy and a decent lecturer, but he does not care about you at all (selectively responds to emails, notes are ancient and riddled with typos, no real feedback on assignments). If you can, look into MIT's 6.046 algorithms course to learn the material in a course that's much better run. Another option would be to take this pass/fail after you've finished your CS requirements to learn the stuff without getting too stressed out.
It's been said before: this class is your "CS broccoli." It's good for you, and you really ought to take it, but you probably won't enjoy it much. The material by itself isn't necessarily that difficult, but the problem sets and exams are extraordinarily challenging. If nothing else it'll help you with interviews. Don't take it if you care about your GPA.
CS124 is a solid class.  While lectures seem to start off shaky, their quality increases as time goes on and the class begins to delve into the meat of the material covered, which, overall, seems fairly substantial and teaches good intuition for algorithm design and, more generally, approaching new problems.  Problem sets and exams are all well-written and contain interesting, if sometimes difficult or lengthy, problems; the psets themselves are somewhat time-consuming, but can frequently be done (as the course website mentions) with a clear-headed all-nighter (or, alternately, over the course of the week they're assigned).  Much better than 121.
You must take this class if you have any interest in computer science. Whether it's for an interview or for common knowledge, algorithms are going to be necessary.
It's a fun class. To the math majors: don't try to be too rigorous; it will take a lot of time and ultimately not be fulfilling.
The problem sets are cruel.  The professor doesn't seem to care much about his students, unless they're the top 1% of the class.  But, this is a good way to learn the real "meat and potatoes" of CS don't shirk out of the requirement by taking an applied math course!  Though it was painful, and I am not very math-inclined, I feel like I learned a TON, and you simply can't call yourself a real CS person if you don't have this background.
The course material is incredibly important, so you really have to take this class. That said, it's frustrating at times because a lot of the course policies are unhelpful. The solutions to problem sets are not published. There are no old practice exams available to help prepare for the midterm or final - that's especially problematic because neither of the course textbooks line up precisely with the course, so it's difficult to find applicable practice problems. The exam questions are not overly hard - it's that there's not enough time to do them, making it more about how quickly you can figure it out.
It's not that hard if you study, and it's mostly about making sure you get your work done ahead of time.
Definitely take this class! Algorithms are so crucial to having a good computer science education! The lecture notes in this class are very good, so it's easy to review material use them to study for the midterm and final. The psets and programming assignments do take some time (I would estimate around 8 hours or so), but they're good assignments! You will learn a good amount in this class and walk away feeling like a better computer science person.This definitely sparked a huge interest for me in algorithms as well. They're actually really cool and exciting!
The class covers a lot of algorithms and interesting periphery material, and gives you some good intuition for how to approach algorithm problems in general. Mitzenmacher's lecture style is insightful but he moves quickly and has a uniquely wonderful sense of humor. Be prepared for pretty tough exams and some hard problem sets.
Mitzenmacher can seem a little uninterested in students (placing the midterm on housing day for example), but based on how much he invests in the problem sets, exams, and programming assignments I think he might be one of the most engaged professors I've had. If you are academically interested in the materials (as in- I want to know how this works) give this shot a go because its really interesting and changes how your mind works. The students who took this course just to have it on their record, say for job prospects, I think they struggle a lot more. You need to really like thinking about the details of what you are doing. If you really hate asking questions like "does this argument prove what I want to prove," don't take this course.
The course is great and it gives you a great background in algorithms. The course overall is very well structured but it seems that the professor is not enthusiastic about the material anymore...
definitely take the time to learn and practice the material
Man up and take CS124.
if you like interesting problems, take it. you don't need much (or any) cs experience at all; the problem sets and programming assignments are not bad, minimal coding, c is easy to learn and as long as you're conscientious won't be a challenge for you. you should hopefully be decent at math or problem-solving sort of thinking.
It's a pretty amazing class that presents a series of different problems and shows you wickedly clever and often non-intuitive answers. Also introduces some ideas I found very elegant. Definitely not a light class, but well worth it. Those of us who haven't done tons of math might struggle a tad at times.If you take it, be prepared for the midterm to be extremely long, so manage your time very carefully (allot more time for the proofs).
It's fun, but hard (at least was for me).
What follows will probably be most helpful to non-computer science concentrators. I came into the course a bit skeptical, based on rumors and previous Q-guides. It definite exceeded my expectations. The lecturing was clear, if sometimes a bit slow-paced, and the materials were excellent. Lecture notes and section notes are given for each problem. I think the assignments are well-chosen, although personally I thought the programming assignments took too long and the problem sets could have been more challenging (but I don't come from a programming background). There wasn't much feedback, and it wasn't that prompt (except for the tests, which were graded VERY promptly. I got my final exam score back about 5 hours after I finished it.) I enjoyed the emphasis on problem-solving techniques and paradigms, but that may not be what you're looking for.
CS124 is a challenging and thought-provoking introduction to a wide variety of algorithms. Mitzenmacher is a fairly effective lecturer, while the problem sets and programming assignments are difficult yet well-worth the effort. However, the class is at times plagued by structural issues: feedback is scant or nonexistent, answers to assignments are never posted, very little supplementary review material is provided. I would certainly recommend the course, though, especially to the mathematically-minded.
Last year, I saw a lot of comments saying not to take this class. But, I really thought this class would be useful and worth all the effort. I have never been more wrong. The teaching staff is absolutely horrendous, the problem sets are impossibly difficult, and "feedback" consists of "2/10: you can do better". This class simply was NOT worth it by any stretch of the imagination. It completely kicked my ass, killed by GPA, and I don't feel any sense of accomplishment. Unless you took Math 55 and impractical theory, go take a real CS class.
this is 2/3 math, 1/3 cs. certainly take it if you'd like something that, avoid it if you wouldn't.
Probably not the best thing to take as an elective because of the difficulty, but if you're really interested in the material, it's a good class.
This is one of the most important classes you can take as a CS major. You're cheating yourself if you don't.
Mitzenmacher thinks he understands pedagogy very well, but he doesn't.  Also, his notes are more or less copied from an algorithms textbook from Berkeley.
Only take if you are serious about learning CS, not for most interested in a secondary.
Make sure you aren't taking 2 other difficult courses. This class is worth the extra time because you will learn a lot.
Not as bad as everyone makes it out to be. Material is challenging and coursework is very time consuming, but its manageable. Just be sure that you have some experience writing proofs before taking it.
This course will work you.  One problem with it is that it can work you but still not actually teach you anything, if you're not careful.  But it doesn't have to be that way -- don't believe someone who tells you otherwise.  The course simply requires you to take initiative in order to learn.  You have to try to understand material yourself, and if you don't, you have to seek out the course staff for help.  I think the difference here compared to other courses is that you can't expect lecture to give you a complete mental model of the material.  The lectures present the material, and then you need to attempt yourself to build a mental model of it, and ask for help as required.That said, you want this course.  You need this course.  Even if Harvard will let you, don't try graduating with a CS degree without taking a real introduction to algorithms -- CS 124.
Material is very interesting and useful!
A challenging but rewarding class that I think all CS majors should be required to take.
This course probably isn't necessary to proceed within the department and it doesn't teach you facts that you can't learn in a week with CLRS but it is an awesome experience in CS intuition-building. Probably the most mentally intensive of the intro (non-specialized) courses it'll force you to sharpen your mind on the kind of problems that you'll likely be grappling with in the future. Thus it's a great course for concentrators and non-concentrators alike, assuming you can pull off the mental gymnastics that will sometimes be necessary to get through the course's tricky problems.
This is the hardest class I have ever taken and probably will ever take.  It is also the most interesting.  I honestly wish I could say that I learned all of the material better, but the class is not taught as effectively as it could be.  Don't expect written feedback on your assignments. DO expect to spend >15 or 20 hours on assignments.  All-nighters are common. Be ready for this class and put in all the time it needs.  If you are willing to do the work, take the class. You'll come out much better.
CS124 is difficult in a wonderful way. You will learn a lot, stay up until 4 am, and make great friends. Mitzenmacher is awesome. The TFs aren't that helpful though, unless he hires someone besides awkward nerdy guys next year. Take it especially to prepare for quantitative interviews. The lecture notes are great. Exams and assignments are pretty fun. Don't do it during internship or job recruiting like I did. I wish I had more time to devote to this course.
CS 124 is a must take for anyone interested in the field of computer science. However do not expect this to be a simple intro course; it can be challenging at times.
A knowledge of algorithms and data structures is vital for every computer science concentrator. However, this course takes a much more abstract/theoretical/mathematical viewpoint than most CS courses, and will be difficult for the average CS concentrator without a very strong mathematical background.
Do not take the class, you'll regret it.  You'll learn some useful stuff, but it's just not worth it. How little Mitzenmacher cares about the class is insulting. Not giving out solutions to problem sets and the midterm is not acceptable, and seriously hinders learning the material.
If you enjoy theory, do it.
The course is difficult and takes up a good amount of time. I think you get most out of the class with the more cs theory, math, and probability background.
Painful but useful (hopefully).
Be prepared to do a lot of work.  Although it can be stressful at times, you do learn a lot.
Exams are absolute bitches.  problem sets are pretty fucking hard too.  don't expect a high grade, but the material is awesome.  and mitzenmacher is a genius, although intimidating.
Not as bad as I thought it would be
This course takes a lot of time and is quite difficult, but you do learn a lot.
If you're a CS concentrator, you need to take this. A lot of the stuff you learn is important. That said, the journey will not be pleasant. If you're not a CS concentrator, and are looking for something light and fun, you should reconsider.
Only take it if you need it for a requirement or if you're somehow in love with algorithms.
The only reason you ever have to take this class is if you really really like difficult math proofs. Prepare for a horrible semester (if Mitzenmacher is teaching it).
It's really, really hard, but it's really really worth it.
This is a great way to begin learning algorithms. It really does spark curiosity.
Overall a good experience, the course offers up a wide variety of interesting content. Expect to do a lot of work.
Do not take this class for credit if you don't have to.  AUDIT ONLY!  The lectures are great; the grading system is awful.
Consider taking AM 107 VERY SERIOUSLY.
It's hard.
This class has interesting material, and the teaching is actually pretty good.  But the assignments, feedback, and grading are horrendous.  Problem sets answers are NEVER posted and you will get at most 1 line of feedback on a problem done wrong, which usually isn't enough.  Programming assignments have ambiguities and take forever; the lack of a rubric or consistent point system makes it hard to optimize for limited time.
It's difficult, but the concepts taught are invaluable to a computer scientist.
The material is excellent, as are the tests and assignments.  Mitzenmacher also provides great lecture notes, so going to class is not necessary.
The subject matter is fascinating, but poorly taught. Assignments and tests are fiendishly difficult. If you can avoid taking this class in favor of either learning the material yourself or taking an alternative course, do it.
Great fundamental material for anyone interested in CS. Though the class is notorious for its difficult I didn't find the material hard to understand; applying the concepts to questions on problem sets were definitely a bit tricky but you get used to it. Programming assignments were fair/relevant/straight-forward. Tests were also pretty fair although I wish we were given more reasonable practice problems (in the sense that the ones we were given were not similar in difficulty to the ones on tests). As long as you're working with people in the class you'll be fine.
I mean, you have to take this class for the CS requirement (it's not completely required, but if you want to learn important things for your CS degree, you DEFINITELY need to take this class.) The class is hard. That's pretty much about it. It's interesting; Mitzenmacher was a great professor (now he's going on sabbatical); it's useful, but oh goodness is it hard!Generally the medians and averages on the homework assignments are extremely high so it's possible you would be one of the smarter math kids that takes the class, but... otherwise, I would not expect to get good grades. It definitely gets easier after spring break, but it's pretty difficult otherwise. There are three programming assignments that are nice for programming CS people, but a lot of the theory stuff is really difficult and stuff.
This course is a fun source of problems, and it's interesting to learn about various fundamental techniques for solving basic problems.
Don't take this class if you aren't really math-oriented, at least while Mitzenmacher is still teaching it.
Fairly time-consuming class and tests are quite difficult, but learned a new way of thinking.
A bunch of my peers dubbed this class CS 124/7, because it will take up a lot of your time (unless you have awesome math intuition / are super smart). Having not taken CS20 nor 121, there was definitely an adjustment period I had to go through to catch up on certain material at times, however, the work you put in is most definitely rewarding in the end. You get what you put into this class, and I found that going to office hours and talking problem solving approaches through with your peers and TFs was definitely where I found the most reinforcement of what I had learned during lecture. If you have a genuine interest in problem solving, definitely take this class, but if you hate math and all things related, you will probably find yourself frustrated with this class.
A difficult class but you will learn a lot and gain a new confidence in yourself as a computer scientist. Take it if you are looking for an opportunity to challenge yourself.
be prepared to bleed. Should be better next year. take it early for interviews....
The subject matter of this course is quite fundamental in terms of general problem solving, and it's covered quite well.
A "boot camp" of programming tools that will separate you from the pack in the job hunt and on the job.
This class is very time-consuming, but it's a must if you're serious about CS. If you liked CS 20 and 121, this is a good choice. Just be sure that you have time to put in the work required throughout the semester.
A lot of work (especially before the midterm, but well worth it.
Mitzenmacher's version of this class is hard but well worth the effort.
this class is super hard and yeah don't do it if you want a social life or a life or want to grow up and have kids because you will die kthx
Great class! Fun material! Psets tend to be easy, but tests are fun!
If you have a sufficient math background, this class shouldn't be too difficult. The algorithms you learn in this class and their applications are really interesting and relevant.
The material is very interesting and would be helpful for future job interviews/programming in general. The programming assignments can be a bit rough, since they are open-ended. Try to start early. The material is not too difficult if you understand probability and proof-based math. The lack of practice problems for tests can be frustrating, but lecture notes are a good way to review. Definitely recommend this class if you are interested in CS.
Professor Mitzenmacher explains at the beginning of this course that he aims to provide students with an "algorithmic toolkit," and he does exactly that - he is an excellent lecturer who makes the material he covers both interesting and challenging.  However, very little feedback is provided on the assignments, which are graded harshly and sometimes in arbitrary-seeming fashion, and not much is done to help students prepare for the difficult exams.
Take this class. It's hard, but even if you haven't taken CS121 or Stat110, it's doable. I highly recommend reading Mathematics for Computer Science and the Kleinberg & Tardos textbook.
Watch out
This class is essential for CS concentrators (and for anyone interested in learning what CS is really about.) It's extremely useful because it gives you a toolbox of techniques that you'll be able to apply to new algorithm problems in future classes, projects, or interviews. The class is really meant to test your ability to apply techniques to new problems, so be prepared for challenging tests and problem sets that actually make you think in new settings. Also, be prepared to think rigorously about math-like problems.
Rigorous course, but covers wide range of interesting material that is invaluable for anyone interested in pursuing a career in any field of science, which is becoming increasingly computational.
Great class to take if you don't care much about your GPA. I feel like I really know CS now after I have been exposed to all these powerful algorithms. Take it! It's really hard, but I think you will be glad when looking back on your work after finals. Try really hard and go to office hours. Also, it helps to know at least 2 different languages for the programming assignment. I used C and Java and it was much easier to code in Java. People also used Python. But just in case the code is not going well in one language or a problem seems to be easier in the other language, it is helpful to know more than one. I found the Programming Assignments in this class to be more fun than the written assignments (but graph problems were really fun on the written assignments, too). For the programming assignments, make sure you are getting the right results before turning in your assignments!I took this class after Stat 110 without CS121. I thought it was hard, but the second half was better. I was also taking APMTH 21b along with it. I think if you work hard enough, you can pull through. But be ready for a challenge!
Don't feel you need to take CS50 before this course if you have a strong mathematics background.
awesome class! loved the professor
Although this class is demanding, it is very important and relevant material for all computer scientists. TAKE THIS CLASS! You will put in a lot of work but ultimately learn a lot.
Lots of work, but a very fun and interesting class overall.
It is hard - very hard. But it is also very useful and rewarding. I have no idea how it will be without Mitzenmacher teaching it, but it will probably still be very hard. Not that it matters for you, but "The Dark Lord" was way better than most of us expected from his reputation (current theory is nostalgia) - he didn't even put the midterm on the same day that the hardest pset was due, on Housing Day...
A challenge, but an extraordinarily opportunity to learn a large amount of useful information, especially for a CS concentrator.
It is tons of work and you will fail the exams unless you're really really good at math etc.
Tough but useful.
Such useful and interesting material. Not as hard as people make it out to be (Not a math genius, I had only one semester of proof-based math under my belt when I took this). Exams are depressing, but other than that the course is fantastic and Mitzenmacher is awesome.
You're not a CS major until you take an Algorithms course.
Know what you are getting yourself into. There are certainly more difficult classes at this school, but this one is no cakewalk. The assignments are challenging and relatively time consuming, and the exams difficult. That being said, it's a very good class, and I recommend it if the workload seems manageable.
This class is extremely difficult, but it is absolutely necessary for a computer science concentrator.  If you want to get the most out of this class, expect to spend a lot of time trying to understand and digest the course and lecture material.  Office hours are extremely helpful for problem sets.
This is a class that you must take if you're seriously considering concentrating in computer science, or if you have an interest in problem-solving in general.
This class is one of the best CS classes that I've ever taken at Harvard, and it's an amazing introduction to algorithms. Unfortunately, Mitzenmacher is not teaching it next year, so who knows what it's going to be like? But if you're apprehensive about taking a theory course, don't be! Theory s actually very interesting, and as long as you think you'll be fine!
This course is tough, and you might struggle with the problem sets and have to run around to different office hours throughout the week, but it's rewarding because at the end of the semester it will (hopefully) click, and you'll have learned so many useful algorithms and become a better thinker and computer scientist.
This course is a hard course. Make sure that you are adequately prepared (CS121, and Stat 110). Also, make sure to study Dynamic Programming, that's a biggie.
This is a tough class but you will come out with a "toolbelt" that will serve you well when thinking about all classes of computational problems, and it will genuinely make you a more intelligent person for taking it.
Decent class, exams are hard.
The class does what it says on the tin.
This class is a must for computer science majors. It's a shame Professor Mitzenmacher won't be teaching it in the near future, because his lectures are very helpful and well organized. Start the homework assignments early, go to office hours and sections, and don't be frightened too much by the midterm. The midterm is a serious time crunch, but the final is better. The grading seemed arbitrary to me, and harsh if you have an answer that's not exactly what they're looking for. Definitely allocate a lot of time for this class and have a good working knowledge of mathematical proofs. Stat110 is definitely helpful, and so is CS121.
If you want to learn how to be a good programmer this course is not essential. If you want to go on and do comp sci research, this course is a must. Unfortunately it is a CS requirement...
This class was amazing. While challenging, you'll be exposed to a lot of really interesting algorithmic concepts and see how they can be used to solve some reallly common problems (problems that you could actually see as a real software developer, i.e. calculating document similarity). Unfortunately Mitzenmacher won't be teaching next year so I'm not sure how the course structure will change. But regardless, data structures and algorithms are definitely worth learning (there's far more to learn than just the sorting and searching of CS50!)
This class is hard.  I would recommend taking an easier course load the semester that you take this course.  It's definitely rewarding if you spend time on it.  What you learn in this class will be extremely useful if you're planning on concentrating in computer science.
A difficult class with interesting material which is fairly applicable in many ways, but feedback is little with long turnaround times in grading.
Great course to take. Hard but worth it. I don't know how it will be since Mitzenmacher won't be teaching next year, but this year was a lot of fun. All the projects and psets really cemented what we learned, and its a great course as well for interviewing and other stuff.
Definitely take this. Who knows how it'll be with Jelani Nelson but hopefully still awesome. If you take the AM course instead you suck (that's addressed to CS majors). If you're a math guy you'll probably enjoy the course a lot and it'll probably be easier than it is for CS majors (but it helps to have a bit of programming experience).Also it's very hard and grades are always a source for panic but whatever you need to learn algorithms and it's not all that easy to do on your own (more specifically, it's not that easy to self-teach the crit thinking behind coming up with an algo).
Good class. Interesting material. Moderately difficult. I came in having taken math 25a and CS50, although I did have a couple semesters' worth of introductory computer science from Stanford's OpenCourseWare material. My roommate was a math 55er, although he had a little less programming experience. Having someone like him to collaborate with made things easier. Problem sets were fairly easy -- way less work than Math 25 psets. Took 4-5 hours working with a friend. Exams are a b*tch. Best way to prepare is to do practice problems under time pressure.
I feel like CS124 had a reputation for being extremely impossible; it's not though! Perhaps it was nicer this year because there was one smaller problem set a week as opposed to a bigger every two weeks. You should take it!
Necessary material for any serious CS concentrator, but a very painful class overall.
Take this course because it is necessary, but there are definitely things that can be much improved. Hope that it is better with the new professor!
CS 124 has to be taken at face value. It's a fairly work-intensive course that teaches concepts that are absolutely essential to any computer scientist. You won't find it to be unbearably hard if you've taken any programming course beyond CS50 and either Stat 110 or AM 107. The material is presented clearly and sensibly, and the topics are never too hard to wrap one's head around (with the exception of dynamic programming, a necessary evil). All CS concentrators (and Math/AM concentrators, for that matter) should take this course.
This is a great survey of well-known algorithms. By no means a coding class, it requires a solid background in proofs and some knowledge of combinatorics. A must-take for all prospective CS concentrators.
Amazing class, very well-taught and structured. Prof. Mitzenmacher is awesome and the material is very interesting.
You'll learn. You'll learn the hard way, but you'll learn (and often, you'll like it too)
It's difficult, but it's stuff you have to know if you want to pursue CS. Lectures were a bit tedious but the lecture notes were easy to follow and absolutely indispensable.
The way that Mitzenmacher teaches algorithms in this class really gets the theory across in a way that both lets you implement them well but also carry across those concepts to other areas of CS. Many find this class very challenging, but what you learn is so indispensable that it's worth it.
This has been one of my favorite classes at Harvard! Mitzenmacher is a great professor; it's a shame that he won't be here next year.
Professor Mitzenmacher's exams are designed to be extremely hard to complete in the allotted time.  As such--and he states this explicitly--the goal in taking an exam should be to get as many points as possible in the time, not to complete the entire exam.
I went into this class thinking that 124 would be incredibly difficult - it definitely has that reputation. As someone who is not a super strong CS major, I absolutely loved it and found the material very understandable and accessible. Do not pass up on this class!
I obviously can't say what the course will be like after Prof. Mitzenmacher leaves. Hopefully, in the future, it will continue to be as well-taught / designed. But regardless, any CS concentrator, or non-CS concentrator interested in CS, needs to know the material taught in this course. It's fundamental to computer science.
CS124 is definitely one of the courses a CS major must take. You do need to learn about these algorithms and techniques before calling yourself a computer science major. However, the course is pretty challenging. So try to go through the lecture notes very carefully and make sure you understand everything in the note.
It was a challenging course, but very well taught with Mitzenmacher.  Who knows what it will be like after him?
If you are a CS major, you have to take this class. It is what CS is all about. However, it will be probably one of the hardest classes you'll take. Don't wimp out and take the AM107 replacement...
The exams are the hardest part of this class. Prepare well and work furiously
A difficult course. Do not take the assignments lightly, as they are pretty difficult.
Excellent class for an in-depth treatment of numerous approaches to algorithms and the mathematical tools required for algorithm analysis. Keep in mind this is not a class that just throws dozens upon dozens of algorithms at you to regurgitate on tests, but rather looks into a few key algorithms and mathematically why they work.Keep in mind that this class does require some mathematical sophistication in terms of discrete math and proofs, so brush up or take CS20 if you have never done this type of math.The books are also great resources for looking at algorithms more in-depth as well as looking at a broader range of algorithms that cannot be covered in the limited class time. The books are not necessary to do well in class, since the lecture notes are usually fantastic, but still a great reference.Otherwise, it's not incredibly difficult.
The material is extremely interesting, and you'll begin to think computationally by the end of the course.
This class could be so much more if the course staff would affect a few changes. Professor Mitzenmacher is an excellent lecturer and he really does seem to care about his students. However, this care and excellence are tempered by a paranoid tendency to protect the problem sets and tests because "there are only so many good algorithms questions out there." This is a weak excuse for not releasing solutions, and it does not fit the otherwise outstanding quality of this course. Furthermore, despite the very strongly worded collaboration statement, there is a huge amount of answer sharing in this class, with some instances worse than others. I heard that there was a mailing list of shared answers to the problem sets, and office hours towards the end of the week featured 10-20 people working together and sharing each answer as they figured it out. For someone who honestly followed the guidelines, it was exceptionally frustrating to see my peers cheating like this. Perhaps Professor Mitzenmacher should focus on stopping the fragrant, and indeed rampant, cheating and relax his protection of the problem sets a bit. I would say to take this course, but be ready for the details of a mismanaged class to drag down excellent material and lectures.
Mitzenmacher's approach to teaching seems to be "present the material and not care about students' struggles."  The same problems are reused every year, so you won't have practice exams to go through, and you can only get your midterm back for a limited time.  This generally prevents you from learning from your mistakes.His responses on Piazza are rarely helpful and often condescending, a feature that I feel isn't becoming of any teacher regardless of tenure.The material itself is quite interesting, but just be prepared for a professor like Mitzenmacher.
The material from this course is so valuable to have for tech recruitment season.  It does take much time to complete the problem sets and they are designed in such a way that you will need to collaborate with your peers.  The book listed is not very helpful for the course and describes the algorithms much to vaguely.
Brace yourself.
I found 124 slightly easier than 121, but they're both a solid chunk of work -- anticipate focusing your semester around this class.
The only CS class you need to take. I was totally not fond of the 120s requirement, but this has turned out to be my favorite CS class by far. Still not a fan of 121.
It seems to be more about general cleverness and problem solving ability than any specific computer science skills.
It's not as hard as people say. The material is very interesting. It is true that you can just read the lecture notes and do the assignments and do fine in the class. If that isn't enough for you, there is a large team of TFs that are all super smart (at least they were this year) that can help you.
I honestly know 2 people that liked this course (not counting the TFs I knew) and it was because in their country they have been doing heavy math proofs since 6th grade. Pick up the recommended book CLRS from the very beginning and use it as your bible. It's not impossible, though, so just come in and make sure to be ready to spend a lot of time on it. Advice: do not take this with 4 other courses.
Algorithms are annoying. If you see it you see it; if you don't see it, it might take you hours to realize something that is obvious to others. Very different from mathematical proofs, which has a systematic way to coming up a proof. The proofs for this class has no intrinsic structure; it heavily relies on your gut logic.
THIS CLASS IS HARD. But it is well worth the information in it. Sure, you could probably learn all the material yourself; its not really very hard. But the problem sets and programming assignments are where the struggles lie, and the exams are ridiculously tough for most people. If you are CS, this is a must-take class for the future. Be prepared to work really hard and still do average/poorly. TFs are somewhat helpful, mitz is terrible with timing the pset and midterm exams. You will hate this class and love the material at the same time.
This course is critical to the education of any CS concentrator, and provides interesting material for anyone tangentially interested in CS. While the assignments are difficult, they are manageable with adequate planning. The teaching staff is very helpful - though problem set answers or the midterm are not released, they can help answer any questions about them. Do not be deterred by the horror stories, I thought I would not like the class at all, and ultimately found I very much enjoyed the material (hard as it may be). You can take it pass/fail, but at least take it.
Definitely the course that taught me the most this semester - I could actually feel myself getting better at algorithms. If you have a math background, don't be scared off by the complainers. You'll be fine. If you don't, it might help to take a proof-y math class first (CS 20, maybe?)
Take this course. It's hard but I felt given the quality of students in the class most should be able to do the work. Read the textbook before lecture (or at least read the lecture notes directly afterwards)
Programming interview questions focus on algorithms. This class has been so helpful in getting me a job.
As hard as everyone says it is, but definitely worth it. One of my favorite classes this semester, even with the all-nighters!
The TFs really make or break the course. And luckily, there were some great TFs this year who were genuinely excited about helping the students. That said, I'd be likely to recommend this class merely on how important (and interesting) the material is.
Please take this class, especially if you are a CS major. It is difficult but the material is extremely interesting - stuff that every single CS major should have learned before they graduate.
The assignments, while challenging, are doable and sometimes even interesting. The only really ridiculous part of the course is the exams, which are unfortunately impossible to study for because there are no practice problems. It's useful to have theoretical math experience from previous classes (math 23/25+, cs 121, select applied math courses that have theory in them).
Don't be fooled by bad reports of this class. It's no-nonsense, yes, but that's why you learn this important material well! You'll be appreciative for this class later on in your career.
If you're interested in algorithms, and are willing to put in the work, take this class. Otherwise it may cause a little too much stress, so don't take it on a whim or because all your friends are.
If you are a CS undergraduate required to take a second theory course - Do Not Take This One - unless you also consider yourself a math major.
The hardest class taken this far in college; painful (to be fair though I did lean a lot but not sure how efficient the process is...)
A strong background in math, proofs, and problem solving will prove very useful in this course. The material is interesting, but be prepared for challenging assignments and exams. While Mitzenmacher's lectures can sometimes be difficult to follow, his lecture notes are amazing. Because of this, I found the recommended textbook (CLRS) unnecessary.
It's broccoli; you just gotta take it. This class was definitely tough, and placing the midterm on housing day with a problem set due was definitely a pain. The midterm and final were difficult. Even though the class was hard, the material was very very interesting and is definitely essential for any computer science major. Mitzenmacher, despite making things especially difficult (on housing day), definitely generates enthusiasm for the material, and lectures were very engaging and were well-motivated by relevant real world examples.
exams are quite difficult but the class is awesome.
hard. very hard. but you learn a lot. be prepared to get bad scores... very hard course, but a must for cs majors
I am baffled as to why Prof. Mitzenmacher is still allowed to teach this class. His lazy attitude toward teaching was frustrating and not conducive to learning. While the lectures were decently clear, I got almost no feedback at all on my work. Written solutions were not given for any of the problem sets, there were no practice exams or exam solutions, and solutions to practice problems we covered in section were only posted a few days before the final. It was not clear what was expected in terms of giving proofs on psets and exams. I know that Mitzenmacher wanted to keep the solutions private so that the questions can be reused in future years, but that's just lazy teaching. Also, the fact that he scheduled a midterm and a problem set on housing day (and was totally unwilling to adjust the schedule) shows that he doesn't really care about the students. If you are the type of person who learns by example, this class will not be good for you. I would avoid taking this class if possible - don't take it as an elective. I didn't find the material interesting enough to be worth the time, effort, and frustration of doing the assignments, and I think I could have learned it by just reading the lecture notes or the textbook. that being said, dedicated TFs can make the experience less painful. Going to office hours a lot helped.
Take this class because of the material.  Start the psets early, and focus on them, because they are immensely rewarding.  However, they are extremely brutal.  Take easier classes during the semester that you undertake this huge workload.Also, don't expect to get a good grade in this class, let alone decent or timely feedback on anything.  It's also ridiculous that one of the harder psets is due on the same day as the midterm, meaning that your midterm performance will suck that much more.
if you love math and problem solving, take this class. it's awesome.
This course is computer science vegetables. It is very hard, very painful and you'll be lucky to get a B+, but the material in incredibly relevant and any computer scientist graduating from Harvard should be familiar with it.
The choice between making a problem set due on the day of the midterm or making it due earlier is a false dichotomy that anyone attending Harvard should be too intelligent to fall for. This is just one example of the way the course staff enacts policies that antagonize students. It's a shame that such useful and interesting subject matter is coupled with such an environment.
Great course. Often pretty difficult, but totally worth it. Basically an algorithm toolbox.
The course isn't as bad as you might think, but there are still challenging moments, and the exams are a little insane. It's stuff worth knowing, but the class often presents an unnecessarily fuzzy or unclear description of concepts that, to be perfectly honest, are actually not that hard. If you're willing to demystify on your own time, it might be worth it.
hard.
The class is hard but you get a lot out of it. Highly recommend to CS and math concentrators.
This is all material you need to know.  Be careful in choosing a balanced workload of other courses when you take this course.
This is a fabulous course. Mitzenmacher is actually a really great lecturer and motivates everything that we learn in class. Only issue is that the assignments can be a bit rushed. Sometimes material isn't presented until the pset is almost due.Be prepared to spend some time on this course though. It's not hard per say, but it requires concentration.
This class is hard. Don't let anyone tell you otherwise. At the same time, it's incredibly rewarding and if you have any intellectual curiosity, you'll be glad you took this class. I would say mathematical maturity is more important than programming experience. For the programming assignments, pair up one math person with one coding person, and you should be fine. The midterm and final are killer. Don't underestimate them. Good luck and enjoy the ride! Even though it almost killed me, I'm genuinely sad it's over.
It's not a perfect class, and I hear MIT's version is much better. But if you're in CS, you'll take it either way; if you're in math or physics, you won't have that much trouble with it despite the negative points; so no harm, no foul.
The exams are the only difficult thing in the course.
It is hard. If you have a midterm on housing day like we did this year, you will be sad. But then again, the midterm will make you sad anyway.
Do NOT take this class. You never have to, because if you're a CS concentrator you can take AM 107 instead. And if you really want an algorithms class, find a way to take 6.006 or 6.046 at MIT instead; those are sure to be better. It's incredibly difficult (on a scale from 1 to impossible, it's harder than impossible), not well taught, has awful assignment grade turnaround time, a problem set due on the same day as the midterm, lecture notes full of errors, and no practice exams. That said, it is useful material, but learning that material is honestly not worth it if CS124 is the class you have to take to get it, so my original assessment still stands.
Be prepared to work a lot for this course - you will also have to work extra hard to find your own practice problems or some means of studying as almost none are provided.
If you're a CS concentrator, definitely take this class. The material covered in this class is at the heart of CS and will show up everywhere. Be prepared to spend long hours on assignments.
A lot of hard work but it's worth the effort. MM not only covers the general topics in algorithms and data structure, but he also adds a valuable perspective based on his own research. I found some randomized approaches very interesting although I am not a CS major.
Very difficult, but very rewarding. Teaches you how to do algorithms and helps with job interviews.
This class will develop both your programming skills and give you vital information about algorithm design. Don't be discouraged because of the class' relative difficulty - the learning experience is worth it.
It's hard but not that bad if you keep up with lectures and don't get behind
Cool material, killer midterm, manageable final. Some background in math definitely helps.
Read CLRS! It's much more informative than the lecture notes.
If you every plan to program anything serious, you should take this class. Besides helping me pass my job interview, it covers some of the most interesting and relevant topics in CS.
Algorithms are great! Be prepared to put in a lot of work, though.
This class is suffocatingly competitive. It is interesting material, but the interest is nearly lost with a rude professor who ostensibly cares only about the top of the class.
124 is no doubt a tough class but it is also super useful. In fact, if you want a job in CS you MUST take this course. Multiple problem set questions appeared on my interviews and the algorithmic thinking helped me solve any other problem they asked. Also while it is tough it is not unfair. The problem sets and exams will be as you expect them without any weird tricks. Thus tough useful and fair is how I would describe it.
CS 124 was amazing.  If you enjoy thinking about interesting problems (kind of like high school math contests), then definitely take the class.  I even found the tests really enjoyable because the problems were fun to figure out.  The workload isn't actually too bad, but since the assignments are usually almost 2 weeks long, it's easy to put them off and make the workload seem a lot heavier than it should be.
useful
This is a great introduction to algorithms - challenging, but rewarding if you put the time in.
Get started on the psets early, and try to meet up with other people to work on them. For the exams: work quickly. They are longer than they should be.
CS124 isn't too bad for an introduction to some basic algorithms, but it could be a lot more rigorous. Fairly light workload. I'd recommend taking MIT's algorithms courses instead if you want to learn more.
The material, lectures, and problem sets are all really great. However, the exams are really geared towards a how-quickly-can-you-solve-these-problems type of mindset, and are pretty stressful. Overall, still definitely worth taking. Be prepared to work very hard.
This is an extremely difficult class. In the end, I think I learned a lot about the concepts but I still have a lot of trouble applying them.
Worth taking if you're going to be working in CS or are interested in learning tools for solving algorithmic problems.
This is a difficult class, but you will learn a huge amount of really interesting material. Especially if you have some more experience with proofs, the problem sets will be fairly reasonable (especially since they are staggered at 1.5 week intervals, rather than every week); however, due to time pressure the midterm and final tend to be very difficult.
I learned a lot from this class and really enjoyed the material but it was consistently a struggle. Problem sets can crush you and the midterm is more of a test of mathematical reasoning and problem solving then real knowledge of the material. Still thought it was a great class but know what you are getting your self into.
Very hard, very rewarding
it seems like a good class to take, there is good material and Mitzenmacher is pretty entertaining. but yeah, the exams are brutal.
What an insanely hard class. I would hand in my problem set on wednesday, they'd release the problem set thursday, and once i'd finally got my other psets done for other classes, friday afternoon i'd be working on this again. Midterms are brutal (first midterm mean was ~50, second was ~33). This class will be very very hard if you don't go to section and/or work with a partner. You might notice that before the first midterm, your grade is hovering around an a-, b+, and that after midterms you very easily will fall an entire letter grade or more. However, even if you feel like your grade says you've learned nothing from the class, the truth is that you will look at all problems with a whole different perspective. If you're in CS, you dont (and shouldnt) have a choice about taking this class. algorithms are too important to not take. Also, in a weird way, if you dont have a very strong math background, you didnt have to worry about the midterms too much. you would accept your low grade, but would just work harder on the problem sets and programming problem to make up for it. believe me when i say that EVERYONE struggles in this class.
Try to develop your skills (as opposed to focusing on acquiring knowledge of algorithm runtimes only).
Yes, this course takes up quite a bit of time each week, and the exams can feel brutal, but in the end, you learn so much that it's worth it. Jelani is a great lecturer and covers each topic with such clarity (his sense of pacing for the course is good--there were no weeks that felt especially overwhelming; they were all uniformly demanding). The TFs were also fantastic/patient/available. Take this course if you can reasonably fit it into your schedule, but make sure you have a couple of friends taking the course with you. It's definitely too hard of a course to take alone, but it's so worth taking.
Really, really, really, really, really tough course. Takes a ton of time and after each exam you feel like you've just been wrecked and know nothing. You definitely learn a lot of really cool things, but the psets and exams are killer, expect to devote much of your week to the assignments.
The material for this class was easily among the most interesting I've come across at Harvard. Yes, the problem sets were difficult and exams were painful, but I can't think of a class where I've learned more. The problem sets were honestly fine with the exception of 3 or 4 insanely difficult problems we saw over the whole semester--definitely take this class if you're on the border.
This course is very challenging but very useful. You will have to work. You will be a better computer scientist after it. I can't believe it's "introductory" but compared to algorithms classes at other schools it's not even hard. Although it is hard. Unfortunately there weren't enough TFs for the size of the enrollment. This is a perpetual problem at Harvard SEAS. You would think they would bite the bullet and hire some non student TFs, but I wonder why not. Also, go to section. It is very helpful for problem sets. You have to take this course. Try to enjoy eating your CD vegetables. It can make you a better engineer.
CS124 is very difficult, probably more difficult than the most difficult class you've taken up until now (unless you're a theory wizard). However, it's completely worth it and it will change your perspective on how to program.
It's sad, because the information itself is really interesting and has so much potential to be taught well, and you do learn to do some great things. However, it is so unattainably difficult that most people struggle through to just pass the class and don't end up learning as well or as much as they could have. It is completely ridiculous to have exams with averages less than 40%. When the goal of an exam is to score a few points (LITERALLY scoring SOME points was the goal), this doesn't really test how much someone has learned in a class. It tests how lucky/good someone was at picking which problem to try, because maybe they picked a question that ended up having a .5 pt average and spent all their time on that, only to get 1 point, vs. spending the same amount of time on an easier question and earning 5-6 points on it. All because one made the decision to pick a different problem for no particular reason, they could end up failing or passing the exam. There are few questions that test simply how well you know concepts in addition to some tougher questions--instead, the tests feature pset-difficulty questions, but instead of having 5 hours to solve each problem, you are given 1.5 hours to attempt to solve 5-7 of them. Basically, it is unfeasible and tests your ability to be inspired/struck by sudden insight that allow you to solve these problems in a few minutes and then to write a thorough mathematical proof after that. For a basis of comparison, MIT 6.006's practice tests were significantly more straightforward than our tests--challenging, yes, but significantly more doable, and tested your grasp of the concepts rather than luck/inspiration. Partial credit is not nearly as present on exams as it generally is in other CS/math/science classes here. Psets were so difficult that they must be completed at office hours or else you would fail the class. Slightly more manageable psets would probably let people learn the material better.  Also, the fact that the extra credit assignment was non-collaborative (couldn't even ask TFs) AND only resulted in extra credit if you got 100% was just silly. In my experience, professors offer extra credit to help people who may be struggling in a class--yet this assignment managed to offer extra credit almost exclusively to the people in the class who absolutely don't need it and are likely getting As (if not getting the highest scores in the class). This is fine, but what is the point of this? It just demoralizes people to the point that most people who would have done anything for a bit of extra credit--I was willing to put in many hours, but the thought of putting 15+ hours into something while trying to code a solution and wasn't even sure if I was going in the right direction, only to get 0 points unless I got the total solution. Hands down most pointless extra credit assignment I've ever come across in my academic experience. Do not take if you can avoid, unless you like spending pointless amounts of time struggling over concepts and problems that no one but a few geniuses understand.If you do have to take it (it is pretty standard to take an algorithms class at some point and teaches valuable material), make sure you are supplementing lecture and psets with the MIT .006 lectures and coursenotes from CMU and other universities, because they are often clearer and explain concepts well. Also, read the CLRS chapters that relate to the topic. The class does not release a recommended reading list to accompany topics (which would have been helpful), but reading all of the relevant material helps a lot. Also, accept the fact that this class will eat up all your time, and resign yourself to horrible midterms.If you're a genius, ignore the above. Take this class. It is designed for you and taught to your needs.
This class is serious business - there is a lot of work, but the work is very rewarding and relates well to the lectures.  You will leave this class having learned more about algorithms.
If you do not need to take this course, consider taking it pass/fail.
Be prepared to put in the work. You will learn a lot and Professor Nelson is brilliant, but the problem sets are difficult and require on average 20-30 hours to complete in full. The tests are impossible but that's to expect.
This course is without a doubt, the worst course I've ever taken at Harvard. The material is amazing and Prof. Nelson is a really great guy. However, the psets and exams are beyond challenging. They're simply confusing and frustrating. Course staff was also not particularly helpful in trying to clear up confusion over the pset questions. Work on psets early. Find a partner.
Fantastic course, genuinely fun, though expect to put in at least 20 hours a week. Form a pset group early on!
Wuz up fam, my most honest opinion is that this class is the bomb. The most important thing for this class is to find a good study group. You do not want to be working alone in this class! In any case, I learned a lot and Jelani is honestly the chillest professor. He is really inspiring and really knows what he's talking about.
I don't regret taking the class, but I would definitely not do it again. Be prepared to put a ton of time into the class
Obviously, this class is very hard. Some of the questions on the psets were famously solved by algorithmists in recent years. You need to go to office hours and you NEED to have a group of friends to survive this class. Yes, the work can be extremely interesting, and the subject material alone has made it one of my favorite classes ever. But you just can't do the work alone. It is senselessly challenging unless you have a strong statistical and mathematical background (STAT110 + Math 23) and don't mind making this the No.1 priority of your semester.I liked Jelani's lectures. But a lot of basic concepts necessary for comprehension were routinely skipped both in lecture and lecture notes because they were seen as too easy or just "trivial". So I would recommend finding more explanatory notes from Berkeley or Stanford (there are tons of pdfs online). The teaching staff seemed bound by the professor to be very conservative in their help, which left a lot of students frustrated during office hours. But don't think they don't know how hard this class is! During the final exam review session, they all began referring to your ability to infer how to approach a question on the exam as "divine inspiration."
This is one of the best classes I've taken at Harvard and definitely the best CS course.  It's super challenging, but you learn so much.  I don't think Jelani will be teaching it next semester, so I'd recommend waiting a year to take it with him if you can :)
This class has very important material. On the other hand, it's way too hard.
Take the MIT class instead. It's much better taught. If you have to take this, then make sure you have strong proof based math background and a lot of time this semester.
This class is extremely hard. I usually love working on problem sets alone before going to office hours, but after the first few weeks, I was so frustrated with the problem sets that I just wanted to ask anyone around and get by. I think most of my friends just wanted to get the problem sets done. This really isn't good for learning. Algorithms is such a fascinating topic, and it is a shame that this class wasn't interesting. Jelani should try to make it less abstract and more relatable. I took an algorithms class at MIT and it was much better.
CS 124 is understandably a very controversial class. The workload is very substantial, and much larger than some other courses that are considered very demand (e.g. Stat 110, Ec 1011). You will learn a TON about how to construct and think about algorithms for a lot of different situations. At the same time, the difficulty of the problem sets does create temptation for people to cheat, write inadequate answers, etc. (DON'T follow these temptations -- I know plenty of people who did well on the problem sets by getting answers from their friends but ended up bombing the exams because they didn't actually understand the material.)I'm not sure if Jelani is teaching this next year, but I thought he seemed very approachable and did a great job of explaining algorithms and proving results in class, in most cases. However, I think it would have been helpful if lectures had spent more time discussing cases in which an algorithm could be applied, rather than just discussing the algorithm for a seemingly isolated problem and then moving on. (While the problem sets did give me practice in constructing algorithms in this way, I think it still might have been nice to discuss this in lecture as well.) All in all, I learned a lot, though the class was somewhat of a struggle.
This is an extremely hard class but quite comprehensive in terms of the material.
You saw the Q scores. You read the comments, perhaps also saw the link to a Google Doc someone infamously posted. Yes, they were right, you will spend hours upon hours on each pset. I'm not sure if all those hours spent struggling (and I mean, STRUGGLING) were entirely worth it, but this course overall does teach you a lot of super useful and interesting material. The programming problems, where you apply theory to actual coding assignments, is very, very cool, because you witness firsthand the importance of efficient algorithms. Jelani is AWESOMEsuper smart, an engaging lecturer (though some lectures you're not entirely sure what magically unfurled on the board before your eyes), and approachable to boot. But just be prepared to labor over this course. Real hard. No mercy.
CS 124 is a very interesting class! Despite its reputation for being very difficult, I think that it's definitely a good experience as well as an integral part of the knowledge that any student studying computer science should have.
Hard
This class is hard but worthwhile. Jelani is amazing and clearly cares about his students. Some assignments are stupidly hard, but you get the answers at office hours like everyone else. Those problem sets take a long time, but otherwise this course is reasonable.
Fairly difficult course. Some psets are very easy, while others are extremely difficult. Grading is pretty harsh.
Hi CS concentrator. Guess you'll need to take this class. Try it enjoy it, and find a study group. Jelani was a great lecturer, and I really liked the content! The psets and exams  were just a bit of a downer though because they seemed to require things that were outside the scope of this class, mainly clever math tricks that aren't taught in any usual math course here.
Jelani and the course staff were great and very dedicated.  I really enjoyed the programming assignments.  Midterms and final were ridiculously hard.  Unfortunately, felt like I didn't walk away from it with that much more knowledge.  I felt like the course would have benefitted from actually solidifying the concepts for us before jumping into applying them to such hard problems;  I felt like I missed the step of basic understanding in a lot of the concepts.
I'm really glad that I took this course.  And I'm really glad that I took this course P/F.  It took me many hours to do the homeworks, and it would have taken tons more had I done it for a grade.  P/F allowed me to get basically all of it without having to worry about minutiae.  I'd highly recommend this course P/F.  You learn a ton and it's pretty fun.
This class is a must-take. However, this class is insanely difficult. Some notes:1) The staff was absolutely incredible. There were more than 15 hours of office hours between Monday and Wednesday every single week, and TFs were willing to help students with anything, regardless if it was explaining an algorithm to them 10 times until they understood it or looking at buggy code. Furthermore, the average response time on Piazza was 6 minutes. That's right 6 minutes. So regardless of whether you posted a question at 4:00 pm or 4:00 am, you would get a USEFUL answer right away. Special thanks to Kevin Schmid who, by far, answered the most Piazza questions from the staff.2) Exams and psets are absolutely impossible. The mean on the first exam was a 49% and the mean on the second exam was a 32%. Essentially, was this meant was that you could not show up to the exam and be within 3 standard deviations of the exam mean. On top of that, depending on how you guessed on the True/False section, you final exam grade could vary by a whole standard deviation. Psets were also usually pretty brutal. A lot of kids would show up to office hours only having read the psets and not knowing how to start any problem.3) Jelani is an excellent professor. He knows the material of his class better than any other professor knows the material of their class that I've ever taken at Harvard. However, often time his lectures were hard to follow because for him it's trivial math but for a student taking the class, he's doing the equivalent of solving P vs. NP, which, as we all know, is kind of hard for an average person in CS124 to do. However, he is genuinely a nice guy and really cares about his students. He is very down to earth and awesome to spend time with outside of class. If you have the chance to do so, make sure to ask him about his admission to MIT, his trip to Stanford before grad school, and how he got into algorithms. 4) This class takes about 3 days of your week. Be weary of taking it with another difficult class!
A looooot of work. Don't take this class unless you are truly interested in the class
Requires a lot of work.
This course takes alot of work. It takes alot of group work. This class is not easy. You need a strong math background. A strong math background and a strong math background. Assignments and tests are demoralizing and you learn to get over the divine inspiration that you don't get weekly. But if you work hard, learn from others, ask for help, and fail every test, you will walk away from the course knowing more. And that's why we are here. Not to get good grades, not to feel good, but to learn slightly more. And you'll learn slightly more, if you have a strong math background. I did not, but I still learned a little.
You probably have to take this class to get your CS degree, so I recommend it anyway. Go into it knowing you should dedicate at least 20 hours to it unless you are especially skilled writing algorithms and proofs. It will involve programming assignments and lots of theory. Time constraints really trip you up on the programming assignments. Significant portions of your life will be taken up by this class, especially the day of and the day before the pset is due. The lectures are okay though Jelani himself is cool, the psets are murder but barely manageable if you team up and you can bug the crap out of a TF, but the midterms are even more murderous (a la 33% averages for both my year) and are worse than the psets but with only 1.5 hours to do them. Time pressure for the midterms is REAL and you will fail badly if you don't manage it properly. Nobody finishes the test, everyone only does part, so damn well better try to identify the easiest problems and do those. cs124 is learning, cs124 is despair.
Take this class! CS124 is a life changing experience. It makes you rethink what problem solving is. You will think like an efficient computer scientist after this class. The assignment is the most rewarding part of this class. You will be intellectually challenged and learn a lot from it
Difficult. Time consuming. Rewarding.
Incredibly difficult, but you learn a ton. It helps to have a slight background in stats and linear algebra, but not required. I also recommend taking 121 first to get experience writing proofs.
There is no denying that this class is useful, and that even if you don't do amazingly you still learn a lot. Still, it was a very difficult course, and understandably stressful considering that the psets are a higher workload than anything we're used to. Given that I personally did not have that much time to work on them (2-4 days each week), I found it nearly impossible to do them alone and well even working straight through that time, and I often found myself prioritizing either the theory or the programming. I would have personally preferred to spend more time on the programming problems, but given that they were very time intensive, it was often a safer bet to work through the theory instead, which is saddening since I was looking forward to actually coding these things up. In all, it's a very difficult class to work through alone, made frustrating by the fact that many people who seemed to be doing well were simply getting the answers at office hours (but not Piazza, because for whatever reason the teaching staff seemed extremely reluctant to answer questions that would have otherwise been answered at OH), which I felt undermined any incentive to try to come up with your own solution first. It led to a culture that I felt disincentivized a deep understanding of the material for the sake of not failing, which I don't think should be mutually exclusive concepts. But even with less than stellar grades, I still feel like I learned a lot, even though I eventually had to sell my soul to get "help" (largely defined as a trickle down of answers from people at OH) so that I wouldn't actually fail the class. Given a more manageable workload, I think the class would be absolutely amazing, but it still has some work to do.
Prepare for your life to be miserable.
This class is a must-take. It will take a lot of time but you'll feel proud of what you accomplish by the end. I found it really rewarding. It will sometimes put you in the depths of despair but you will find your way out. The TFs are fantastic!
This class is a very good introduction to algorithms and data structures: one that I thoroughly enjoyed. The content can be hard at times, but definitely a doable class overall.
Don't be scared by the previous iteration of this course (namely, Spring 2014). The course significantly improved this year, and this is a must-take course for both CS concentrators and those getting CS secondaries. While the course is certainly still difficult and the psets can definitely take some time, you will definitely learn a lot from this course and you will finish the course with a much deeper understanding of some of the most important aspects of computer science (graph algorithms, randomized algorithms, dynamic programming, etc.). The resources that this class offers are very good - the TFs were excellent, the lecture and section notes are great, and Jelani is a great lecturer. Moreover, this skills and knowledge learned in this class are totally practical and applicable to programming, so don't skip on this class on the grounds that this course is only theoretical.One warning: the exams can be practically impossible at times; for me, I didn't mind it because I generally like hard exams (given that the course is graded on a curve, as CS124 is), but if you are one to get particularly stressed over difficult exams, this is something to keep in mind.
This class is so incredibly difficult. It took probably 30-40 hours a week on average of banging my head against a wall, and even then I couldn't solve some of these problems. You won't be able to do these questions on your own unless you're a prodigyproblem sets have to be done in groups so that you have 3 or 4 times the brainpower. Be prepared to have this consume your entire semester. You will definitely learn a lot about algorithms (definitely way more than the kids at MIT or Stanford will learn), but it will be a very difficult, hard process to do so.
It's a good class. It can be really hard at times, but in some ways that makes it better. The work feels like it's really worth doing.
This class if outstanding.  The material is pretty simple.   Jelani is a fantastic lecturer.  The psets are hard.  The programming problems are hard.  The exams are harder.  This class devours time.  Expect 15 hours if not more.  It's up there with Math 25 and Physics 16 as one of those rare classes that not only teach you an insane amount of material but also how to attack difficult problems.  It's fun.
This was the worst experience I have had with a course at Harvard. This was not due to lack of enthusiasm for the material, but the way the course was run. The problem sets and exams tended to favor being a genius over actually understanding the material. On the second mid-term, single digit scores were within one standard deviation of the mean, which I think indicates something wrong with the test/instructor rather than the students. Though I learned a ton, I always felt like I was doing bad, which is a terrible way to feel all semester. Don't take it unless you have to, and even then think twice.
Took this class pass/fail. Great choice because it's really difficult and a lot of work and I don't have much CS background. Very important and interesting material.
Start problem sets early and use office hours.
Oh, it's a hard class, but you should take it, if only because it teaches you important things. Find a good pset group and go to office hours. These aren't homework problems you can work through step by step--you need other people who can give you fresh ideas.
It was really interesting and much improved over previous offerings, but extremely time consuming. Expect to average 10-15 hours a week on top of class. You will definitely improve as a computer scientist, but it'll be really tough ride.
This class is very, very challenging, but you will learn a lot about approaching and solving different kinds of problems. I think it's worth taking if you are a CS concentrator/secondary.
Take it pass/fail if you can
While this class is often brutal and impossible; it is a necessary evil if you want a CS degree. Prepare to have your sleep schedule adjusted.
Take 124, but be prepared for a challenge -- if you're not super comfortable with the material, find a study group so that you all can slog through the problem sets together: finding a good group will make or break your semester!
Make sure you put in a lot of effort and study hard. Not easy.
Come on. It's a gateway class. You gotta do it.
Know your preparation level. If you are not quite well prepared, expect to allocate long hours to the problem sets.
CS 124 is a beast. It is a very difficult course, but with the right preparation and the mindset that you HAVE to work hard, you will get a lot of this course and a really awesome way to solve problems and foundational computer science concepts. Anyone in the concentration should take this course, but I do hope they make it more accessible to more students!
The comments from Jelani's first year overstate how bad it is. The class is difficult, but can be done. Find a good pset group and bond over the psets and cry over the midterms/final. You have to take it to get a decent tech job anyways.
This class is very very hard. Proceed with caution.
I would highly recommend this class. The material feels disjointed at times, but it does an excellent job of teaching new ways of thinking. Maybe it's because I was anticipating it being very difficult, but I got more out of this class than any other this semester. A strong math background helps a lot.
Know what you're getting yourself into, and you'll be able to get a lot out of this course. It's hard, and you probably won't come out of it with a stellar grade, but that's not why you should take it. You should take it because it will make you smarter. You might not come out of it feeling like you learned a ton or that you can solve every problem when you get a whopping 12% on your midterm, but the thing is you learn how to look at problems differently, and start thinking about different ways to approach every coding challenge from here on out. If Jelani teaches again and makes the problem sets a little bit more doable without needing to run to the TF for everything, this class has the potential to truly be amazing. It's an interesting topic, and necessary for good programming. Just don't go in expecting to ace it, and instead expect to struggle and be frustrated and maybe a little demoralized. Focus on the expansion of your mind and not the grade and it'll be a great experience.
Be good at math
Make sure you know your stuff before taking this class. It is certainly difficult, and the more prepared you are for it the more you will get out of it.
The course is hard, but everyone thinks it is hard, so you're not alone. You learn important things.
Do not take this course. The lectures involve confusing proofs, the assignments involve questions that are too difficult, which don't really exercise your ability to apply the material, but rather use a variety of difficult tricks and mathematical transformations that I was not prepared for even though I took the 21 math series, CS20, CS121. I am totally turned off by computer science now (too bad its too late to switch concentrations!) When the exam average is 30% ish, students are discouraged from studying because they know it will not help anyway.
To those considering this class, know that it is incredibly difficult, and will push you to your limit. However, the material is incredibly interesting and is presented incredibly well. If you are willing to work as hard as you can for a whole semester, you will walk out of the class incredibly confident in your abilities to tackle pretty much any problem that you encounter.
It's a painful course, but a necessity for CS majors.
Be ready to get destroyed, yet learn a lot
This is my favorite class that I've taken at Harvard. Jelani is a phenomenal professor, the problem sets are interesting and challenging without being absurd, the exams are fair (seriously! Even if scores are low, the idea is that he uses the entire range of 1-100, and that 50% or 60% should be a good score), and the content is extremely interesting. No matter what the comments are going to say, take it.
it's hard
it's hard. NP-Hard.
As a CS concentrator, you should definitely take this course, but your GPA's likely will take a hit. If that's what's concerning you, take it Pass-Fail--you'll still learn the information but take a bit of the stress off.
If you are thinking about doing something tech-related, this is a must-do course. Don't cop out and do applied math.
As a preface, I took this class pass/fail. It was the best decision I could have made. Though the material is very interesting, the workload is nearly impossible. The problem sets are very difficult, and the exams are ridiculously hard. This has been by far the hardest class I have ever taken, and I am a Senior so I have already taken all of the classes I will take at Harvard. I took this class as an elective, so I was able to take it pass/fail for fun. If you want to take this class, unless you are extremely mathematically and scientifically inclined (like extremely, I am a Physics major that usually gets very good grades in my classes and I still was not prepared for the workload) then I would recommend taking the class pass/fail. But it was a great class, so still worth it.
This class is incredibly time consuming and will require teamwork, fishing for answers, and about 3 late nights per week. It will also however make you a fantastic programmer. What people say about this class is absolutely true.
It's hard but you learn a lot and the material is relevant when you look for CS or quant jobs.
Very good class, helped solidify concepts a lot. Hard class but definitely doable, especially if you establish good pset buddies at the beginning.
Take the course if you really want to learn algorithms/data structures. If you're taking it "just for the requirement", then you won't enjoy it as much.
If you're considering CS, take this class. It'll probably be the hardest class you take at Harvard (honestly, harder than it needs to be) but you'll learn loads.
IF Jelani is teaching it again next year, wait until the next professor. Unless you don't like sleeping.
This class is hard, but it certainly could be much harder (like half of the algorithms are just slight variations of Depth-First Search). It's a ton of fun, though--the programming problems are awesome, the math is really engaging, and I certainly was exposed to a good breadth of material. Some students got pretty worked up about the lack of transparency in the course (they don't release pset/midterm solutions, Piazza staff answers were pretty shitty at the beginning of the course), but it all turned out alright. Jelani is the man, and course staff is obviously qualified, and, all-together, they run a tight ship. Take this course!
If Jelani is still teaching and course policies have not changed, avoid this class if you can. The concepts are very interesting and important. But the benefit of learning these things from this course instead of on your own or in a different course is vastly outweighed by the struggle of taking the course. it WILL consume your semester by its sheer difficulty.
Wait until there is a change in professors before taking this class.
Brief:Do not take this class unless you have taken CS121, AM107, STAT110, and have a strong mathematical maturity (think Math23+). If the aforementioned does not describe you, this class takes too much time and will likely ruin your semester. Take AM106 or another theory class instead.Some History / Longer Explanation:This class covers essentially two courses worth of material at MIT (6.006 and 6.046) which causes CS124 to be senselessly challenging. Interestingly, MIT used to teach 6.046 in exactly the same manner as CS124 before 2007. Here is the course website from 2003 for 6.046 (http://courses.csail.mit.edu/6.046/spring03/). It is important to note the "Extra Help" section prominently displayed on the old-school web page. This year, Harvard did not have any tutors from the BSC for CS124. Because the MIT version of the course covered too much material, in 2007 MIT introduced 6.006 to take the burden off of its students. Harvard should follow in MIT's footsteps and break up the course into two classes.The material in this class is incredible it is some of the most profound and useful concepts in all of computer science; however, the structure of the course needs to be reformed so that all of the students who take the class can benefit from the topics covered and not just the most mathematically gifted
If you're doing CS, TAKE THIS CLASS! This covers the necessary data structures and algorithms stuff that any computer scientist should know. And it will help you a ton with job/internship interviews. It might get a reputation for being hard, but it's a TON of fun and the psets don't actually take all that long, especially if you have a group to work with. Since the problems are often problem-solving and you need to see a specific insight, having a group to do them with helps a ton. The coding problems were the highlight of my whole semester.
It's the hardest class I've ever taken, but also the most rewarding. I took it concurrently with CS51, and you basically learn everything you need for CS51 in the first week of CS124. I highly recommend having stat110 and proof based math, as the latter half of the course is very probability heavy.
Good for interviews
124 is a wonderful treatment of material that should be at the core of any CS curriculum.  Jelani is a clear and direct lecturer, who writes very good (albeit challenging!) exams and problem sets.  The combination of larger enrollment and increased difficulty (from Mitz to Jelani) resulted in a lot of student unhappiness.  But I don't think the course staff deserves anywhere near the level of hate they received.  Certainly this class doesn't make you feel warm and fuzzy like CS50.  And algorithm is a hard subject taught rigorously by Jelani.  I think Jelani and the rest of the teaching stuff were more than generous with their time and willingness to help students.  I would recommend that any CS concentrator take this course.
The materials for this course are fantastic and extremely useful. I highly recommend taking this course, despite it being so difficult.
If you are concentrating in CS, you will be expected to know this material when you graduate.  None of the replacement classes cover it as well as this one (I took AM107 as well).  This class is a lot of work and you get out of it what you put into it, but it's hard to find the time to get as much out of it as you would like.  The midterms are designed to be difficult and sometimes turn out even more difficult than intended.  I am writing this response prior to taking the final because the final is in the last slot and I will not have time to write it before the system closes two days later - no idea what fresh hell that will inflict.  This class also allows you to bond with your peers as you mutually struggle to get it done before the deadline.  And that is what CS is all about.
This is a very difficult course. I would not recommend taking it unless you are a CS concentrator or are very serious about learning CS. This year's iteration was probably worse than most. The course staff were often very unhelpful on Piazza, and they generally did not seem to care about students' learning. For example, they were unwilling to distribute solutions or specific practice materials for exams, and scheduled a problem set to be due 2 days after a midterm, which did not promote learning of that pset's material. Fortunately, all of these grievances are administrative, and I think by the end of the semester the staff was on the road to fixing them.
This is a fantastic course in which you will learn a huge amount of computer science. I will warn you now. You will be pushed to your limits. Expect to spend huge amounts of time doing problem sets and preparing for exams. Be prepare to be frustrated by the weekly coding problem, which usually takes more time (or at least the same amount roughly) as the rest of the problems combined. That being said, every question on every problem set will push you to think deeply about problems and push you to be a better thinker as a result (with the first problem set - a pretty easy one - being the exception). This is class that you will probably complain about to your blockmates when you take it, but one that you will not regret taking.
Difficult but a class that you must take if you are studying cs. It's definitely worth the allnighters.
I was very excited to take this class with Jelani, although he's just not a great course leader. The coding assignments on each problem set were very taxing. Moreover, the structure of the class seemed to encourage us not to solve problems on our own, but to instead learn how to do problems from people who've done them already. Super discouraging, as it made me feel like I can't do problems on my own.You'll pull all nighters the night before each problem set is due, and if you are taking other difficult classes along with this, it can literally ruin your performance in them.
Professor Nelson is pretty good -- his lectures are somewhat dry but he does a pretty good job getting the idea across.  The psets are quite hard, and will take a lot of time, but you will learn a lot.  The exams are absurdly difficult, which is annoying for a number of reasons, including a squeezed distribution which punishes you if you make any kind of silly mistake.  Overall, an extremely taxing experience, but a rewarding one.
It's a death march, but the you need to suck it up and get through it to learn the material in the course because it is all very useful to any CS major.  Expect this class to take up the majority of your time during the semester.
Very difficult, poorly taught, impossible exams, and difficult problem sets. Interesting material, but impossibly hard.
Well this class is required, so if you're concentrating in CS, you have to take this.This year, Jelani Nelson taught the class instead of Professor Mitzenmacher. From what I heard, Professor Nelson tried to keep the course relatively the same as when Mitzenmacher taught it. However, there were a couple of changes this year. The problem sets this year were weekly and had a coding part in each assignment. There were no partners in the class, which I appreciated because it forces you to really do the coding yourself. There was also an increase to two midterms this year, instead of the usual one. I appreciated this as well, as previous years had the midterm held on housing day. With regards to the problem sets, it seemed that there were different labelings of problems, with some being the same as previous "Mitzenmacher" questions, and some being "Jelani' questions. I think everyone pretty much agreed that "Jelani" questions were much more difficult but at the same time much more interesting than the other kinds of questions.The TFs also told us that there isn't much communication amongst themselves, which was a cause for concern. This meant that what you learned in section varied amongst the TFs, and overall, I thought section was relatively useless in comparison to just reading the lecture notes.The class size also dramatically increased from previous years, and as a result, there were more people at the extremes of the distribution. This may have led to the conflict that was on the piazza website, which I won't go into details here. The environment caused by this conflict really left an uncomfortable feeling in the students, so hopefully that doesn't happen in the future.Office hours also varied amongst the TFs. Some of the TFs were completely unwillingly to help and refused to look at student's code. Other TFs were more willingly to provide useful hints. Overall, there were some positives and negatives in the course. I think there course can and will be improved next year.
Take this class because honestly it is very useful. It is this class that will make or break you into a true CS student. However, it is extremely difficult.
CS 124 is definitely a good class for forcing you to go over algorithm fundamentals, and the breadth and depth of the class were both quite good overall. However, the class seemed a bit disorganized overall, with students left to sink or swim on their own effort.
If your concentration requirement allows, consider pass/ fail as an option. I cannot say how many times this semester I appreciate my decision of taking it pass / fail. I still do most of the work and understand the material, but it really takes off a LOT stress off me. at some point, spending twice as much time on the pset (texing it up, writing up very single detail rigorously and neatly etc ) does not necessarily mean you can get twice as much out of it. It is all about maximizing knowledge/ time efficiency.
This class was very difficult. I heard that the class is even harder than previous years due to the new professor. This said, Jelani was very helpful in answering questions. His lectures could be more clear and organized though, and he is a bit misguided on what would help students learn best (hard not not necessarily mean that you will learn a lot). Be prepared to put a lot of time into this course, and to do poorly on the exams no matter how hard you try. Still, I learned some cool algorithms, so this class is worth taking if you have the time and are truly interested in the topic.
I have mixed feelings about the class. On the one hand, Professor Nelson was very intelligent, the material was really very interesting and the psets and exams were challenging. On the other, the course policies were inflexible and harsh, and sometimes made the course feel more like a burden rather than something I was enjoying. Make sure you are comfortable with Nelson's expectations if he teaches it again. (To be fair, this is his first time teaching it, and while he seemed inflexible, it was not because he ignored student input -  he did seem to care a lot about the class.)
Do everything you can to avoid taking this course with Jelani Nelson. He led a course staff that actually antagonized students, and seemed more concerned with doing things his own way than helping students. He almost seemed to pride himself on unhelpful responses to students, including things like he would rather "die than discuss the format of the final." Otherwise, the course was difficult (as expected). Jelani's exams were incredibly challenging, with means of 50 and 33 percent for the two midterms. I do not believe these midterms were effective in determining how much students learned in the course. The material was interesting, and the course notes are very helpful.
This is the hardest class I have ever taken at Harvard. Not only it messes with your health, but also to your overall attitude. The psets are so hard, you won't ever, ever sleep on Wednesdays (they are due Thursday morning), and you will stress for the rest of the week. This class will make you become a bad person - because you have to solve problems this hard, you won't be able to show any empathy to the people around you, who complain about writing a paper or reading a book. This class will make you lose any drop of confidence you have in yourself. More importantly, it won't really prepare you for the Tech Job Interview, even though it's supposed to. If you want to study Algorithms, take AM107, or just Cross Register at MIT for their course 6.006. I always studied from their course materials, they were so much better than ours!
I have mixed feelings about this course. On the one hand, the material is fantastic, but on the other hand the course organization could use a lot of work. Some examples: solutions to pset problems can be viewed only at office hours, there are no late days, we had a problem set due two days after an incredibly different midterm 1, we had no problem set the week of the second midterm but instead we had two programming assignments the next week, occasionally material necessary for a pset due thurday was introduced on tuesday, no past midterms/exams are posted, etc.
Wait it out if you're an incoming freshman (unless you're gunning for a freshman internship at Google or something). The course needs serious improvement, and the staff needs to be more understanding and reasonable. Here is a summary of my comments:Too much covered in too little time. If you're covering this much, then you can't test it at the insane graduate level that you test at! Plain and simple. The course expectations are entirely unreasonable. The final was a bit better but then the median is just going to be higher. In CS121, exams were designed in such a way that people can actually do well, and you don't need a curve.... Lectures were terrible.. There's a reason few people (except those who already know all the material) show up. Jelani can't really teach well, and has this sort of attitude that students should just know things like it's just so easy. The TFs seem haughty and arrogant as well.. Also, not being able to drop a pset was very rough and demanding of this course. The advanced Fold-Fulkerson programming problem was a disaster; many people didn't get it, and didn't have the opportunity to drop the pset they were struggling with... If you want to do well in this class, you need to already have taken or self-studied Data Structures and Algorithms. If you took the Data Structures class in high school, you should be in good shape. Otherwise, make sure you read through CLRS and do all the problems in the book before you step foot into this insane class
You must have friends in this class to help with the psets.
My understanding is that Jelani will not be teaching this course next year, so this isn't very applicable. But if he does teach it again, be prepared for a very unsympathetic course that will slam you to the ground with tough psets and insane exams, but make it difficult to pick yourself back up because there are no solutions available online (some of us have pretty crazy schedules and it would be nice to be able to access solutions at our convenience). On Piazza, one student commented on the "disconnect between the staff and the students," and I think many of us would agree that it sometimes felt like the professor/course staff lacked empathy for the students.Still, it was a cool course that covered interesting material that is fundamental to CS, and I think Jelani/the TFs put effort into selecting challenging problems.
This class covers a lot of very interesting material at a reasonable pace and depth. Workload is interesting and pretty light, and the programming problems were a nice additional component of homework. Tests had very interesting problems too, but there often wasn't enough time to give them proper thought.
The material is incredibly interesting and useful. Professor Nelson is absolutely brilliant, but may not have a clear understanding of his students' capabilities. Some problem set questions relied heavily on math or programming "tricks" and the exams were very long and difficult. On the other hand, Professor Nelson and the rest of the teaching staff generally made themselves available to students and were very good about answering questions on Piazza. I lost a lot of sleep and self-confidence in taking this class, but I did learn a lot, and it was definitely worth taking.
S**t  class; do not take. Or if you have to take, expect a lot of nerves and sleep hours to be burned.
Be prepared for this to be your hardest course of the semester. It's quite rewarding if you put in the requisite time on the problem sets and studying for exams; you will certainly come out of it feeling much more knowledgeable about algorithmic and data structural analysis. Teaching staff are quite helpful, but there is no substitute for a good study group of peers, with whom you can talk through ideas. Overall a great and practical course! I would recommend with enthusiasm.
This class is extremely interesting but also very difficult. Be prepared to work for a long time on the psets and programming assignments (especially if you want to do them properly and work alone for most of the time to truly understand the material). Jelani might be harder than previous teachers, but he is a great teacher for the course.
The number of times I've watched the sun rise because of this class is ridiculous.  Programming problems start off as doable and then becomes extremely time consuming due to the way they graded with test cases.  More often than not, by programming incorrectly and intentionally not handling corner cases or caveats in the problem, I received more points.  That's ridiculous because this class is supposed to teach and grade based on proper programming techniques.  Except it's tweaking just so you could handle the test cases they want.  The time problem sets were due is also poorly planned.  Why would you make the problem set due 11AM in the morning and then expect everyone to show up to your class right after your deadline?  Sorry, I'm sleeping and trying to recover.Doing work in the class is fruitless as well.  I don't feel like I'm learning anything if I'm turning in assignments and not receiving feedback.  All other classes grade and provide more feedback than the 1 liners they send through email.  The refusal to share solutions on problem sets or exams makes it incredibly hard to learn from mistakes or even knowing what mistakes you made in the first place.The biggest problem is obviously the grading scale.  Although I give Jelani Nelson the benefit of the doubt for being a new professor at Harvard, he clearly does not understand what the Harvard curve is.  Also for the difficulty of exams, if the average for an exam is under 30%, there is something wrong.  You are clearly giving exams that are beyond us in addition to refusing to provide us the necessary resources to study properly for them.I would tell all CS concentrators to avoid this class, especially if you don't have a strong math background.  Consider taking one of the AM courses that substitute for the theory requirement instead.
You more or less have to take this course. It is, however, not very enjoyable.
This class is great!!  A very chill class.  There's a bit too much coding and not enough theory, but other than that it is really good.  Jelani is awesome.
This class is not currently at a point where you should go in to exams expecting to get any points at all if you didn't study. Beware.
It's HARD
This class is difficult, but I believe it is a must-take for anyone considering CS as a concentration. It is not comparable to CS121. You will know after this class whether theoretical CS is your thing or not.
My favorite class taken at Harvard so far! The material is really interesting and Jelani presents it very well in lecture too. The teaching staff is generally very supportive and helpful during Office Hours too, which some of you may be living in! Some downsides are the all-nighters that you might have to pull trying to get the programming problem to work, or typing up tedious proofs to solutions. The exams are quite challenging. This year, their averages were 50% and 33% respectively... but I assume they will be more doable in future years. Jelani and the teaching staff really listened to students' opinions and published hardcopies of midterm and pset solutions, which were very helpful. Overall, highly recommended class, especially if you really like math and theoretical CS.
https://docs.google.com/document/d/1-IsunkDahbJqzoaaXnEQDUw71307TX5wj0H_5dY9Uz8/edit?usp=sharing
This course is unforgiving. The problem sets are ridiculously long (I dropped out of all extra-curricular activities partway through the semester in order to make more time for psets), the exams are longer and must be completed in an hour and a half, and the professor is deeply unsympathetic. While he is correct that once you have whatever insight is needed to solve these kind of algorithmic problems they are not THAT bad, arriving at said insight is non-trivial. Expect to spend hours not progressing on homework problems while you try literally everything. The programming problems also have a delightful quality whereby you might spend eight hours writing your solution only to discover that it was too slow. Your options at this point are either to accept what is probably a 30-50% on that problem or go back to the drawing board and start over. There's no real information as to what kind of asymptotic run-time you should be shooting for, and as a result I encountered the above situation on several of the assignments.Furthermore, the course was disorganized, with a good deal of misinformation and miscommunication between the professor and course staff. If you have access to the piazza forums from 2014, take a look and see how many posts amount to "Hi, a TF told me X? Is that really true?" with a reply from the professor reading "No," without any elaboration. Even one such post would be problematic. You will find many.The difficulty of this course also means that your grade will be EXTREMELY dependent on the performance of your peers. The standard deviation on the pset scores is very high and the scores on the exams are very low, so it can be difficult to judge how well or poorly you are doing in the class. At time of writing (before the final exam), if I got any final grade in this class from a B to an F I couldn't honestly say I was surprised, because I just have no frame of reference.In conclusion, this class will ruin your life. The sheer volume of work needed to get you a B in this class would get you an A+ and a shining diamond crown inlaid with gold by the Pope himself in most other courses. Unfortunately, if you are in CS you have to take this. So... Sorry, I guess. Sucks to be you.
Unless they change the way the course is run in the future, expect to have to do more work than usual to access the resources you need to actually learn the material. No practice tests are provided, so you have to find your own. Solutions to psets/midterms are not distributed, so you have to physically go to office hours to look at them.
Of all the courses in the CS department, CS124 is one of the most useful for those interested in pursuing CS outside of college.
It's very difficult, and will destroy your life
Take it. The material is interesting and Professor Nelson is a new professor which is why things were bumpy this year. Obviously he is doing his best to improve and it was always clear he cared very much about the students. That being said, this was a rocky year so don't be surprised when the class is hard.
This was the most difficult CS course I have taken so far, but it is far from impossible. You will likely suffer, but everyone suffers together. Also Jelani really cares about student's concerns (some people were (anonomously) very vocal about lack of pset solutions and he did his best to accommodate. I'm sure with this year under his belt, next year's offering will go a lot smoother.
It's a tough class, but you come out appreciating the thought that goes behind trying to implement algorithms quickly. At least in my case, I'm way more interested in algorithms now than before I took this class, and I guess in that respect, this class was a huge success.
Be ready to spend 20 hours a week at least on this class. Go to office hours and work on the written problems early. Start the coding early. Unless you do, be prepared for all nighters every week. Don't expect homework solutions to be distributed or practice problems to get ready for the exam. Jelani's a nice guy, but this class will rock you.
You'll learn a lot but be prepared to not sleep the much and fail every exams. Also, be prepared to never see solutions to any of the psets or midterms, have absolutely no information the content of exams, and never see a single practice problem. The class caters to individuals who are very intelligent and can understand the material after seeing once. Not necessarily a bad thing, but it makes it difficult for those of us who struggle more and need extra help. There are a ton of OH for the class but they're often overcrowded and it can be difficult to see a TF. Jelani's a great lecturer but I hope in the future he'll make the coursework more manageable (assuming he's teaching 124 again). But that's just my two cents!
CS124 is what you make out of it. The community is great and many TFs are always willing to help out if you're forthcoming. It is a class where you probably have to do lots of additional reading to fully understand the material, and strong mathematical background is also a prerequisite. Expect many late-night PSET sessions!
Very challenging course, though not without its rewards. Grading is tough, particularly on the assessments, and the course staff is very reserved about the materials it releases. No practice tests, homework solutions, past exams, or any materials apart from the course lectures, which makes solving problems to the high standard that is expected very difficult
The content of this class is essential for any CS concentrator and useful for anyone interested in computation. I thought some of the suffering inflicted on us was unnecessary though (e.g. not making midterm/pset solutions available online, setting the midterm to be so hard that the mean was 20/60, etc). However I'd still recommend this class, if only for the lack of alternatives.
This was by far the hardest class I have ever taken at Harvard. While the material was hard to learn, what made it even more frustrating was that the TFs were generally not too helpful during their OH, and pset/midterm solutions were not provided to students. No practice exams were provided to help students prepare for the midterms/final, and I've never felt so "blind" in a class before. Psets were much harder than years before, and the right amount of support/help was not provided to students. If you have to take this class, just take it, but make sure you can find a good study group and good practice material, because the class will certainly not help you.
Jelani has made this a grind. I took it in concurrence with CS20, that's a good combination because 20 is a joke so you'll have more time to work on 124, which would also make 20 look like even more of a joke.
Do not take this class unless it's a concentration requirement or you just love getting totally screwed on material that should be very interesting.
This class is very hard but you should definitely take it if you want to concentrate in CS. The material is extremely essential for anyone who wants to do CS, and it is also very interesting. That said take easy classes with it as it will be taking up a very large amount of your time every week. If you don't want to concentrate in CS its still very interesting but probably not worth the amount of work.
Very difficult and time consuming, but this is the foundation of computer science and will likely prove useful whatever you decide to do with your life. I'd recommend taking it for this reason despite the unforgiving assignments Jelani hands out.
This class is difficult, but the material is useful and inherently interesting. Students complained a lot, especially about the policies regarding pset and exam solutions. The course staff tried to address these concerns, though it seems that their hands were tied by the policies of the previous instructor. Exams seemed to favor being brilliant and being a good vulture for points over studying material covered in lecture. Lectures were effective and office hours were good ways to tackle the most difficult pset problems.
Really hard exams, hard problem sets. Having no solutions to pretty much everything (except in office hours near the end of the course) made reviewing old material pretty difficult. Jelani lectures pretty well and it seemed like the TFs were trying to help, but there were definitely a lot of problems with the course.
This course is NP-Hard. It is the hardest I've ever worked for some of the lowest scores I have ever seen, but there is no doubt in my mind that if you are reading this right now, you should take this class. This course really teaches you how to think about problems and break them down in a way that can be solved efficiently; in the process, you will also likely break down. If you want to do a thorough job on the problem sets, expect to spend fifteen hours or more every week on the theory and coding challenges, and know that pretty much everyone on campus still awake at 5:45am on a Thursday morning is probably working on the 124 assignment for that week. Go to office hours for psets, it will really clarify some of the trickier aspects of the harder questions. As for the exams, they will give you a new definition of the word difficult (unless you are used to competitive math or CS; in that case, feel free to apply your definition to these exams). Time constraints and the sheer challenge of the questions will make you walk out of the room wondering what just happened. In summary, this course is very difficult, but you have to take it because the content is just too good to miss out on and there is a really smart staff and professor behind the difficult questions that you are learning from.
This is a very hard class. Know this going in, and be prepared to put in the work. The material itself is not too bad, but the psets can be tricky (find good pset buddies!) and the exams are extremely difficult---mean was < 50% for all 3 exams. Unfortunately the course is not that supportive of students, either. Pset and midterm solutions are not posted (only available as hard copies at office hours), there were no practice problems for any of the exams, and the course staff had a slightly go figure everything out on your own attitude. If you come into this class knowing how to problem solve or have prior experience with algorithms, you will be OK, but for everyone else its going to be a struggle. My advice for you: put in the time every single week, and dont expect to be able to cram the material. Buy the book---I recommend Algorithm Design by Kleinberg and Tardos over CLRS. Go to lecture, go to section, read the book, do tech interview questions, think about the pset by yourself first before asking questions, and basically eat/drink/sleep the CS 124 material. You will have to work really hard to do well in the class, and you might not get as high of a grade as you would like, but in the end you will learn a bunch of relevant and interesting things and emerge as a stronger person.
The assignments were challenging and most of the teaching staff were unprepared to adequately answer difficult questions from the students. The section component of the course was generally lacking in helping students through the material. There was a good faith effort from the instructor and the teaching fellows, but the amount of support in this class was very lacking in the face of the difficulty of the assignments and exams.Algorithms are still a very interesting and worthwhile topic of study, and if the material interests you highly, then this class may still be worthwhile as you will learn a lot. Prepare for a lot of work. Hopefully there will be a greater level of support next year.
The hardest CS course I have ever taken; every problem set and exam especially was a kick to my butt and self-esteem. However, it is one of the most important courses to take as a computer scientist - the coverage of material is broad and interesting, and it's stressed so much to think efficiently rather than just monkey-coding whatever brute-force algorithm comes to mind at first glance. The derivations are quite beautiful, if not absurdly complex. Also, Jelani is a boss.
Though the material is certainly important for a computer scientist, I felt that there was a huge disconnect between the students and the professor in this course. This resulted in many painful nights and tensions between the students and the staff.
The material is fantastic, and Jelani is an amazingly knowledgeable professor. I've had too many quantitative classes where the material was difficult and the staff seemed to make so many mistakes themselves that it was hard to get help from them -- for me, this was not one of those classes. 124 is a real opportunity to grow as a programmer and learn valuable, generalizable algorithmic techniques that will be useful everywhere. That said, the class suffered from organizational problems (which is fine, given that it's a new professor). Very few resources existed to help students practice on their own, short of the recommended textbooks. Sections were often very crowded (however, perhaps this is a function of last-minute behavior on the students' part) and the problem sets/exams will often be maddening in their difficulty and non-generalizability; many times, even if you understand the concepts from a section very well, you still won't be able to finish the pset without a brilliant insight specific to the structure of some particular problem. However, the difficulty and frustration inherent in the exams and psets may be inevitable -- algorithms seems to just be a very hard subject. I'm also sure that all the criticisms I've mentioned will be ameliorated with time as the course staff grows into its role. In all, I recommend 124 -- at the very least for the material. It's simply fantastic, and the course staff will only get better at teaching it.
I found this course to be really educational and very interesting. However, Jelani blatantly disrespects the students in the course on a daily basis, and this made my experience with the class very negative at times. Additionally, the problem sets were VERY difficult, so much that I spent all-nighters on about half of them. If you're thinking about taking this course, be prepared to spend a ton of time on it.
You'll see some interesting mateiral and great algorithms. I didn't take CS 20 beforehand and had no proofs background. I caught on to that element just fine-- just learn proof by induction during winter break or something and do maybe 5 practice problems with it and another 2 with proof by contradiction and you're fine. You'll learn how to do proofs over the course of the class and that will be helpful.I'll be brief, because I'm sure my peers have already given you the gist of this course. Lectures were needlessly filled with long proofs, course policies were unreasonable, and it was very very hard to learn in this class. If you do take this, WATCH THE MIT LECTURES ON YOUTUBE AND READ THEIR NOTES AS A SUPPLEMENT. They explain the intuition much better and provide suggestions for example problems to do. I learned how algorithms work in this course, but I didn't know how to create them or use them in novel situations. In this course, prior experience was too big of a factor in how well you'd be able to solve the problems.Also it was disorganized. Each section taught by a random TF each time. I was disappointed.
I came into this course having taken the Math 21 series and Stat 110, without having taken CS 20 or CS 121, and took CS 51 concurrently. I found this course difficult, but so did my peers who had taken those courses, so it is possible to take this course without them. The material was really interesting, and I really enjoyed learning about it. I would have enjoyed this course a lot more if not for the draconian policies it had in place: no late days/hours, no paper submissions, no collaboration on programming assignments. On top of all of this, solutions to past assignments and exams were not posted, so we had no way of learning from our mistakes. Exams were unreasonably difficult. TFs were not given solutions to assignments, so they had to solve the problems on their own in order to be able to help us (which seems remarkably inefficient). I would not recommend this course with this instructor unless you are willing to endure 15+ hours of pain weekly, or you need to take this course for the concentration credit.
Be prepared to spend 20+ hours on psets every week
Do NOT take this course if you can as it moves too fast to actually learn anything - better off learning material online. Class might actually be useful if you make sure you first take / are expert at programming, discrete mathematics, statistics, and probability.
This class is really hard, but you will learn a lot. It can be frustrating at times, especially if you are not comfortable with math. The weekly psets are rather lengthy, and took me >20 hours to complete. The programming assignments are a great addition to the class, but will double the time it takes to complete the pset. The average for the second midterm was a 33%, but the class is curved.
It's really unfortunate that such a fundamental class to Computer Scientists was handled so poorly this year. At every turn (from no dropped psets, to the ridiculously difficult midterms, to the snarky answers to Piazza posts) I feel like the class preferred to be difficult than helpful, as if struggling is a necessary component of learning (it's not).I think the material is extremely important for Computer Scientists to learn (as anyone who has ever had a CS job interview will tell you), so hopefully the inevitable wave of criticism from the Q will help this class out in future offerings.
Rigorous introduction to a wide variety of algorithms, Mitz is clear during lecture and generally well taught, but there are no published solutions to any of the problem sets. Programming assignments are not too time-intensive, but they do help solidify understanding of the algorithms.
CS124 is a phenomenal course.  Mitz is an incredible lecturer, definitely among the best I've had, not just explaining concepts as clearly as possible, but successfully weaving a broader picture of how concepts relate.  He really does an amazing job building up your toolkit for approaching problems.
I have never met a Professor who cares less about his students than Mitzenmacher. His absolute disregard for students blows my mind. He is unresponsive to emails, and at one point assigned 2 psets, a programming assignment and a midterm within 10 days. He designs exams that he knows can't be completed in time. I, frankly, do not understand why classes like these exist which just play with the mental health of their students, and why the university does not do something about this. I have never been so anxious in a semester. Professor, if you are reading this, please care about the mental health of your students and how it is affected by this class. Also, the professor is very sarcastic and I think this rubbed off onto the teaching staff too. Piazza was just full of snarky replies by the TFs which I think is uncalled for and made for a non-welcoming atmosphere. (The TFs were nice enough in person though).
Even though this class is really really hard (especially if you don't have the best math background), you end up learning a lot. If you're alright with a challenge and studying a lot, then you will walk away knowing and being exposed to the amazingness of algorithms. Try not to get discouraged if you don't do so well, and remember that classes are worth taking if you learn from them. And don't be afraid to ask Mitz or the teaching fellows questions - they are extremely knowledgeable!
CS124 is the hardest class I've taken at Harvard! Although you learn a lot, the exams are impossible and the assignments take a ridiculous amount of time. Prepare for an intense semester and know that the class will take the soul out of you.
It's hard but worth it.
A class every CS student must (and really should in my opinion) suffer through. Mitz is really the best, make sure you take it with him! 124 is a beautiful experience of engineered suffering where you come away knowing at least twice as much about CS as you knew coming in. The exams are a thing of beautiful; it's truly a remarkable feat to design midterms and finals where the average is consistently ~50%; gotta say it is the most informative way to assess students' ability and understanding of the material.
I was really intimidated to take this class, despite having taken all the prerequisites (cs 50, 51, 121, stat 110, math 21a and b - which might not be required). People constantly talk about how impossible it is, so I was scared I'd be overwhelmed. In the end, I was really prepared to take the class and am very glad I took it. The first half of the class was much more difficult than the rest of the class, and the 2nd assignment (first full assignment), was by far the hardest. I know it will be a different professor next year, but if he keeps the order of topics the same, the beginning of the course will likely still be the hardest, so don't be afraid to use your late days early. In addition, it is best if you can start psets early, though I never really could and ended up doing them wednesday and thursday night. Go to office hours. There are often too many people for the tfs, so don't count on getting your question answered (although they do a good job getting to a lot of people). Office hours, however, are a great place to discuss the problems with other people. Mostly, a lot of people have a lot of different ways to approach a problem, and often times one person might know how to start, and another to finish, but neither could have done the problem on their own. Even if you don't know a lot of people, if you regularly go to the same set of office hours you will start to recognize people. Note: talking to other people about the problem is allowed until you start writing it up, at which point you are on your own. As a result, it is helpful to try to think about little details when talking so you don't get stuck on your own later on. The class is super time intensive, taking me about 12 -15 hours each week (8-12 wednesday, 8-2 am thursday, plus extra time thursday or friday working on it). That being said, it is doable with that time investment. Writing up always takes longer than expected, and I would recommend writing up a problem right after figuring it out (rather than figuring everything out, then writing it all up at the end, as I often did). Lastly, section can be really helpful as you go through practice problems that are similar to (though often easier than) the pset. The programming demands are not that high. If you are doing things correctly, you should have substantial psuedo code to work from when coding. The coding part is less about solving the problem and more about the tricky aspects of translating that pseudo code into code (often related to memory management).
It's hard but worthwhile.  If you do take it make sure to give it the time it requires or you'll just be spending a ton of time but not learning the material that makes the class fundamental.
If you plan to take this course, make it the main class of the semester. That way you won't fail and also get more out of it.
Great class if you put the work in
If you're in CS, you probably need to take this class. Even if not, if you're interested in the computation applications of algorithms I'd recommend it. It's pretty difficult, though perhaps not as much as is popularly said. You will also learn a ton of skills that will be important in internships and jobs to come. Mitzenmacher himself has a very snarky sense of humor that I quite appreciate. Think Shieber, but even more sarcastic. This being said, he's actually a great guy who is especially good among professors at understanding situations when life gets in the way of work.
It's very hard. Especially the exams.
Start early, never use Python, if you have a brittle GPA-based ego you'll need to spend a lot of time on this class regardless of your prior background
It is an interesting class and the material is very thorough but you have to be prepared to work a lot and have more than one problem set per week (We had 3 problem sets and a midterm within 10 days). Classes are very thorough and the lecture notes are well summarized. This year the class felt a bit under staffed as it seemed that the TFs had a lot to grade in a small amount of time. The feedback on the problem sets was not specific enough and there was a lot of discrepancy in the grading system(Some tfs required a lot of specific information on your answers others did not cared). All in all you will learn a lot in this class.
This class is difficult.  The material itself is easy enough to understand when you read the text and go to lectures (and read the notes provided).  My difficulty came from the problem sets.  Even with a good understanding of the course material (or so I thought) I found them quite difficult.  So start them early, and really try to make a good effort on them before going to office hours but do absolutely get help when you need it, because the course staff were pretty helpful for me, anyway.
The material is super interesting and I think I learned a significant amount. The topics covered are pretty disparate and so the course is more of an overview of a broad array of topics. The material is very difficult! Professor Mitz gives very informative lectures, but doesn't seem to invest a lot in his students (though it is a very big class). The grading is extremely frustrating. Using some form of the recommended textbook(s) might be worth it.
This course is challenging, but not impossible if you put in enough time to thoroughly either attend lecture/watch lecture videos or read through lecture notes. You will do well if you attend section and start assignments early.
haha it's hard, but you know that.  go to section, study hard, it could help. but it probably won't.  just be good at math.
This class will discourage you and demoralize you every single week. Find a solid group of friends to work with and it will be somewhat bearable. Do not take this class with any other hard classes. Honestly, this class sucks.
This class his hard. Work is rewarding. Not for the feint of heart.
This is a very useful class. It is hard. It is time-consuming. But, it is interesting. Definitely go to office hours and budget lots of time for it. Section is also very useful, and all the TFs are super helpful!
CS124 is a very difficult course that you shouldn't take unless you have reason to (concentration requirement). Course staff is very unresponsive (taking multiple weeks to return psets) and does not provide sufficient feedback. Problem sets are ridiculously difficult (taking 15 to 20 hours to complete per pset), and you'll spend quite a lot of time working on this class. That being said, we still did learn a lot of useful information in CS 124, though the material was a bitter pill to swallow.
I didn't think it was too hard, and it's fun. Nothing takes useless time, you just have to think hard about some interesting problems
Tough class. It will make you smarter. Honestly, you're not going to remember the material afterwards unless you use it alot, but the problem solving skills will stay with you for a long time.
Tough class, takes a lot of work, but really interesting material and well-organized.
I loved CS 124! This class gets a rep for being really hard and time-consuming, but it's not really that bad if you keep up with the material. You'll learn so much (and put in a good amount of time to do so), but you will still have a life outside of 124. Also Prof. Mitzenmacher is a great lecturer!
Mitz does a great job, and the course is challenging and interesting.
This is definitely one of those courses that every computer science concentrator should take because knowing how to code is quite useless without knowing how to write good, efficient programs. Sometimes the problems can be hard, but going to and paying attention in lecture certainly pays off, even though Mitz can be a savage sometimes.
This course is hard. It demands a lot of work out of you and if you don't put in the work, you'll likely have a very difficult time. However, it is bar none the best learning experience I have gotten out of any CS course at Harvard. It's the heart of computer science.
One of Harvard's best courses. Very hard, but worth the work.
Definitely take it because it'll make you smarter, help you with interviews, and you'll gain a lot of character.Exams will be brutal. They're designed for you to have to spend only a little time on each problem, so you have to work efficiently without dumb mistakes and think fast/strategically. They aim to test your inherent mathematical-thinking ability over and above what you learn in the course since the long, detailed psets require the opposite skills. Not really sure if there is any advice I can give to help students do better on the exams than I did. Just be smart? Maybe take a few problem-solving type classes before 124 to help you hone those skills?
Plan that this class will be the most difficult and annoying class of your semester. Problem sets are endless and most of what the problem sets cover isn't covered well in lectures or sections. Exams are extremely difficult (averages are around 45%) and you feel horrible every time you leave one.
you might not like your midterm but you will like michael mitzemacher
This class is a complete nightmare, and the teaching staff are awful and want to see you get 40s on the midterm. Get ready to buckle down and work the hardest you've ever worked on a class at Harvard.
Take it. Difficult class but you learn a lot of valuable skills and useful knowledge. Go to office hours and sections; they are helpful. more importantly, do examples, simple examples really help you understand abstract ideas.
This is the absolute hardest class I have taken at Harvard. It's also the best. Mitz is an amazing teacher, the TFs are great, the lecture notes are great, the exams are BRUTAL, the problem sets are hard but fair, and the programming assignments are involved and very rewarding. I happen to like computational theory, so that's my bias, but so far this it the most relevant course to becoming a knowledgable software engineer so far at Harvard.Please take it. Don't take super hard courses with it, and be prepared for at least one all-nighter. Learn as much as you can.
Algorithms are important but Mitzenmacher does not present them well and the TFs basically have to teach the course. Exams average around 50%
124 was the bane of my existence, but it was also one of the most interesting CS classes I have taken. It will kill you the nights before psets and drain your will to live -- but otherwise the material is mind-blowing fascinating, you can't get enough of it. I guess you have to be a little bit of a masochist to enjoy it in a way? Recommend you take it even if you don't need it for the CS concentration, because it really legitimizes you as a concentrator and gives a strong foundation for your knowledge and for interviews.
Listen, this course is hard. I was very close to not taking this course because I didn't want to get destroyed. I was very much ready to take an easier route to get my CS degree. However, this was so formative for me for my CS career and I'm very happy I took it. I would just structure your schedule so that this is the only serious class you take. For me it required 20 hours a week to really get the problem sets down and learn the material but it was all worth it and I feel like a much better software developer because of it. Please don't avoid this class because you are scared of getting a bad grade. You won't, the class gets curved, and plus you will need the material in this course if you plan on becoming a good software developer.
CS124 is very hard, but 150% worth it. It will require a good number of hours for the PSets, but go to office hours and work with people. It's much easier to reason things out together than alone. Don't expect Mitz to give a single fuck about you, but he is a great teacher and the material is so important and really really interesting. Make a study guide as you go along--they provide you outlines at the end, but it's not as thorough as you'll want it to be. Study for the midterm and exam early, you'll need the time as there is an ungodly amount of material covered in this course. Oh, and don't be dismayed, the average for midterm and exam are usually around 50%. That's intentional, it gets curved. AND DO NOT COMPLAIN ABOUT DEADLINES ON PIAZZA OR THE WRATH OF MITZ WILL DESCEND UPON YOU.
I'm someone who almost didn't concentrate in CS because I didn't want to take CS121/CS124. The two classes ended up because two of my favorite CS courses. I do not consider myself a strong coder and am definitely someone who had to put a lot of time into CS classes (who doesn't?). But the taught me to how to really appreciate the problem-solving, making connections from one class example to a pset problem, and the power of computation and algorithms. I was REALLY scared to take this class at the beginning of the semester (I strongly considered just going down the AM106/107 route). I went to the first two lectures, couldn't follow along, and almost dropped out. But having stuck through it, I really do believe the class is worthwhile and doable now. Don't mistaken that comment for it being easy though. I lived in office hours and spent most of my nights working a CS124 pset. Plan accordingly -- you get out of this class what you put in. I took this with CS134 and two gen-eds, which I found to be reasonable. Be prepared to spend significant amounts of time in the class (I went to office hours pretty much everyday of the week) and find a group of friends to study work and do psets with. Go to section (if you go to one section and don't find it helpful, keep shopping around until you find a TF's section that you like). Do lots of practice problems to study for the exam (the section notes and Google has plenty). Make friends with the TFs, they are great people and even role models of CS. Mitz is also a great professor. He seems to get a lot of negative talk which seems to stem from people misreading his sarcasm and as an outlet for the difficulty of the class. But get to know him and he's a pretty cool guy. You will learn an unbelievable amount in a semester.
This is a very challenging but very rewarding class.  The material you cover is very relevant for any CS concentrator, and the skills you acquire will be extremely useful for interviews and future jobs.  It's tough though - the weekly problem sets are doable but take several hours, and the exams are brutal.  Highly recommend this class, but keep in mind its difficulty.  A strong math background as well as substantial coding experience will help you a lot.
Such a hard class, but mostly worthwhile. Mitz is a savage but really knows what he's talking about. Course materials are really good; honestly, you can probably get by just reading lecture/section notes and not going to lecture. TFs are mostly really good. Piazza is helpful. PSETs are interesting, for the most part. Emphasis in the class is definitely on algorithms, not data structures.Overall, would recommend to CS concentrators or people who are honestly really want to learn the subject matter! Be prepared to spend upwards of 15 hours many weeks, especially the second PSET and first programming assignment (the course does get easier towards the end).
Honest advice from a non-genius: just take it. You almost certainly will not enjoy this class, but you're reading these Qscores, so you've basically figured out you have to take it. Am I bitter? Yes. Would I feel the same way prior to having taken the final? Absolutely. The content of this course is actually really engaging, but there really is just no way to be prepared for the questions you will see, either on the psets or the exams, unless you spend your entire life at office hours. Do NOT do an extracurricular or sport that meets at night or requires more than 15 hours per week. You'll be stressed. Do NOT wait until the last minute to start these problem sets, especially if you can't write or LaTeX quickly. Programming assignments will be a breeze, but the exams will probably shred you. I think it's sad that my evaluation and enjoyment of this course have boiled down to grades rather than what I learned, but unfortunately those things are essentially equivalent (read subtext: low quantities). I'd say that overall, this class is manageable, but I just didn't have a fun time and I've yet to see the benefit or the hype typically associated with this class. Just get it over with as early in your college career as possible (CS concentrator).
This is a hard course, and I probably wouldn't recommend to others unless you have to take it.
Do not underestimate the difficulty of this class, it will hurt you very badly if you're not prepared. You have to dedicate time to this class, or drop out and save yourself. There were many people who realized this late, so they dropped with a "W" on their transcript. If you are very, very interested in this course and would like to become an actual Computer scientist rather than an app developer, take this class. Else, don't and do yourself a favor.
This class is going to be a lot of work. Its great though. Cool overview of a lot of topics  it starts with algorithms and different algorithmic strategies before moving into other topics like cryptography, approximation algorithms, P/NP. Mitz is a great lecturer who explains the material clearly, but will definitely be accused of being acerbic by students who arent used to such a matter-of-fact teaching style. It ends up being very effective. The implementation/programming assignments are typically more intriguing than the written assignments, but I doubt that changes going forward.
Don't run out of late days too early
CS124 is really a great class, and you'll learn a ton. Mitz's lectures are really great and the assignments are well written and really make you think. The course lives up to it's reputation in terms of difficulty, but it's definitely not unreasonable, and the amount of time also isn't that bad. Mitz and the TFs can be a little snarky when answering questions on piazza, which can sometimes get annoying, but they're all nice in person. I came in with just CS50/51 and some probability and proof writing experience from HS, but nothing at Harvard, and I found that was adequate to succeed in the class. You definitely don't need CS121 or Stat110.
Necessary if you want to get a good grasp on theoretical cs.
Mitzenmacher is a really fun lecturer. You'll become a better algorithmic thinker in this class. Definitely worth the while.
Though this class was hard, I thought it was one of my favorite CS classes I've taken so far. If you go to section, watch lectures, and ask TFs for help on concepts you are confused about, you can keep up on the psets. Start assignments early. I found the first half of the class to be more difficult than the second. This class made me a lot more confident in my CS abilities, because you learn a lot!
you'll either love it or hate it. for someone like me (pure-math-type) the course is not great but it gets the job done. that said, it's a hard job to do, and mitzenmacher's brilliance kinda compensates for his complete lack of personality.
This class does nothing in half-measures. I learned more in this single class than every other class this semester combined. I also spent more time on this class than every other class combined... Funny how that works. It's a great class! Deal with your problem set frustrations by posting dumb questions on Piazza -- Mitz will be sarky, and the net utility of all CS124 students will increase (while TF utility may decrease).
I have never been so simultaneously humbled and yet inspired by a class before. It's worth it!
This is an excellent class. The clarity of the teaching is consistently exceptional, and TF's are willing and effective in section and office hours. I am very happy I took this class, but would recommend mastery of the topics in CS 51 (for the practice with recursion) and Stat 110 (for probability and general familiarity with mathematical arguments) before taking this class.
I took this class without having taken CS 50, and I found it very manageable. The Programming Assignments were a bit annoying, especially when they overlapped with problem sets.
An interesting and challenging class. Not extremely time consuming but requires effort
CS124 is a difficult, though extremely worthwhile class for a CS concentrator. The problem sets are difficult and require you to extend the lecture material to new applications. Professor Mitzenmacher is a great lecturer, and the TFs are very accessible for help on the psets. The programming assignments are often vague and require substantial clarification, but as long as you are comfortable with a reasonably fast language (not Python), they're very approachable with moderate programming experience.
This is a great class to help with coding interviews, but only take it if you'll have the time to dedicate to learning the material thoroughly. I took it as a senior and I was away for interviews throughout the semester and ended up not having the time I wanted to dedicate to the course. Looking back, I wish I had taken it much earlier!
This a great class. I wish I took it earlier than senior spring but am nonetheless pleased with everything I've learned.
It's a lot of work that won't teach you anything and a lot of really cool ideas.
I'd definitely recommend 124 to anyone studying math or CS! I think taking this class as a senior was wise though, because most of the material in the course is covered at least a little bit in other math/CS classes and it definitely helps to have background understanding of some of the harder concepts under your belt. If youre worried about difficulty take a bunch of other CS classes first, as well as Stat 110 and math courses in number theory, combinatorics, and/or logic.
This class is excellent. The material  carefully laid out by Mitzenmacher in lecture and presented through clear and detailed course materials  is challenging but all the more rewarding because of the challenge. The support from the teaching staff is solid. The programming assignments keep the theory in touch with reality. The course had much more of a "we're all in this together" vibe than I expected  not soul-sucking at all.
be prepared for some tough weeder psets at the beginning, and long long nights. but absolutely worth it. Also, the class is manageable, regardless of any rumors you've heard. I also took it simultaneously with cs51 and stat 171, and had a fine semester (it wasn't hell). Subject matter is really cool!!
I actually loved CS124 despite its reputation. Granted, pset2 did take me about 40 hours that week. Yeah, look forward to that. Mitz is a great professor. He is snarky and likes to mock you, but he's actually kinda...kind-hearted. You can tell how much he cares about this course and his students by the fact that he maintains a blog and responds to his q evaluations every year (mitz it would make my year if this makes your blog). The staff is just amazing as well. All very smart and helpful.
Hard class, but well taught. Mitz is snarky but ultimately a very good teacher, and seems to care a lit.
Despite the horror stories, you should definitely take this class. It will change the way you approach problems and see the world. Yes, the tests averages are around 50% and you may need to work late on programming assignments and problem sets. But it is definitely worth it. Professor Mitzenmacher is actually a nice guy and his Piazza roasts are hilarious. The first two problem sets are actually the hardest of the whole semester, so if you can just make it past those, you'll be fine for the rest of the semester. However, Professor Mitzenmacher is on sabbatical next year, so Jelani will be teaching it instead. I can't say anything about that, but I've heard it is harder than when Mitzenmacher teaches it, so keep that in mind. Previous Q comments advertised romance as a result of this class; I did NOT get a girlfriend from this class, but I remain hopeful.
If you're a CS concentrator, just take this course. Don't be a coward and take one of the AM courses, it's not even that bad. The first 1/3 of the course is tougher than the rest for some reason, once the pace settles it becomes very reasonable. This course will help in every area of your CS life. In my opinion, they should make this mandatory along with CS 121 for the concentration.
CS124 is a class I think all CS concentrators should/must take. It is a challenging class, really challenging. It tortures you in every single way if you dont have a solid math background like me. However, because of this, you would make many friends who are always there to give help and to support. Mitz is a really nice instructor. He is very knowledgeable. I had many regrets in this class. One of them was not going to his office hours. He seems a little bit intimidating, especially since I didnt do well in this class(I kinda imagine he would make fun of me). But I actually really want to chat with him. So if you ever get a chance, go talk to him. If he ever makes fun of you, make fun of him back. Furthermore, TFs in this class are AMAZING! AMAZING! AMAZING. Especially: Evan, Jesse, Kevin etc. Those people are people whom I want to be with when I face difficulty in my life. <3The materials you are gonna learn will benefit you for years to come. It teaches you the way to approach problems and gives you tools to solve them. The problem sets are well designed. Those problems are hard, but once you figure them out, you will be like oh, jesus, I am dumb, they are so easy. So my point is that dont lose those chances to think. This class makes you a good thinker. Anyway, good luck guys! Ace this class, actually, I want to say, dont care about the grade. Even if you failed, keep thinking and reading some algorithm books, cuz they are interesting.  Just keep trying. One day, we will be as good as those top students, who I had no idea how they managed to get such high scores on the exams.
Beware the exams (but also accept that there's not much to be done but to take the blow). Take it though -- covers fundamentals of CS that you should really have under you belts. Aside for the exams it wasn't bad at all, and enjoyed it overall.
You will be treated like dirt. And you will like it.
This class is incredibly difficult, but rewarding. Be prepared to pour a lot of time in. The fact that the midterm and final averages are under 50% is quite discouraging, and feels unhelpful to the learning process.
CS 124 is honestly probably the best-run class at Harvard. The team of course staff is on top of their crap. Assignments are well-made, exams are difficult but fair, and the content is really interesting. You'll learn a lot and you can choose how you do it.
Warning: this class is somewhat difficult. The content is challenging, the problem sets are challenging, and the midterm was extremely challenging (the average for it was a 47), but if you can get past this, you'll find that the class is extremely rewarding. The content is actually really interesting, and once you finally understand it, you'll discover that you've actually learned a ton of useful problem solving skills, i.e. dynamic programming, greedy algorithms, etc... Stuff that you can actually directly apply to the process of getting a job in CS. I'd highly recommend that any CS concentrator or individual who's interested in math and vaguely interested in CS take this class.
This is a very good class that you should take if you're at all interested in computer science or programming.
This course was not a course for software developers. I wish I had taken it when Jelani taught it -- this just felt like a math concentrator-dominated course for people interested in algorithms and data structures in the abstract, rather than efficient implementation of said algorithms and data structures/actual integration of them into code. Intelligent software implementation and abstraction was definitely a secondary focus in this course. This really should be listed as a match course when Mitzenmacher teaches it, and as a CS one when Jelani does.
The material is very important to know...
This class is awful. Not fun or overly interesting. Take it because you have to for CS concentration but no that it is the worst class I have taken in my undergrad.
You're in for an adventure.If you're thinking about taking this class, you've probably figured out the "shortest path" algorithm for computer science classes: watch lectures at 2x speed, throw together problem set solutions the night before the deadline, and use Piazza as a crutch whenever any question comes up.That's the wrong approach to this class. If you use it, you'll miss out on the benefits of a really interesting and valuable course that you need to put effort into to get the most out of it.Watch lectures at the original speed: you're likely to miss some nuances if you don't (or better yet, attend in person so you can ask questions). Work through problem sets throughout the week: the problems are meant to require some time and effort to think about. And try to figure out the answers to questions on your own before going to Piazza: if you don't, you're in for some short, sarcastic replies.In short, approach this class from what's going to be best for your understanding in the long run, not just whatever seems to require the least effort in the moment. This class will teach you that too: the greedy algorithm is rarely the correct one.If you do this class right, you'll be amazed at how much you'll learn. A problem that looks like a foreign, unsolvable nightmare one day will slowly begin to make sense, and with effort, you'll figure it out. Take pride in these moments.Of course, getting the "right answer" isn't always the point. You'll learn about approximation algorithms: where you'll learn to be okay with not getting the right answer, but being "close" to the right answer. This is going to be difficult to wrap your head around. But it turns out learning to accept being within a factor of 2 of optimal isn't always a bad thing. You'll appreciate this on the midterm and final when, given the time constraints, being within a factor of 2 of your desired score is about the best you can do.My best advice for the course? Divide and conquer. The class as a whole can be intimidating, frustrating, and even demoralizing at times. But if you take it one week at a time, one problem at a time, one idea at a time: you'll find that there's a lot of approachable elegance to the algorithms that you've never thought about before. And you'll come out of the experience with incredibly valuable newfound knowledge and newfound approaches to problem solving. And newfound sleep deprivation too, but remember: everything is a tradeoff. And this one's worth it.
- Your CS education will be incomplete if you don't take this class (or don't know the corresponding material), and don't let anyone tell you otherwise. You get mathematical maturity, a "algorithmic toolkit"(as Mitz puts it), and much-improved problem solving skills that no other non-graduate course can give you.- If you have math background, you should do quite well. If you don't, go get a math background, and then take this class. Otherwise you will be miserable.- CS 121, Stat 110, and CS 182 are the best classes to take to prepare you for this class. I took all of them, and thought this class was not really that bad (despite taking CS50 sophomore fall and Math 1b freshman spring).- Start the second Pset the second you get it. It's quite brutal in comparison to the others.- Overall, I really had fun. The material is quite interesting if you stay on top of it. I'd highly recommend you take this course!
CS124 is unlike any other course (in any discipline) I've taken at Harvard.  It's tough and you should expect to spend many hours on the problems sets per week.  With that said, I'd say that the first half (up to an including the midterm) is much more difficult than the second half so if you can make it to the midterm you can make it to the end.
It's hard. Study well
While the material is extremely interesting, the course staff seems to work against you instead of with you. But hey, at least we got a free T-shirt!
I despised this class. I am keeping CS as my concentration, though this class made me think seriously about switching to something else even though I'm close to finished. It's depressing, it lowered my self-confidence, and it took over my life. I sincerely hope the course staff can change the nature of this course for the future, though I know it's historically been this way.Mitzenmacher excels at making students feel stupid, embarrassed, and unmotivated. The TFs and section in this class were great, which was the only saving grace. There were frequently multiple assignments due at the same time. I started nearly every assignment on the weekend (due Friday), spent at least 3 or 4 times as much time on this class than my other three combined, and still was up late every night struggling to get the assignments done. Additionally, the tests are miserable. The t-shirts we got at the end say "I survived CS 124," which really tells you all you need to know. Only take this class if you absolutely have to for the concentration.
124 is an indispensable course for potential future software engineers. Be prepared to get a 46/100 on your midterm, even if you've always scored 1 stdev above average on exams in other CS classes. It will hurt. The midterm/final is the most important part of the class. They are very brain-teaser-ish.
It's a lot of work but worth it in my opinion. I feel like I've gotten a lot better at approaching problems the smart way, even though I'll probably forget the specific algorithms we've learned. Go to office hours and don't start your hw at the last minute.
if CS major, take it and be prepared to work very diligently. If not a CS major, this class will become your main course of the semester.
Challenging course, but really enjoyed it. Only downside is that sometimes the TFs mess up grading the psets, but you can always ask for regrade if you want.
This is a difficult and time consuming course, but you definitely get out what you put in. If it's not needed for your concentration, consider taking it pass/fail. It removes a lot of the stress while still allowing you to really engage in this interesting and important material.
This class is hard but so rewarding. the material is so fascinating and the community is great (you meet a lot of cool people through office hours). If you don't care about getting a bad grade and actually want to learn stuff, take it.
In CS124, I learned the same amount of material about CS that I learned in my life cumulatively up to CS124.  It's a wonderful class, and it's honestly not as terribly hard as people make it sound.  It's one of the harder classes I've taken, and I spent 20-25 hours a week working on it, but it's totally manageable, particularly if taken without any other tough pset classes.  I learned SO MUCH in it, and I think it's completely invaluable for anyone interested in CS at all, more so than CS121 (which is required by the concentration).
Problem sets are survivable with office hours, TFs, and other students (with reason of standard collaboration policy), but the exams are HARD.
This class will take EVERYTHING out of you. It will take all your time every single week and probably all your energy too. There are probably some geniuses who loved this and got through it easily, but if you're like me and started CS for the first time at Harvard, this is an enormous challenge. I had to take it for the concentration, but honestly I'm not even sure it was worth the material that I learned. The material is cool and applicable, but I barely soaked any of it up because every single week of the semester was just an agonizing race to get my psets done. I pretty much lived in office hours because the psets were way too hard for me to figure out myself. Mitzenmacher will say that you'll have one pset per week except for the weeks with programming assignments, which you'll have two weeks for. This is extremely misleading. We never had a full two weeks for a programming assignment, and multiple times did we have several things due on one day or within one week. He does not care AT ALL about his students, giving fair amounts of time to do the assignments, or giving us enough materials to learn from. He does not release any practice problems for the tests, so you just have to study from notes and homework, which I have never had a professor do. He answers questions sarcastically in lecture, which always made me feel very unappreciated. Many of you will have to take this class anyway, but be prepared for this to be your whole semester and for you to be very tired all the time. The TFs are usually really wonderful, so rely on them and not Mitz.
strategize on the exams: there's severe time pressure, so do the questions in the order of most points. beware of spending too much time of multiple choice.
God this class is hard as shit. I started the semester strong, reading every chapter before its respective lecture in BOTH textbooks then fell so behind. If you don't have time to put into this class you will do poorly. Period. I scraped by all the psets, failed the midterm and failed the final. And I would be okay with that as long as I feel I learned a lot... wish i was able to put more time into this class
The material is super interesting, and fundamental to becoming a computer-scientist, or any kind of coder really. Still, I think the course can go a long way towards being more student-facing. There is a lot of material, and it's objectively difficult -- but that doesn't mean it should be a weedout class. For instance, there seems to be no good reason that no practice problems/exams are uploaded, so students can get more practice at internalizing the material. The is no danger of succumbing to rote memorization of material -- in fact, the course staff encourages students to seek out practice problems elsewhere -- just do not upload them directly themselves. *Not* uploading problems seems to have mostly downsides, pedagogically, and mostly seems unnecessary -- it would be quite easy thing to change, moving forward.Second, though Prof. Mitzenmacher's comments are often funny, and he does seem to want to teach, his snark is often discouraging. Pointing out that some questions are silly is just unnecessary -- we know that *he* is smart, and that the material is easy for him to understand, and it just makes the student feel bad. Moreover, it discourages others from asking questions in the future.More generally, and this is a point for the CS faculty to decide, it seems that many schools split up the same algorithms curriculum into two classes. MIT's sequence of 6.006 and 6.046, for example, cover roughly the same material *together* as 124 does. There is merit to this -- students delve more deeply into the concepts, and studying algorithms for at least a full year means a more prolonged engagement with the material, such that students are more likely to retain it.Bottom line -- yes, the material is hard, but the staff could do more to help students through it, rather than make them feel dumb.
This class is fantastic.  It isn't as bad as everyone makes it out to be.  Very doable.  The psets are especially reasonable, while the exams are as tough as people say.  Mitzenmacher is also terrific.
As you probably know already, CS124 is not a class to be trifled with. Spend a lot of time on this class and make sure you keep up with the work, especially in the second half of the semester.
This course is tough and I get the sense it's graded harshly. That said, you learn a lot and the psets are pretty manageable compared to say Math 25 in terms of theory or CS51 in terms of coding reqired. Put a lot of work into this class and you can expect to walk away with a decent grade, but an A- is not guaranteed by any means. On the other hand, if you don't study you'll be screwed.
This might be the hardest class you take at Harvard, but it is the most rewarding!
Very good class, and it prepares you well for coding interviews.
Hard but rewarding
Even if you're not a CS major, I recommend this class to anyone who likes quantitative thinking. I took this class simultaneously with CS 51, with only an AP Comp Sci background, and the material is manageable with that little background. I will tell you: this class is going to be one of the most difficult classes that you take. It will, however, also be one of the most rewarding ones. It's also a lot of fun. Problem sets questions are like puzzles, and I walked away from both the midterm and the final having enjoyed the difficult questions that I was challenged to solve.If you're not CS, but have enough math background, I would definitely recommend this class. Mitzenmacher is a wonderful teacher, and sections are an amazing resource to reinforce your learning.
This was objectively a good class. It was well organized, the problem sets were mostly reasonable. The exams were nuts, but everybody thinks they're nuts. The material you cover is well connected and I think learning it is satisfying. That being said, I personally learned through taking this class that I don't like theoretical computer science. I think this is really a personal preference, so you can stop reading here if you like. I'm into theoretical math and physics and I just found a lot of the stuff to be dry. The material just never quite seemed important enough to catch my interest. Regardless, I'm told that people use this stuff a lot in their tech interviews and it's definitely good for solving problems, but you'll just have to find out how you like it.
This course is definitely challenging but also not as bad as most people say. Definitely don't take more than one other hard pset class at the same time, but there's no need to be overly cautious.
Everyone should take a class -- like this one -- that makes them think and solve problems. This class has made me more confident in my own ability to go from not knowing an answer to having a clear strategy.Protip: Learn LP beforehand to optimize your problem set grade ;)
worth it
Assignments are reasonable and really help you learn. The tests are absurdly difficult.
This is one of those classes at Harvard that is both incredibly challenging and incredibly rewarding. I knew it was going to be a lot of work so I only took one other hard class with it. There will be times during the week where you will have so much work to do that you won't know what to do with yourself, and the exams are difficult, but overall it teaches you a ton and you feel proud after completing it. For problem sets, find a really good p-set group that you can trust week to week, and the same goes for programming assignment partners. For exams, just practice as many problems/algorithms as you can, there is no way to "beat" the exam using one particular strategy.
This class will wreck you but you will learn a lot in the process. You should have solid programming experience in one language (probably C family) and a good stats/probability background will be helpful.You have weekly theoretical homeworks (proofs, algorithms and analysis, etc) and 3 larger 2 week programming assignments. These will take up a significant part of your week. There will probably be more programming than theory on the weekly homeworks in Prof Nelson's version.I recommend going into this class with a good support group of friends or finding one early on. Your experience will depend a lot on how well you use support resources: office hours, group problem solving, sections. Going at it alone is a bad idea.
Challenging but such amazing material. You will become a much better computer scientist. Take it!
Took this class with CS50, CS51, and Stat 110 completed and I took CS20 concurrently. It is possible to get an A with these prereqs though you may have to put in a little extra work compared to the people that have 121 under their belts.
It is difficult but essential if you want to become a good computer scientist.
I would recommend that students take time out and see if they can one commit to the material on their own to take this course seriously. This entails going to Office Hours, Lecture,  etc. However, if you think this will be a flexible class where you can watch lecture then do problem sets, later look at problem set solutions, do practice exams, YOU ARE WRONG. This course neither provides problem set solutions nor practice exams. And the material is hard.
Don't take the midterm linearly. Skip around looking for questions you know the answers to first. Write as much as you can for everything to get partial credit.Start programming assignments early.The content of the course is super interesting and important, but the course itself can be a massive drag from time to time.
Great class - difficult material, but absolutely necessary for anyone who wants to do CS.
Very rewarding class that can be tough at times. Definitely made me feel like a much stronger, more capable programmer.
Takes a lot of time out of your schedule, but worth it!
This class will take a lot of time and be extremely difficult. However, if you put in your all, you will get a lot out of it. If you're serious about programming at an advanced level, this course is needed.
Is this a hard class? Yes. Is it as hard as its reputation suggests? Probably not. Should you take it anyway? Absolutely. You'll learn a LOT, even if you don't end up getting the grade you think you might deserve.
Very useful course for anyone who wants to learn how to solve problems in the most computationally efficient way possible. That said, this course is not for everyone. Some will find it difficult.
This course is amazing! It is not as time consuming or challenging as it is hyped up to be and it is an incredible experience academically. You also make great friends doing the work! Mitzenmacher is really wonderful and the material is worthwhile and useful.
This is a great class!  If you have a really good math background, this class should not be terribly difficult for you.
This, overall, is a satisfying course. The problem is, there are many times throughout the semester where it doesn't feel that way. It is frustrating, infuriating, and seemingly unfair at times. It does pay off at the end, when you look back and realize you've developed a strong algorithmic toolkit and a great sense of all kinds of problem-solving techniques, but be prepared for a lot of headaches on the way there. Mitz is great, so if he's teaching go for it, especially if you're a CS concentrator, but be warned, it'll be tough.
Mitz is awesome, material is extremely interesting and useful. TF's are also amazing.
This is a painful, poorly taught class that wants you to fail and is poorly suited for students without intense mathematical preparation and prior experience coding large projects. I only half jokingly say Mitzenmacher is a sadist. Exams are designed so no one will finish, pset answers are not released, and no exam study materials or practice problems are released so studying is difficult.
I think the biggest thing that made this course not only bearable but very positive was working with a consistent group of people that had similar goals and were on a similar level of preparation. The class lends itself to cooperative work, whether through the problems or programming assignments. This was also the kind of class that I felt that I would keep learning based on how much time I spent on the material, and that never quite felt like it would change.
If you're a CS student, the sooner you take this the better. If you're not a math major and are interested, you probably want to take it pass/fail else your GPA will take a hit. Still, as a CS concentrator, I thought the material was really interesting and useful, although the difficulty can not be overstated.
This is a tough class. Make sure to spend a lot of time on the homework.
As everyone knows, it's quite the challenging course, but it's important.  Professor Mitzenmacher is a good guy who will help you if you take the time to reach out to him.  I wouldn't say I particularly enjoyed the class (just because CS theory isn't my cup of tea), but I'm nonetheless glad I took it.  Furthermore, I definitely understood its importance and appreciated the problem solving strategies I learned.
This class does exactly what it says on paper, teaches Algorithms and Data Structures. It is definitely a hard class and you will need to put in lots of hours to understand the material and be able to apply it. It will be a rewarding experience and while studying for the final you'll be amazed at how much you've learned/covered.Solutions to HW assignments are not provided, which is annoying because grading can seem quite arbitrary. There are some topics, such as DP and Approximation Algorithms, where the lecture just provided some basic example problems and solutions rather than teaching us specific strategies to approach these problems. Some of the intuitions behind the solutions for these sorts of problems were absolutely out of nowhere. Be prepared to not do well on the exams, as the average was around a 50% for the midterm and the final.
Like everyone says, it's a lot of work, and it's pretty challenging, but all the more rewarding.
If you keep on top of everything you'll be fine with the problem sets. The exams are extremely difficult. Great class b/c you will learn a ton.
Find a TF and a section that you are comfortable with early in the year because attending section is the most helpful way to actually learn the material.
Wow did I learn a lot. Wow did I get fucked. I guess I'm.. glad I took it? I recommend with reservations: take it only and absolutely if you have the drive to be better than most out there when it comes to computer science.
It's a really good class in the sense that I learned a lot and was very challenged and engaged. However, it also destroyed my soul and wrecked my sleep habits. If possible, take this with a lighter load, and expect to be rallied anyway. I dropped all of my extra-curriculars by the last month and averaged about an all-nighter every other week. But I do know a lot about minimum spanning trees, so...tradeoffs.
It's useful material, Mitzenmacher is rather funny, the exams and assignments are much fairer than with Jelani.
If you're reading this, you know what you're signing up for.  You're probably CS concentrator trying to fulfill the second theory requirement, choosing between this, AM107 and AM106.  Unfortunately 106 teaches entirely different content (abstract algebra and the like, great for math lovers but not as useful in CS), while 107 teaches hardly a fraction of the algorithms covered in 124, and not nearly as in-depth.  So this is probably your best bet.  On one hand, the course is incredibly comprehensive in the content, ranging from different algorithm techniques (dynamic programming, linear programming, and the like) as well as various data structures (heaps, graphs, etc.).  On the other hand, the course is just incredibly time-consuming and just plain hard (maybe even NP-hard, ha).  Problem sets and programming assignments are tough but can be completed in time with good pset partners and drawing on the TF's help during office hours.  The real burden of the course comes from the exams, which sometimes feel so needlessly difficult that you might just leave the lecture hall wondering what just happened and marvel at the amount of space on the test you left blank.  Overall, this course does teach you a lot, but one might argue at what cost does this come.  Perhaps take an equivalent class at MIT.
Take it if you have to (i.e. CS concentrator), absolutely avoid it if you don't have to. This course is super-useful if you want to be a software engineer, but even then the soul-crushing difficulty and workload, wildly unorganized material, and poor support structure make it a difficult course to recommend.
This class is a shitton of work and there is no centralized textbook or notes that have decent explanations. Mitzenmacher's teaching style is very "I dont care about you", which is perhaps refreshing because grades and attitudes completely subjective, except it is an emotional struggle. However, please note that Mitzenmacher is actually a good guy. Be ready to be challenged, but I will say that this class makes you a smarter person. It makes you think more critically about efficiency of algorithms and best practices for data storage.
This class is definitely one of the easier CS courses on campus. Despite what people may say, no background in CS is necessary in order to do well in this course. Working on problem sets on your own is the most effective way to get them done. Watching lectures rather than reading the lecture notes is also very effective. This shouldn't be the hardest course that you take in your semester. You won't find it necessary to highly prioritize the problem sets for this course over other problem sets.
Get ready to be torn a new one
I had some background in algorithms before -- so the first half of the course covered algorithms that I had already known. However, I still learned a huge amount: many interesting applications of the algorithms that I had not thought about, a more rigorous and thorough knowledge about the details underlying the algorithms, and overall a much better sense of their applications. Professor Mitzenmacher is very clear in his lecture notes, and a great lecturer (although if you're a visual learner, he doesn't write much on the board). The second half of the course is an exploration of a variety of topics including randomization, hashing, randomized algorithms, and heuristics. They are each covered in less depth than algorithms and concepts in the first half of the course, but nonetheless we are left with a good understanding of the topics. Taking CS124 has changed me as a programmer--I now understand the power and scope of current algorithms, and realize that much more can be done than I previously thought. Lastly, professor Mitzenmacher is incredibly nice and fun to talk to if you get the chance.
Very difficult but worth the work
Very difficult course but teaches you a lot of useful things. Assignments and especially exams seemed designed to be unnecessarily difficult and frustrating. If you're serious about computer science you need to know this stuff, so you basically have to take this class.
It's not easy but by far one of the most useful and educational courses at Harvard.
Great course. You will learn a lot.
CS 124 is a great class! I really like how the programming assignments are separated from the problem sets - it highlights the distinction between computer science and code-writing. The material covers the perfect balance of theoretical and applied topics, and I really do feel like I'm a much better programmer after taking the course. Mitzenmacher is also a great lecturer, and the lecture & section notes posted online are super helpful. The problem sets are difficult in the beginning, but the workload becomes much more manageable as the semester goes along. Take this course!!
It is extremely difficult, take easy classes to compensate
great class. come in with some proof background and an open mind. computer science theory is pretty important and the information you learn in the class is pretty invaluable.
This curse should be probably called "Some Weird Abstract Math Unexplained 101". There is some very interesting stuff in this class about efficient ways to solve problems from the perspective of CS person. But then, when you think that you are good, everything gets blurry and confusing with the math proofs that Mitzenmacher assumes you know. Unless you are a big fan of going through proofs showed in the class, learning them by heart, you are not gonna do well in this class. Problem sets measured how well you can teach yourself material somewhat related to what was discussed during lecture. A feedback in the form of "You should have better looked at the hint given in the question", well, it doesn't really show you what you did wrong. And hell, I looked at this hint BIG TIME, so looking one more time is not gonna make me have a John Nash moment when he cracks Russian codes. Peace.
Definitely worth taking. But be ready to spend lots of time doing the psets (though they weren't as long as previous years, apparently). Also, be ready to be frustrated by the lack of published answers.
This course was possibly the hardest course I will ever take at Harvard. However, I did learn a lot about data structures and algorithms, which are key components for a computer scientist to understand. The people are also really chill because you are all trying to get on each other's good side so that you will all collectively and gladly help each other. Take this course if you want to be good at CS. I also got a girlfriend out of it, so if you're looking for love, this is definitely the class you should take. Chicks dig algorithms.
This class is insanely hard (like really, really, really hard); don't let anyone tell you otherwise. I spent maybe 40-50 hours per week on the psets, and the tests (the midterm and final) were brutal. And also, please don't take this class unless you have CS121 or CS20 (or a proof-based math background): I really, really struggled because I didn't have a proof-based mathematical background and it killed me on the tests and psets. But overall, this class was useful in that you take away a "tool box" of algorithms to use in the future.
I definitely did not have the coding experience for this class, which made it challenging and will result in probably my worst grade at Harvard haha... However, I can say that not since I was in middle school in Europe and did math competitions have I solved problems this rewarding. The class material is super fascinating, really. The problem sets are really hard and so are the midterm and final, but I really feel like I haven't used my brain for thinking like this throughout Harvard. If you're not a CS concentrator and won't have lots of time, definitely do think about whether you really want this though.
This course definitely takes some time but the material is interesting and the skills you learn are useful. Starting the problem sets earlier will help you have time to understand them better. The course staff is approachable and helpful.
This is one of the few classes that decreases significantly in difficulty after the midterm. While the first few weeks are quite intense (up to and including especially dynamic programming), once you get used to thinking algorithmically the second half of the course falls into place more naturally, particularly if you have some background in discrete math. With Prof. Mitzenmacher, the class is definitely much more doable than under Jelani Nelson, although that is not to say that it's easy. There are definitely a good number of very challenging homework problems, and exams are no cakewalk, with averages hovering around 50%. Programming assignments are a bit time-consuming but not overly so. Overall this is a fantastic introduction to theoretical CS, and has made me want to take more CS classes.
It's a challenge worth taking.
124 was difficult, but it definitely is a class anyone thinking about doing CS should take. The exams are incredibly hard (most people don't finish), and you really need to understand the concepts because they'll use the same ideas but it's a lot of thinking on the spot. Problem sets and programming assignments take a fair amount of work, and definitely work with others and go to office hours.
CS124 is an impossible, incredible class. You're going to struggle so much. You're going to be putting in an insane amount of hours. You're going to learn so much.You need to know everything in CS20.You need to be able to code at a CS50 level. (But you definitely need to teach yourself C well enough that you can, say, do operations on matrices. C runs a lot faster, and your code won't finish running if it's in Python.)
Expect it to be difficult, but you will learn so much.
Don't take this unless necessary. The material is cool but it is presented in a way that makes it very uninteresting and unenjoyable to learn. Mitz teaches the lectures as if you already know some of the material and it is condescending and makes the lectures unenjoyable (so nobody attends them in person.) Also don't post on piazza or you will receive sass. Also learn some statistics ahead of time because that would help.
The first half is quite interesting, the programming assignments are interesting, but the course falls off in the second half. Expect to be challenged in the first half even if you are well versed in mathematics, but know that it will ease off in the second half.
This is a really hard course, but you walk out with a lot more knowledge and some pretty cool tools for understanding really complex problems. Also, don't attempt to do this without any partners unless you are a math genius. Otherwise, it really helps to have one or two friends to bounce ideas off of.
It's a great, challenging class. Mitz can come off as a little cold, but he cares a lot about his students and is a great teacher. Be sure to start the assignments early; they're miserable if you leave them to the night before they're due, but fine if you get them started a little early.
It's a hard course, but one that's very valuable and interesting. The material covered here is the core of CS. Just make sure you're not taking multiple other time-intensive classes at the same time.
It's a hard class, obviously. Mitzenmacher is wonderful, the material is fascinating, and I really enjoyed the problem sets & programming assignments (even though they all took 10-15 hours apiece). I think every CS concentrator should be required to take this - having also taken AM107, it's an absolute joke that you can take that instead of CS124. That said, I would also not recommend doing what I did and taking this your senior spring; it requires significant motivation and focus.
hard class but essential for a computer science education, be prepared to work hard
When they say you need an amount of mathematical maturity to do this course, they aren't lying! If you haven't taken a math class with proofs yet, and you don't have time/interest to take CS20, you should definitely work closely with TFs to make sure that you're learning how to do the problems well, or you'll really be hurting during the tests. As someone coming into this class without CS20, and CS50 as my only programming experience, I'd say that you don't really need familiarity with the concepts in this class coming in (it's not too bad conceptually) but really learn how to do some proofs and probability ahead of time! Also, I think that you should have experience beyond CS50 in programming, or the programming problems are going to be really difficult and time consuming, and you need all the time you can get for this class!
This spring's iteration of CS124 was a lot more algorithm heavy, not so much on the data structures. Expect a lot of theory, some math, not so much programming. The programming assignments were surprisingly enjoyable (but maybe because in comparison, the theory psets were kind of god awful?) and were definitely more of what I expected to do in this class.
The Good-Assignments and exams were well-written (albeit very tough).-Lectures were generally good, and lecture notes were a good supplement.-The TFs were knowledgeable and helpful.-You'll learn a lot.The Bad-Assignments often took more than a month to be returned. This means you will not be able to learn from past mistakes until four problem sets down the line.-Assignments varied in difficulty, sometimes wildly, so it was difficult to predict whether a week would be 15 hours or 30.-Mitzenmacher is often unhelpful and sarcastic on Piazza, responding to simple clarifications on what's expected out of an assignment with roundabout answers for no apparent reason. -There are no late days. This fairly merciless policy means you can't have "off" weeks (for example, if all of your classes have a ton of work one week, tough cookies, hope you survive). -The turn-in mechanism for programming assignments was confusing, complicated, and stressful--CS61, for example, had many programming assignments & their mechanism was far cleaner and easier. So generally, the content of the course is good, but the organization is terrible. Be prepared to give up 20-25 hours of each week to this class. It is unforgiving and painful, but you will learn quite a lot. If you think you can learn algorithms well on your own or through some sort of summer course, do that instead.
You probably have to take this. Cheer up! First of all, it's not nearly as bad as everyone says - I'd say it's comparable to CS 121, at least for the 2015-2016 academic year both courses were taught. Secondly, it is about 1,000,000x more practical than 121, so at least the time you put in will get you somewhere! Plus, sometimes (not always, because that's too much to ask from a Harvard "academic" and not a "practical or trade school" course, but sometimes) your CS homework will actually be...writing code! Incredible! (You write 0 lines of code in CS121) And the code might sometimes be in a language used in the real world! (Not Ocaml!)QUICK TIP: Don't go to lecture - not worth it unless you're someone who really learns from lecture. Didn't even watch the lecture videos. Go to section, maybe 1-2 Office Hours for each pset, and read the lecture notes, but lecture was not necessary to get through this course.
Not that people wouldn't expect this, but this class is no walk in the park.  That being said, it is extremely interesting material, in a very easily digestible way.  The lecture notes are top notch.  Expect work, but there is no reason not to take this class.  Taking it with CS 181 concurrently was tough, but definitely doable.
This class is extremely difficult, but if you put in the time and dedicate yourself towards learning the material, your thinking skills will improve significantly.
This course is very challenging but very rewarding. It does a nice job of combining theory and implementation of the algorithms. I got a lot better at solving problems... which is the main point of algorithmic theory.Mitz is a great professor. His dry humor about how difficult the course is very endearing. He cares a lot about the course and it shows in the quality of his lectures and presentations.
This course is very time consuming, but still doable. Having previous experience with algorithms and programming would be very, very helpful.
challenging but worth it
This course made me a better programmer.
I liked this class a lot. The material is a lot of fun, I dont think its as difficult as its chalked up to be. I think its biggest strength is Mitz as a course head: though he might be a little too sassy on Piazza sometimes, hes very good about clarifying questions on the materials that he provides. Hes the single source of authority on material, so section notes, lecture notes, problem sets, etc. all come from him, which avoids a lot of confusion. The teaching staff was also for the most part excellent. We had 7 weekly assignments, which were mostly feasible (the second one was brutal), and 3 programming assignments, which were trickier. The exams were difficult but also kind of fun to take. I would highly recommend going to a weekly section, going to lecture (or at least watching it on time), and finding a good programming assignment partner.
The material is super interesting, but it is very difficult.  You will definitely come away a better problem solver after this class, but be prepared to put in a lot of hours.
You should consider taking this class only if you have the time for it and are willing to expend a lot of energy for a very high reward. You will learn lots from the class but make sure you are willing to put in the work.
A good course for anyone looking to learn about algorithms and data structures. It will be easier if you have a mathematical background, as there is a lot of proof writing in the HW assignments and tests. Honestly I found the course really fun, even though at times it was pretty difficult.
This is a great class if you're interested in understanding real computer science and academic masochism.
This class is hard! But don't despair -- you will learn a lot. Lectures aren't that useful, but the textbook is great. Office hours are usually pretty well-organized, and you meet a lot of cool people over the course of the semester. For instance, I started dating my PSET partner, which was pretty cool.
I learned a ton but it was really difficult and made me realize I hate computer science.
This is very much a proof-oriented CS class. It is a great way to learn a lot about algorithms in a short period of time. There is a lot more math involved than you think.
Great course
I actually strongly recommend this class. Thinking algorithmically is an incredibly useful skill. This course teaches you to think about computer science, and more broadly any process, in a novel way. You begin to think about efficiency, and if a process can be made better. It's really worthwhile. I recommend this class to everyone, although you need a surprisingly high level of mathematical sophistication. The psets take a long time, but overall the material is not terribly difficult.
It's hard. You've heard this already, but it's true. That being said, the problem sets are very doable -- just expect to spend lots of time thinking about them and texing them up. Office hours are huge; try to find a group of peers to work together with. Checking answers is crucial to making sure you did problems correctly.
This class is fairly difficult but you will learn a lot out of it.
Hard course, but you will learn a lot. Find a good study group and work together.
This is a pretty cool class! The professor is really chill and has pretty good notes online. The material is very interesting too so you won't get bored. The only downside is that it feels like a math-heavy class for non-quantitative people, so be prepared. The midterm and exams will have a bunch of random math questions that aren't covered in lectures/psets so do your best to guess on those questions. The problem sets are pretty difficult and the programming assignments will take up a lot of time, but office hours are a lifesaver! The tfs' are all very dedicated and will help you in your dark hours. If you're cs/math/applied math/want a tech job, you'll definitely want to check this class out!
Be prepared for lots of work and frustration.
This class is extremely challenging, but still doable (if you seek help when you need it). Even though you may not necessarily walk away with the best grade, you definitely will learn a lot and it will be a worthwhile experience.
It may not be that fun all the time and the course materials were very lacking, but the class is super useful so you should still take it. Mitzenmacher's version is more manageable than Jelani's I think. The actual topics and questions are pretty interesting and fun to think about, though also very very difficult! It's mostly written psets, with 3 programming assignments where you work with a partner.
LOVED THIS CLASS!! :) This was one of the most rewarding classes I've taken at Harvard. Lots of work, but really great class.
Take this course. It's awesome. It's really not as hard as people make it out to be. Mitzenmacher is an amazing professor. His lectures are incredibly clear and helpful. Try to find a good problem set group. This class is really not as painful as it's made out to be or potentially could be. And the material is really interesting but not only that, it's useful. Take this class.
