Fantastic class.  Be warned that it's all you can do with your semester and even then it's tough.  Much more manageable without other work intensive classes because they'll likely end up taking a back seat to this.
Excellent course. Anyone who is willing to put in the time it requires and is comfortable with the subject matter should be able to take this course and reap its rewards.
Beware! This is not a course on operating systems -- it is a course on thread synchronization. The virtual memory assignment is just a lethal synchronization problem in disguise. They didn't even give the pretense of making the file system assignment anything but a giant synchronization problem -- they implemented almost all of it but left the synchronization to us.
if you like systems it is the most fun cs course you will take.
Choosing a partner who you can split work with is very important -- otherwise, expect to burnt out by the end of the semester.
It's a good class, but a very hard and time-consuming class. Remaining classes for the semester should be chosen wisely, or you will be living in the terminal room.
Until Matt Welsh teaches it again, do not take this class under any circumstances.
Enthusiasm with reservations - know what you're in for. You will learn a lot about systems and operating systems, but you should be prepared to want to gouge your brain out with a keyboard.
This is the best class I have ever taken at Harvard. That being said, it is the most time consuming - make sure all your other classes are really really easy! (Or you will fail all the others - 161 is so cool, you're bound to prioritize it)
Be prepare for the long working hours...
This course is nothing like you've ever experienced. It's the most rewarding class I've taken at Harvard.
It's a lot of work but definitely a life changing experience.
It's great if you really want a super thorough understanding of operating systems. I would not take it just to have taken CS 161 (like a badge of honor) but rather if your courses line up well such that taking this class will be at least somewhat enjoyable rather than a lesson in frustration as you fail to complete every one of the problem sets.
Be ready to take only 3 courses.
You seriously have to be willing to spend three to five days straight in the Terminal Room from mid-afternoon until you can't stay awake anymore (and I mean tired because the sun is rising, not tired because it's midnight and you woke up a bit early that morning). That said, you really understand the material at the end of the course in an extremely deep way.
Unbelievable class.  Terribly difficult, terribly amazing.  I doubt any class will be as much fun.
Hardest course ever. Also best course ever.
This course is great. It's extremely well taught and organized. However, as everyone knows going into it, cs161 is going to be a ton of work so i hesitate to 'recommend with enthusiasm' because i feel most people are not up to it. haha at times _i_ felt i wasn't up to it and i really enjoyed the course so anyone considering taking this should know what they're getting into. And honestly, they probably do and will take it no matter what the cue guide ratings say :)
It's a lot of work, but worth it in the end.
For those with the minimal experience like me (50, 51, 61, 121), this class will be rough and extremely time consuming.  I felt others with more experience were able to grasp things more quickly, and oftentimes I was intimidated, but this really only enhanced my experience.However, it's totally worth it.  The psets take forever, but they are richly rewarding.  If you liked CS 61 and wanted a hardcore application of some of those key concepts, 161 is the class for you.
This class is a must-take for anyone considering a job writing software. Margo and her staff do a great job. The assignments are incredibly well planned, thought-out, and supported by the course staff.
This class takes time. You may have heard it's a lot of work. But seriously, you need to have a TON of time to devote to this class. It's really a rewarding class if you do, but it's also a nightmare if you don't.  If you want a challenge and have the time, go for it.  If you think you might be too busy, then you probably will be.
This class is your semester.  Then you take three more classes on top of it.  But it's awesome.  (Take easy classes along side it; otherwise you will die.)
Best class ever.  Worst class ever.  Take your pick.
I feel unqualified to assess whether or not what I put into 161 was "worth it."  But boy, what a ride.  I guess the question is, really, how could you not take 161?
Despite what the course catalogue may tell you, this class is not about Operating Systems. Sure, you kind of walk out of the class with a working OS, but that's not the point.At the beginning of the term, you are given a staggering amount of God-Level code. It's (almost entirely) designed The Right Way (tm) with The Right Abstractions (tm). The style is impeccable. There are comments (glorious comments!) *everywhere.* Your job in this course is to not screw it up too badly. You get very loose assignments, which are great since you can make them anything from kind of difficult to oh-my-god-i-need-sleep-but-i-must-continue-typing hard. You can try out literally anything. More likely than not it won't work too well, but the only skill more valuable than designing perfect programs is debugging imperfect ones, so it all kind of works out in the end. The beauty of this course is that you are given the parts for a perfectly crafted, perfectly machined gun that happens to be missing a few pieces. You hack away with play-doh and legos and maybe, just maybe, you'll manage to blow off the foot you were pointing your Frankenstein-monster at.That being said, that's all the class is. Lecture is... whatever. The professor? TFs? They're fine, but they're nothing special. This course is actually a course on designing things and coding them. If you go into this class thinking "Let's do the bare minimum to get by," you're probably Doing It Wrong (tm). But even still, regardless about how much of your life force you pour into this course, you'll come out a much better programmer. Highly recommended. Would buy again.
There's a Stockholm Syndrome that comes with the course. When you're spending a few hundred hours during a semester on a class, you want to believe that it's worth it. Evaluate the syllabus carefully, and whether it's worth your semester. As for me, 161 was really the only class I did any work for this semester; I'm not excited for my grades, but I learned a bunch.
This class is actually as much work as everyone says it is.  That said, if you clear out your schedule, and have the necessary preparation for the course, you will learn a ton.
This course will consume your life. But it is also awesome.
When I looked into the Q scores for CS161, I saw more numbers over 4.6 than I had for any other class's Q.  These numbers don't lie: CS161 is a very rewarding class with a heavy workload.  But the hours shouldn't scare you away: the class is very manageable given a decent, proactive work ethic.  Coming into the class with only a few months of any programming knowledge behind me, not only was it still possible to succeed with hard work, but I found that my skills and intuition grew immensely as the course progressed.  Creating a toy operating system is a lot of fun and still requires serious creativity in design and care in implementation.  It may not be hacking the Linux kernel, but CS161 will nonetheless leave you -- especially if, like me, you have comparatively less background and no professional experience -- feeling like a more confident and knowledgeable programmer.
Great class, but be ready for lots of work and make sure you are extremely competent as a programmer.
This is, hands-down, the most practical course I've taken at Harvard. There is quite a bit of theory, which is fun, but the challenging part of the course is in the design and engineering of the p-sets. This is what will keep you up nights (if you don't plan well) or consume a large portion of many of your days (if you do plan well). YOU NEED TO START P-SETS WHEN THEY ARE OUT unless you enjoy pulling 3 consecutive all-nighters, then still turning in a piece of crap that only kinda half-works. If you're given 3 weeks for a p-set, you need 3 weeks. I learned this the hard way, as did almost everyone in the course. With that said, the course is definitely worth taking. Even if you're not really into operating systems, this course will help you figure out if you want to do software engineering at the lower level. Even if you're into higher-level scripting and OO languages, you still need to understand how the low-level stuff works, so take it!Also, Margo is a spectacular professor, better than anyone I can think of in the CS department (and the CS department has some real champs). Her lectures are fun and interactive (and not in the usual "can someone answer this factoid that any idiot can google and give me" way) - truly intellectually stimulating. She herself is really approachable, funny, and no-nonsense (she will tell you exactly what's expected of you). Even if you don't take this, you have to take some class that she teaches.
Change the 'how many hours did you spend per week' question to 'per day' and I might still answer > 14.  On the other hand, I got to experience HUHDS breakfasts a few times a week for the first time ever -- of course it was because I was still awake from the night before.  The course has amazing lectures, you'll learn a LOT.  But still, don't take it unless you're a very advanced CS person who is willing to focus your entire semester on this one course.
Great course, but definitely more work than the ~5.0 workload rating alone suggests.  The most important thing to note is that if you have a bad partner, don't be afraid to say something - your entire semester will be miserable if you have to pick up all the slack.
Take this class. You need a working knowledge of operating systems, and despite the hours that will be spent hacking at your computer, the rewards are endless. You will learn to design, all the little tricks you can do in C, and how to work with a large codebase. Virtual memory is the best assignment.
For CS concentrators who care about low-level stuff: yes, go for it, get your hands dirty, learn something. For everybody else: stay away, this course consumes lives.
This class will destroy you semester. It will take away your social life, make you fail your other classes, and will cause your girlfriend to leave you. If you find time to sleep, you dreams will be in C, haunted by the race conditions in your code. Don't worry, the nightmares will be short; there is no time for sleep when working 100+ hours in a week. You will learn what it really means to be sleep deprived, staring at a computer screen for 32 hours without a break, skipping meals because you have no time to eat. I would tell you to start the assignments early, but by the time you're reading this, it's already too late.Don't be misled, this will be the best class you will ever take. Whether the costs are worth is up to you, I'm still not sure if they were for me.
Arguably the hardest, but also most rewarding class in the department. Prepare to learn a lot, code a great deal, and spend endless nights debugging. But it's all worth it once you see your os running. Oh, and Margo is absolutely awesome.
In many ways, this is the course that I waited my entire academic career to take. I didn't think I had sufficient preparation in my sophomore year, and it's only given every other year. The experience of learning about operating systems and implementing the major parts of one is notoriously time consuming. However, it is also very rewarding. Many systems courses in CS can be described as looking behind the abstraction barriers that you've previously been taught never to cross, finding out how the underlying machinery works, and then implementing it yourself. What is different about CS161 is that the system in question is not just a minor component of a programmer's toolbox; the operating system is the whole shed. Everything you think you know about how computer systems work has a giant black box beneath it. In CS161 you will examine or implement all the major abstractions that an operating system provides to users and programmers to make practical computation possible. In my opinion, this is the only way to really understand the abstractions of threads, processes, virtual memory, system calls, and files that are every programmer's bread and butter.
Everything you hear is true.
I can't stress enough how awesome CS161 is. Margo is indisputably the best professor I've had at Harvard. She clearly cares a ton about her students; throughout the entire semester she treated us with an amazing amount of respect and spent an inordinate amount of time trying to make 161 the best experience possible for everyone. The course staff were all absolutely top-notch: they were very responsive, and had a deep understanding of the challenges we were facing on the assignments and the many possible ways to deal with them. They also worked incredibly hard to read and critique the massive amounts of code we dumped on them. The distribution code was, as one person put it, "god-level", and the assignments made me a vastly better programmer. But I think what distinguished the course the most was the ability of everyone involved to have lots of fun, even while working our collective butts off on writing/solving/grading very difficult assignments. Truly one of my favorite experiences.
Fellow CS concentrators, I know what your concerns are. In your mind, you're running through whether or not it's worth it to take this class. In your mind, you're afraid of the horror stories of assignments that take upwards of forty hours to complete. In your mind, you're running through all the extracurriculars you'll have to give up, all the hours of sleep you'll lose, all the friends who will never see you, and the harrowing image of the sun's rays greeting your glazing eyes as it rises over the horizon, just outside the window where your laptop sits, dots appearing on the screen as p /testbin/ctest inches across your terminal. Your kernel suddenly panics. An alien life form detects a spike of despair on Earth as your frustration sends our rippling waves of negative energy across the universe. You look to the left at your partner, and utter a single word. Your mother would disapprove.Most importantly, and perhaps this is the greatest barrier, in your mind, you're asking yourself: "How are operating systems even relevant? That's so like, 1990s and Bill Gates and Steve Jobs or something."First, the horror stories are overhyped.  The staff are incredible and you are given weeks to do assignments. They periodically check up on you and express concerns to keep you on track. Most importantly, they treat you like people, so, despite hardship, everything feels very rewarding. Margo is fantastic -- literally is the best person ever. Everyone loves her. Forrealz.Teaching in the classroom is innovative. The staff constantly experiment with new techniques, and, when things don't go smoothly, admit their mistakes and make corrections for the benefit of students. They selectively do things like flipping the classroom, not because it's a gimmicky fad that everyone is buying into now, but because, at certain points in the class, it really is beneficial to have you discover concepts from first principles.Learning how to work on an operating system will challenge you and take your programming abilities to the next level. Even if you don't believe why operating systems are relevant, the design paradigms and security practices you encounter here will make you a better software engineer and better team player. I thought I was a programmer before I took this class, and now that I have, I knew I wasn't before. Mostly importantly, there is pizza or mexican food at all night office hours the day before the assignment is due.So, at this point, you might be still be doubtful of whether you're going to take it. You may think that it is a Bad Idea (TM). Succumb to the draw. Go with your gut. You absolutely have to take this course. I shopped the class, walking in 100% confident that I wouldn't take it. Yet, sitting there, at the first lecture, I suddenly changed my mind, and I'm glad I did. It was worth every kernel panic, every failed KASSERT, every single deadlock.
If you liked CS61, you should definitely take this class! Just don't take anything else difficult along with it, and make sure you block out lots of hours for just the psets.
This course will consume a lot of your free time. I took it as one three classes, which helped, but I still had to put in a lot of late nights. Do the design docs well, and don't be afraid to rethink or start over large portions of your design. Find a good partner.The TFs are super devoted and Margo is an incredible lecturer, and is super invested in her students. The teaching staff is the best I've had in a CS class here. The problem sets are super hard, but if you start right away, you can get them done in a sane fashion.
This is *the* CS class at Harvard. I regularly slept 4 hours or less a day for weeks on end doing psets. It's a constant uphill battle against exhaustation, failing all your other classes, and figuring out where that race condition is in your code. It will *hurt* taking this class. You'll become intimately acquainted with the sight of daybreak and the sounds of birds chirping over the slow hum of your computer. You'll get to know your fellow 161'ers *very* well as you all sweat over your code at 5am for the 3rd day in a row, and you'll probably put on more than a few pounds since you'll be making lots of late night food runs.BUT, This is so worth it. Even if you don't care much about Operating Systems, you will grow so much as a coder during the course of this class. This is by far, the greatest CS experience I've had yet.
Not too much to be said here - you know what you're getting yourself into.  If you have a partner on who you can thoroughly rely you will find your life significantly better.  Try to sign up with someone in mind (roommate works great) and set up a work flow early on.
This is one of the most exceptional classes I've taken at Harvard. The teaching staff are devoted, the lectures are solid, and the assignments are both interesting and polished from many years of careful iteration. You will learn a tremendous amount about the guts of operating systems; the techniques and abstractions and hacks that keep processes and memory and files chugging along. Your debugging and system design skills easily go up a notch too.The most amazing thing about this class though is the community that ends up building around it! Margo's flipped classroom and this year's extra-friendly staff make the class much more of a team than a collection of students taking notes. Where else are you going to be able to role play as PMs and Engineers on a rocket-control-system design meeting? Where else are you going to be able to argue and slowly go crazy with 3 other people about VM testing at 5 am over pizza and sprite? Where else do you get ANIMAL MASCOTS?It is a lot of work, but just don't take too many other killer classes the semester and it's doable.
I came into the class not believing that the craziness I've heard could possibly be true --- it is! However it doesn't stop this class from being one of the best CS classes I've taken --- it's so well supported and you don't feel too lost and a good partner will really help you solve problems together. The debugging process is painful though; especially when you have a deadline and no one but yourself understands the complete set of code you've written. For me it's a lot less about systems but more about design choices, understanding new code base, and working effectively with a partner. I learnt a ton from the course and again, the staff are amazing.
This is the best course offered at Harvard. The lectures are extremely well taught, clear, and most importantly fascinating. They will give you a perspective not only about how things work, but why they evolved to be as they are. The problem sets will force you to manage your time well. This is also the hardest course at Harvard. Be prepared to spend 30-40 hours a week, in which you are so sleep deprived your short-term memory fails you and you have to write down what you are currently doing or you'll forget it (like in memento). By the end, however, you will have written your own functioning operating system, and you will feel awesome. There is no other course in which the professor (Margo) cares so much about the students and their welfare. This course will make you a better software engineer, computer scientist and debugger, as well as a better person. You will learn to truly value your time and your friends. Don't be scared. Take the course. It's worth it.
This course is hard. You see that 5 for time? It's because there wasn't a 10. However, this course is worthwhile. The material you learn here will be useful in the future, you'll know how an operating system really works. The theory is straightforward; the coding is really the challenging part, but you get a lot of coding done and get a better handle of C (especially pointer!). Debugging will become second nature. The course is very well run; the staff tries to make it as easy as possible. The student TFs are pretty helpful; but I didn't feel as though the other research TFs were as understand of undergraduate schedules. Carl, Max, and Rob were fantastic and David Holland knows a lot, so make good use of your resources if you start to struggle.
Don't take any other classes with homework if you're taking 161.
After this course, you can call yourself a programmer. Although you work very long hours on the assignment, you do get out of the course what you put into it.
This is probably the best class and most rewarding class in the computer science department! Margo is awesome, and the TFs were excellent, very knowledgeable, and gave us awesome feedback! You learn so much about good system design, how to design good interfaces and APIs, how to program in a highly concurrent system (through painful debugging sessions), while having the operating system demystified. The assignments are definitely the highlight of the class. You'll spend ~40 hours or more a week on assignments, definitely plan ahead and take easy classes when taking this class! Also, make sure to get a good partner! Highly recommend this class, but it is definitely not for the weak willed.
It's as hard as everyone says it is.
The concepts themselves in the class are not that difficult. It's just that coding takes a bit of time. Think everything through very carefully, with pseudocode, before you start coding. There is enormous variability in the amount of time the assignment takes, and I think a lot of sunk time goes toward either (1) rewriting code that turns out to be incorrect or (2) fixing bugs that are extremely difficult to debug. Investing in pseudocode and design will pay off.
If you like challenging yourself, learning a lot, and not sleeping ever, this class is for you.  Margo is amazing.  10/10 would recommend.
This may not be your hardest class in college, but it will certainly be your most time consuming. You need to be prepared to take this course in order to get the most out of it--that means knowing how to branch and checkout various versions of your code on git, navigate a massive 600 file+ code base with ease, step up and down the stack in gdb like a boss, and be comfortable reading lots of code to find an answer instead of asking (because no one else will know the answer/is asleep or unreachable). If you are not already a seasoned developer, dont worry because by the end of assignment 2, you will be. But the more time you spend learning the tools, the less time you spend designing your OS, and trust me you can never spend enough time on design. If you are not prepared or are not ready for a very painful accelerated lesson in real software development, save yourself the trouble. Drop your ego and know why you are taking the class because if you take it for the wrong reasons, it will not be worth it whether you admit to it or not.You have to complete 4 assignments. A1 is writing the synchronization primitives (lock, semaphore, and cv) that you will need for the rest of the course and the tests for them. Starting with A2 you get a partner and 3 weeks. Choose the smartest, most hard working, and DETERMINED partner you can find. 161 assignments take not just skill, but outright stubbornness to finish. You spend the first week writing a design doc. This is unlike any design doc you have ever done--it will take as much time as most CS psets, and even then you will realize that your design doc is a piece of sh*t and sometimes outright incorrect once you start the implementation. You will then inevitably spend the most of the last 2 weeks debugging your code. You will get countless 1 line bugs that cost hours, days, or even a week to find. Write your code slowly and make sure you really think through all the synchronization cases. A2 is implementing a bunch of system calls, processes/threads, file descriptors, and a scheduler. A3 is implementing virtual memory with paging and swap space (this is the most difficult since even gdb depends on your memory system). A4 changes from year to year, but ours was to implement journaling for the existing file system.Despite all of this, this class is not about OS. At the beginning of the term, you are given a staggering amount of God-Level code. It's (almost entirely) designed The Right Way (tm) with The Right Abstractions (tm) by David Holland that will instill you with a new appreciation for C. The only skill more valuable than designing perfect programs is debugging imperfect ones. The beauty of this course is that you are given parts for a perfectly crafted, perfectly machined gun that happens to be missing a few pieces. You hack away with play-doh and legos and just maybe you'll manage to blow off the foot you were pointing your Frankenstein-monster at. I cannot understate the importance of diving right into the code full force without making dumb mistakes. Sounds difficult? It is. That being said, that's all the class is. Margo is brilliant and looks for the right things, but the lectures are completely unhelpful when it comes to your assignment. The gap between idea and implementation is just too large for a topic like OS. This course is actually a course on designing things and coding (ie debugging) them.This class will not necessary destroy your semester, but it will certainly be your semester. It will take away your social life, make you do worse on your other classes, and will compete against your girlfriend for your attention... and it will win. But don't be misled--for most who choose this path, it will be the best class you will ever take.It was the best class that I ever took. Even as a senior.
Amazing class. This class is one of the few at Harvard that teaches you actual software engineering skills. You will walk away with an entirely new understanding of how operating systems and computers work. You will have much stronger debugging skills and really improve your coding chops. You will learn how to code with a partner and write clean, understandable, and testable code. It's a lot of work but definitely worth it.
This course is hard, but probably one of the single best courses you can take at harvard. Clear your schedule.
This class lives up to its reputation of being very difficult yet very rewarding. I learned a lot more about systems than I would've thought possible in one semester. I am definitely a better programmer now than I was a couple months ago. With that said, this class did consume my semester. I fell behind in all my other classes, even the easy ones. I also did not get much sleep. If you're thinking about taking 161, keep in mind that it requires a huge time commitment and will probably be the hardest class you'll take at Harvard.
Clear your schedule.  I turned in good work, but I had some weeks where I spent in excess of 50 hours on a problem set.  Address this by thinking very carefully in the design phase - list out all requirements, propose solutions, reason through everything, then do it again - a few times.  Do not start coding until you and your partner can walk through your solutions without raising any serious questions about the design.
As everyone knows, this course is difficult and time consuming. However, the TFs did not seem to care about the course. Sections were unhelpful, grades were not returned in a timely manner, and there was not a good support structure for the students who were not the best in the class.
My blockmates definitely did not see as much of me on account of this course. Also the C programming language is a black hole of mischief. The problem sets are large, the code base is large, and you will encounter debugging challenges that you didn't believe were possible. That being said, this is the best class I have taken at Harvard. I really feel like this was a transformative learning experience and by being exposed to so much new material through the course I am a lot more passionate about Computer Science. Margo is so awesome and very approachable. If you take this class in the future I would highly recommend you pick the brains of the course staff they're out of this world brilliant.
This course has a reputation for a reason. If you are considering taking this course, here is what I think you should know (note that I wrote this early in assignment 3, which is the most difficult pset, but I was still relatively well rested):WARNINGS> My partner and I regularly spend 30+ hours on this course in a week (less on assignments 0 and 1, which were individual anyway). We are competent sophomores (we think so at least) who took CS61. My partner did AP CS in high school, while my first CS experience was in CS50 freshman fall. There might be people who spend less time on the psets, but my sense is that the overwhelming majority of students would agree that this course is a huge commitment in terms of time required.> I would imagine that this course will be very painful if you don't like your partner. Try to know your partner well before taking this class. There are people every year who do just fine finding a partner in the class, but it will probably help if you know your partner's work patterns and quirks beforehand.ENCOURAGEMENT> The course staff consists entirely of people whom I consider to be gods/goddesses among us mere mortals. Margo is clear and concise, powering through complex concepts and making them seem oh so simple (she's also very friendly :). Daniel Margo and David Holland both consistently amaze me with the breadth and depth of their knowledge, and I have never come away from a conversation with either of them without feeling like I have gained significant insights in whatever it was we were talking about. The undergraduate course staff is likely to change since the undergrad staff consists entirely of seniors, but Rob Bowden, Carl Jackson, and Max Wang are three of the most intelligent and dedicated TFs I have ever had the pleasure - nay, the honor - of meeting and talking to. All three of them are fantastically knowledgeable and dedicated to the point that I don't know when they get the time to do their own work because they always seem to be helping us with ours. I expect that, even though the undergrad staff will change, future iterations of undergrad staff will uphold similar standards.> CS161 has taught me more in one semester than all of my previous CS courses combined (all 4 of them). Granted, this is partially true because much of the knowledge gained in other courses is necessary to understand operating systems.CONCLUDING THOUGHTSPersonally, while I am DEFINITELY glad I am gaining knowledge of what really lies beneath the abstraction barrier, I definitely prefer coding above it. This is not to say that I regret taking this course. On the contrary, I am very glad I am taking it for the reasons outlined above. To those still considering taking this class, here is my final thought: if you are willing to devote massive amounts of time to the course (and potentially lose massive amounts of sleep near the due dates of assignments 2-4), this course will in no way let you down.
You'd have to be insane to take this course.You'd have to be even more insane not to take this course.
TAKE THIS CLASS. It's not even stockholm syndrome, honestly. You just legit learn tons and tons in the class both about how an OS works (which is important in CS, to know what's really gonna happen when you write a given line of code). Seriously though, 61 does a decent job of telling you the basics of what an OS does, and you can read about it online and whatever, but actually reading through the code that does these things and moreover writing code for the OS really helps you internalize what happens when you load in memory, etc. in a way that just reading about it can't, and also shows you how hard synchronization and other stuff can be (and makes you a lot better with synchro!).Also it definitely teaches you a good amount about software engineering which is nice to know.Yeah it'll be 20-30 hour weeks pretty often, but whatevs, it's worth it fo sho.
This is a fun class.  It is very time-consuming, and it really teaches you how to go about large programming projects.  You will experience the satisfaction of having completed most of the core pieces of an OS kernel in one semester.
I am no longer scared of anything in computers. Linux is no a longer magic black box that does things that I want in the way it wants. I can tell you how your code needs to be different if it goes on a pacemaker, or a probe to Mercury, or a high-end gaming platform, and given the time, I could probably write for you an OS for each use-case. You, too can have this power. All it takes is thirty hours of your time every week (disbelieve me at your own peril; ninety hours in the last week of an assignment may be in your future, too), an obsessive dedication to synchronization correctness, and the willingness to take your design assignments seriously *before* you start coding. If you're willing to dedicate the time, effort, and sleepless nights, though, this course will teach you to think like a kernel hacker, and more than that, a good one. Margo Seltzer thinks very hard about teaching, and does a uniformly fantastic job. You're given more than enough rope to hang yourself on assignments, but if you get out alive, it's a glorious ride. Easily the best course I've taken.
Don't take it if the flipped classroom thing is still a thing.  It felt forced at times.
This is among the top 3 classes I've taken at Harvard. It's also one of the hardest. Don't let that deter you! The course staff are incredible, and their enthusiasm for the material is really great. You will learn a lot of core systems stuff and write a lot of code for a semi-realistic code base. Even if you don't ever plan to work on operating systems again in the future (watch out though, the class might change your mind), you will be a better programmer after taking this course, and you'll have a better appreciation for how these low level concerns can affect your work higher up on the stack. My advice is to try to start early on the assignments, but be willing to put in a lot of hours during crunch time at the end.
161 was my entire semester. This class took the time of 4 full classes. I did work for my other 3 classes during the time that I normally would have slept, or neglected to do it at all. It's a life consumer but in my opinion, definitely worth it. My ability as a programmer has doubled. Also the teaching staff was absolutely incredible. Margo is the best professor in the CS department and the TFs were outstanding. If you liked 61 then I'd 100% recommend you take this class. If you didn't like 61, but might still be interested in this class, then shop it and read through the old assignments to see if you'd be down.
Best decision I ever made. It's the closest class to software engineering here. You walk away having a) glimpsed how computers work, b) built a pretty freaking cool piece of software c) learned how to really rigorously design, code, and test your work.Find a partner you're compatible with! Pair coding may seem to waste time but actually saves so much debugging and makes the 3109480384 hours per week much more fun.
tl;dr: Every other professor at this university should be ashamed at just how exponentially worse their courses are relative to CS161.This course is pretty hard. Across three programming assigments, my partner and I made ~250 git commits and wrote ~10k LOC. I've pulled more all-nighters on Saturday nights for CS161 than I have on any class on any night, combined.But, CS161 is really a remarkable class. Margo and the teaching staff care more about the material and your success in the class than you do about your own grandmother. You will be excited to attend lecture and section, the problem sets are ridiculously fun, and I am confident that, because of this course and this course alone, I can explain to any person just what the hell happens inside of their computer.My advice? Take it. Having to avoid alcohol for three months is a completely acceptable penalty relative to the literal orgasm that you will have when you see your virtual memory system succeed for the first time. Not only is this class the sole redeeming feature of the Harvard undergraduate CS curriculum, but it makes up for the shittiness of GenEds, expos, CS50, and all of the other nonsense courses at this university. It saddens me that it took 16 courses for me to find one that didn't make me want to blow my brains out, but I am glad that my salvation was CS161. CS161 is like losing your virginity with that hot girl in high school who never knew your name. For 12 weeks straight. And you get a free t-shirt at the end.
This class is a lot of work, and can be very frustrating, but is ultimately a rewarding experience.
What an incredible class. Yes, this course has a reputation for being overwhelmingly difficult and inaccessible, but I'd like to refute that reputation. If you've taken CS 61, you have the background for it, and as long as you don't take any other classes that require much time spent on them, you'll even be able to get a full night of sleep most nights (except close to when assignments are due). This class is totally worth it. You learn so much, not only about operating systems, but also about good software engineering principles and about how to work closely on a long-term project with a partner. Margo Seltzer is an incredible human being who really cares about each of her students and tries to make sure everyone is doing well. Rumor is that next year is her last year teaching the course, so I would definitely recommend it next year if you have the opportunity to take it with her. The TFs were so incredibly helpful (sometimes staying up at office hours until 5 AM the night before an assignment due to help us), and it was so great having all of them around as resources to help us.Some words of advice if you plan on taking the course next year: START EARLY on the assignments! I cannot stress this enough. Your success in the course depends on having a well thought-out design document so that it is easier for your reviewers to find mistakes in your logic (which will inevitably be present). Additionally, I'd recommend not taking this class with other time-consuming classes. Finally, go to office hours and sections! Your TFs are your best friends, and they are incredible in this class.
This course is hard, but you learn a lot. Not something to be taken lightly, but it's not impossible like some people say.
If you're a CS concentrator, definitely take this course!  It'll teach you everything you ever wanted to know about operating systems and more, but what I found even more valuable was learning how to work with a huge code base, how to coordinate with a partner, and how to design, implement, and test a large, complex project. And yes, the class was difficult and time-consuming, but it is definitely manageable as long as you don't procrastinate.  (I put in a couple of hours every day over the entire two-week period for each assignment and didn't have any trouble; groups that tried to do forty hours worth of work in a few days seemed to struggle much more.)
Thinking about 161? Get ready to sacrifice your social life. But don't be mistaken, it's totally worth it! You're going to have sleepless nights, but it's totally okay. Because when you see your mini operating system starts scheduling processes, moving memory pages in/out and miraculously coming back after crashes, you're going to feel like the king of the world (or operating system). Fundamentally, you will learn about how computers work. What could be better than that?
This class is infamous in the CS department. You can probably read the other reviews, and sense how extreme this class it. HOWEVER, take it. It is manageable. Yes, this will be the class that you put the most effort into the semester you take it. Yes, your social life will die. Yes, you might spend an ungodly amount of time staring at your partner, staring at the walls of Lamont, staring at your kernel and wondering why it's panicking. BUT, it's worth it. And, I believe in you. I came into this class very clueless (a n00b basically), but when I left, I was a much better programmer than I started. Everything that I learned in my other CS classes actually made much more sense after this class. This is the class that will leave you with a sense of accomplishment. (However, be aware of the flipped classroom style, and shop it to see if you like it or not.) I recommend this class with enthusiasm. I'm not sure if my answer will change or not once I see my grade... though I think I can be optimistic.
I appreciate the abstractions behind the operating system a lot more now, which I think is the biggest takeaway from the class. I'm not convinced that the coding part of the class was as rewarding as some people make it sound, since I never had enough time to iron out all the bugs in my system before submission (though to be fair I did learn a lot about how to be a better coder in C)
This is one of the best courses I took at Harvard. Make sure that you start your design docs early, and ask the TFs for help when you're confused.It covers a lot of material, and every assignment is really interesting in terms of teaching useful CS skills such as working with a partner, making design documents, communicating choices, etc. The assignments are hard enough that going in with a plan definitely helps.Every assignment was very interesting (my year we wrote synchronization primitives, added file i/o system calls, implemented pageable virtual memory, and added journaling to a filesystem), and encompassed useful types of programming tasks (writing unit tests, coding to a provided specification, writing complex tightly synchronized code, and adding functionality to an already existing system).I wholeheartedly recommend taking it, and will again say that you should start your design docs early. After the start of assignment 2, the difference between my best weeks and my worst weeks were entirely based on how good of a job my partner and I did on our design document.
The course ramps up in difficulty slowly but steadily. You'll spend maybe 10 hours on the first assignment (A1), twenty hours a piece on the second assignment (A2), forty hours a piece of the third assignment (A3), and eighty hours yourself on the last assignment (A4) when your partner realizes he no longer cares about grades and leaves it all for you.
Truly the best class I have taken at Harvard. I learned not only about operating systems, but about how to be a better programmer as a whole.
As you've probably already heard, this class is going to absolutely own your life.  Unlike what a lot of people have said in the past, I really don't think this course is for everyone or every computer science major.  This class is basically going to destroy a semester for you -- you will have time for almost nothing else. There will probably be about 4 50+ hour work-weeks, and the rest of the weeks of the semester between 30 and 50 hours of work.  Think about that for a second, and before taking this class, ponder seriously whether or not that kind of time commitment is worth it for you.  When you add extracurriculars and 2 or 3 other classes on top of that, it becomes difficult to continue living healthily.  Only take this course if you have a STRONG interest in systems, really in this material in particular -- for most people it just doesn't make sense, and if you're not ultra-motivated, this class is going to punish you even more than it already would.  Also don't be fooled by the beginning of the course -- it starts out extremely easy and gets more and more difficult all the way up to the end of the course.  All of those caveats said -- this is an amazing class. You won't find a nicer, cooler, or more crystal-clear lecturer than Margo anywhere.  The teaching staff was extraordinarily dedicated and for the most part knew their stuff unbelievably well.  David Holland (the TF who actually wrote the operating system and maintains it) is one of the most helpful, awesome people you will ever meet.  The material is also just incredibly interesting (for people who love systems).  In conclusion, yes, it is going to absolutely wreck your life, and no, not every person should take it (or is even close to being ready to take it...you really better have taken a bunch more CS courses than 61, and serious software engineering experience is really useful), but if you are sufficiently interested, this will probably be the best course you take at Harvard.
You will survive this class if you give it an honest effort, but you might not thrive. The work is tough, and there's a fair amount of out of class work aside from homework since some days are a flipped classroom. Additionally, the amount of effort you need to put into design is enormous as how you solve many problems are open ended. Despite its reputation, this course does not need to completely take over your life. Was I less involved on campus this semester? Yes. But both my coding partner and I both were able to take 4 classes and carry part time jobs and sleep/talk to friends (gasp). Watch out though, there's a decent chance you'll have a 40+ hours of work week once or twice.
161 was a hard class. Operating systems are hard. But if you're like me, and go into this class not worrying about your grade or having every bug in your assignment figured out (or even your system functional by the time you submit), then it's completely manageable. Just make sure your partner is on the same page as you, because they can make your experience a great one or a miserable one. Everything about this class really is great though, from the years of development put into the course's materials, structure, organization, and of course OS/161.
If you're a CS concentrator, don't miss out on this class. Operating Systems is such an amazing field. I took this class as a senior and only wish I'd taken it sooner. I learned so much! Yes, the workload is heavy, but not unreasonable. Make this your one hard class, take some gen eds for filler, and you'll be fine.
There is some truth to the rumors for this class.  To simply pass the class, you will spend a LOT of time trying to figure out what you need to do and actually finishing the assignments.  If you want things to work perfectly (hint, they won't), you will spend even more time.  You will stress out.  You will lose sleep.  What you will get though is possible the best CS experience you will get at Harvard.  You will become a better programmer.  You will understand how operating systems work (and be able to read academic papers on them).  You will laugh when Murphy's law hits you and the TF helping you (the staff is absolutely amazing).  You will feel the largest amount of elation when you get barely working code.   It is an incredible experience and I have no regrets taking this class.
Take this class. It makes you a better programmer by a lot. You spend long nights on psets but everyone who takes it says it is worth it.
Take this class! I know I regret not taking this class earlier. I learned a ton about systems, good software engineering principles, debugging, C, operating systems, how a computer really works as well as how to work efficiently with a partner. Margo and the TFs are awesome! Seriously you will not find a more rewarding, challenging, fun and engaging class at Harvard. TAKE IT!
THE CS class to take if you are a concentrator. If you are even remotely interested in this class, DO NOT wimp out because of the perceived difficulty. It is well worth it, you learn a lot, Margo, David + the TFs are there for you at 5am in the morning always, and the struggle builds character. I'm serious. Even if you don't think you're going to work in systems later, having practice designing lots of moving parts within a huge codebase is going to come in handy if you end up using your CS degree regardless of what kind of code you are writing. CS161 will humble you and make you a better programmer. More humble and thoughtful programmers are exactly what we need more of. Take this class.
CS 161 was probably the best class I've taken it Harvard so far. If you're looking for a class at Harvard that will actually make you a better programmer and prepare you for software engineering in the real world, I don't think there's really any choice outside of 161. Being forced to develop a difficult project (on a team) over the course of a semester is an incredible learning experience, even if you think you're already a decent engineer. While you likely won't be developing another operating system after college, the skills you learn about good software engineering are extremely transferable to other software projects.On top of that, 161 gives you a great base of knowledge about how computers actually work from the bottom up. While the OS is probably a huge black box to you right now, after taking 161 you'll know enough about OSes to have a decent understanding of how Mac OS X, Linux, etc. actually works. You'll also know enough about the field to read and understand new systems research. In fact, Margo tends to include a question on the final each year that asks you to read and understand a paper about a new idea in systems (verified via some not-so-bad comprehension questions).That said, the rumors you've heard are mostly true. CS 161 will take over your life for a semester. During the rough weeks, we easily spent 30 hours working on our OS (fortunately there's about a one week break between each of the three major assignments). This might sound scary, but if you put the time in, it's totally worth it. Time spent on your OS will hopefully be a lot of fun, as it was for most of us this semester. I used 161 to procrastinate on work in my other classes pretty regularly because it was just so much more rewarding than my other work.Lastly, if you have /any/ questions, you should feel free to reach out to Margo (the professor). Margo is an incredibly nice person, and will answer any of your questions about the class honestly. (She's also huge deal in the systems world, so you'll be learning from a world-class expert if you take 161.)
I'm too tired to write a detailed review of this class, but I agree with pretty much everything that was said in last year's Q guide.
Make sure you don't take any other classes at the same time as 161.  If you do, know you won't do any work for them.  Keep in mind that this is 90% because 161 is amazing and you wont want to spend time doing anything else, but also that it is 10% because you will literally have negative 5 hours a day to do anything else.
If you're not a hardcore software dev already, you will be after taking this course. It's tons of work (30-40 hours/week on average, peak of ~60 hours/week), but well worth it.
Where else could you find a course where staff responds to your questions 3am on Piazza in 2 minutes?
You know what this class is. I highly encourage all CS students to take this before graduating. Set aside a spring semester in which you can take three easy-ish classes alongside this one and buckle down.
If you enjoyed CS61 and think that was enough--that this will be too hard/painful--that isn't a reason to not take this class. You will come out a real programmer after taking this class. And you will feel like a systems boss. Besides, the course staff is amazing. They are there to help you every step of the way. They WILL fix all your bugs because they have seen almost all of them. I think I learned the most about coding during my time at Harvard (as you would on a CS internship) from this class. Prof. Seltzer is AMAZING at teaching. She is so good at explaining things that you will go to her expecting to spend 30 mins in her office, but you will be out in 5. I am seriously impressed by how she makes all topics really interesting. The course staff really respects the students' time and tries to make sure that nothing they teach will be a waste of your time in terms of the assignment or life as a CS person.And if you're wondering whether sleeping and eating three meals a day are possible while taking CS161, I want to tell you that it is (I even had some time to be social--what??). Even if you started with CS50. Even if you don't think you are an expert programmer. Even if you, like me, didn't think you could handle the workload. Just don't take another heavy-workload class with it (and by that I mean any class that has a workload of >10 hrs a week).This class is so applicable. Even the papers you read are applicable to things you will do whether you plan on working or researching. The "lectures" are super-interesting.Last, but certainly not the least, choose your partner wisely. They should have as much time/motivation as you do to meet/devote to the class. If not, make sure you work well with them at least.Oh and read all the code and make sure you know how it all fits together before/while you write your own code (this is especially true for the final file systems assignment). Do NOT jump into coding without understanding how all the pieces work together to give you a functional file system.
BEST CLASS AT HARVARD! While this class does rightfully have the reputation of killing your semester, it is a must take for any computer science concentrator who is even remotely interested in systems. Margo, David Holland, and Dan Margo make an incredible teaching staff. They are so accessible and just flat-out fun to hang around. It is definitely the closest I have gotten to a teaching staff. The bulk of this class comes in 3 assignments. While the first assignment is by far the easiest, it has its challenges in maneuvering the seemingly foreign source code for the OS and also in getting used to working with your partner. The second and third assignments will consume your life. But you will be a better person for it. You are never left to rot by the teaching staff. They are accessible to answer questions at literally every hour of the day leading up to the problem set deadlines and even extending past them (when you take your late days).tl;dr If you are interested in learning WAY more details about many ideas introduced in CS61, you will not regret taking this class. You will walk away having a completely changed perspective on computers. But, this is very time consuming so make sure to balance your schedule.
This is perhaps the best computer science class at Harvard. The assignments are challenging but really fun - you get to design your own operating system and really get to know your machine.
If you are interested in systems then TAKE THIS CLASS. The time you put in will be totally worthwhile, though it is a lot of time. I only took two other classes while in 161, which was really helpful, so do that if you can. The learning to hours ratio of CS161 is great despite the number of hours you put in -- you learn a ton about operating systems and about how to be an effective software designer/engineer in general. Margo (she is inspiring!) and the course staff were all INCREDIBLE; they were very generous with their time and knowledge and made it really easy to ask questions. I was very nervous when I started the class, but knowing that I had such a strong support structure eased my nerves in a big way. Partners are really important, so it's great if you take the class with someone you know you want to work with. Finally, don't think that you have to be a 'crazy CS genius' to take 161 -- there isn't a lot of prior knowledge that's needed and the course staff is there to help you every step of the way.
This is probably the most time consuming class I will take at Harvard. If you liked 61, I would definitely recommend taking this class. You grow so much as a programmer throughout the course. You'll also become very close to everyone in the class as a result of struggling over the assignments together. Margo also books a room in MD the day before assignments are due from 8pm to 8am so everyone can work together. This class is *a lot* of work, but definitely worth it! Any coding project from now on won't seem quite as intimidating after building an entire OS!
What you've heard is real. Pretty much all of it."It's a ton of work" - not much to be said, it is."It's the best CS course at Harvard" - there's a lot of good ones out there, but few as rewarding as this one. If you want to do further work on systems, this will also be true for you."The course sucks" - this could be true too honestly if you shouldn't be taking this course. People self-select for this class, and that's for a reason. This means 1) don't take it without the right background (CS61, or a high degree of comfort with C, Git and GDB), and 2) don't take it if you're not up for many sleepless nights and a lot of work.With that said, this is an amazing course. You do learn a ton, and by the end you feel ready to take on any systems projects in the future. Mickens is an absolutely amazing professor, with the most entertaining lectures in the CS department bar none. And yes it's a ton of work, but people can often still manage to do at least one more challenging CS course, and two other regular-load courses. ("Manage" =  you might have to spend a couple all-nighters on occasion, but still stay on top of things)
Great lectures but if you're just here for lectures you might as well learn elsewhere. The class is focused on the coding assignments, which you will need to be quite passionate about since they take very long, require a lot of focus, and may feel wrong when your system doesn't run as well as you might like. Don't take the class to force yourself to program or really care about this stuff: this class is great for people who really like the long, tricky programming assignments to make something impressive work. Otherwise be wary of what you're getting into.
IF you care very much about systems and can sustain that interest over the course of a very long semester, you should take this course. However, it is very easy to burn out on, and can become a nightmare if you lose interest.
Believe every terrible thing in terms of workload that other people told you about this course. It is TRUE. I definitely pulled all-nighters to trace a bug. I definitely spent 70+ hours one week on ASST3 (virtual memory). I definitely bonded with my partner more than with my girlfriend (with whom I, incidentally, broke up during the course). You want to come in the course having someone equally good and responsible as your partner. I was tremendously lucky to have met my partner in CS 61 and did not regret becoming his partner for 161. Communication between partners is the key to this course. Both of you should support each other during the time of adversity, usually 2-3 hours before the assignments are due. Other than that, please, don't take many hard courses, I am sure you can handle it. I am just not sure if you can enjoy and take in as much as I did from CS 161--arguably the best and hardest CS course at Harvard.
this class was super fun but super stressful at times. take it with someone you like!! it will be miserable if you don't like your partner. a very good and rewarding class that is challenging but definitely worth it. you will be best friends for life with your partner when it is over! :)
Best class I have taken at Harvard. Treat it as a theoretical class -- if your design docs are excellent, then you should have no problem implementing the assignment. Too many people wait for the programming part to sort out logical aspects. Do that in advance! There is a pretty large variance in the amount of time this class takes. For us, the reviews from previous years overemphasized how much time this class would take.
This is a very hard but rewarding class.  The psets are well designed and it will teach you a lot.  This class is definitely a lot of work, but the teachers and TFs try to make it a painless as possible, and it feels really great at the end of the semester when you put together your own operating system.
CS 161 is hands down the BEST CS course at Harvard. You will come out of it as a significantly better Computer Scientist / engineer. It will help you reason about concurrent code in a large code base, which is essential if you ever want to work in industry. This being said, CS 161 is HARD and time consuming. If you take it, then it will be your life. In order to survive CS 161, make sure that youA) Take a light courseload otherwiseB) Have a good partner in mind before committing to the class. Without a good partner, 161 will become impossible.
This class is really really hard. It's not the concepts that are necessarily hard, but the fact that you have to implement them and deal with the hundreds of bugs that will inevitably show up. When I first took it, I saw reviews that said people spent about 30 hours per week on that class and thought they were just exaggerating, but they weren't. Expect this class to take up your life whenever you're coding for an assignment (generally 2/3 of the weeks), and about half of your life even when you're not coding. I know this sounds horrible right now, but in the process of designing code probably an order of magnitude larger than code you've written for any other class (and maybe even for an internship) you definitely get a lot better at design and coding in general. I'm still not sure if it's entirely worth it for all of the time you put in, and that's a decision you'll have to make for yourself, but I will say that if you do, Mickens and the TFs are an amazing support every step of the way. There's been countless nights where Mickens or TFs literally stay up until 4 am with you debugging your code, and I've never seen that kind of dedication to a course before. I'm sure there's some kind of Stockholm Syndrome happening here as well, but overall I'm really happy that I decided to take this class.
The class is quite good, and it will make you a much better systems programmer (and a programmer in general). However, before you show up to shopping week, you really need to have a good partner. While you don't need a partner for a couple of weeks, a majority of the class isn't really doable without a good partner. So get a good partner or don't take it (unless you want even more stress).
As long as you have a good partner and budget your time well, you can definitely survive this course without feeling miserable (except for maybe while you're working on Assignment 3). I learned more from this course than any other CS course I've taken, and I didn't regret enrolling once!
Prof. Mickens is the greatest, so lectures are awesome. I don't really think I have anything to say about the workload or the difficulty that hasn't been said before, so here's some miscellaneous advice: 1. Don't pick someone as a partner unless you've worked with them before. I picked someone who I had heard from others was a good student, but I ended up having to do everything for him. 2. If you can, get experience building and debugging a serious systems project before you take this class. The best way to do that is to take CS165 in the fall before taking CS161. That way, you will already have a lot more C and GDB experience. 3. Go to office hours while you're working on your design documents. You can run ideas by a TF to catch bugs in your design early on. Since most people don't take  the design documents as seriously as they should, no one will be at office hours and you can basically bounce ideas off of a TF for two hours.
Know that this course will take as long as everyone says it will. Most weeks are 20-30 hours, broken up into 4-5 hour chunks per night. It's definitely doable if you're willing to put in the time. Most of the material is straightforward and logical, if occasionally very complex, and drawing diagrams and workflows help a lot when trying to break down the logic. I would highly recommend this class to anyone who wants a solid understanding of how a computer actually works, from how different processes are scheduled to how computers use RAM and disk memory. Also, yay to now understanding all of the different things they tell you about a computer when you buy it. Though this course takes a lot of time, and if taking it, one should plan a course schedule accordingly, it's not conceptually as hard as CS 181 or CS 124, and even if you didn't do really well in CS 61, I would say this course is doable if you review the 61 material before taking it. As plenty of people have said, pick a good partner you know you can work well with. And is someone who doesn't stress under pressure.
CS161 is an excellent class that forces you to be careful and precise in your coding and teaches you how to program in a complex and sensitive environment. Professor Mickens is a fantastic lecturer who makes even dry concepts of operating systems very entertaining. If you are interested in systems programming, this is an excellent class to take.However, to a much greater extent than most other CS classes, this course is not for everyone and the programming assignments will be an excruciating experience unless you have a genuine interest in systems programming. Substantial C programming experience (at or above the level of CS61) is absolutely essential. Pick a good partner, and don't take this in combination with another difficult class.
If you're at all seriously interested in systems programming, this course is basically a requirement. Even though it's very time consuming, the individual topics aren't necessarily difficult to comprehend and implement. Mickens is a fantastic professor and extraordinary lecturer, and even if you don't like the lecture topic on a given day, Mickens' lectures will keep you engaged.Also, even though everyone says this, it's very true that by the end of the semester, you'll feel a sense of triumph and pride of adding a significant part to a kernel. You'll gain not only a better understanding of C, but also large programs in general. You'll feel confident with multi-threaded code that it'll be surprising how easy single-threaded code feels to write.Do yourself a favor and take this course.
If you want to spend significant amounts of time writing (and especially debugging) the essential parts of an operating system, then definitely take this class.
CS161 is a natural and comfortable follow-up to CS50, typically taken in freshman spring as a gateway into the slightly harder CS courses. Few prerequisites exist: extensive systems knowledge is recommended, complete familiarity with C programming, complete social isolation (beside your partner, whom you will vow never to see again after the course ends), and willingness to dedicate dream-time to think about code (this will happen regardless, so technically not a decision you can make). Problem sets typically take a comfortable 20 hours for comprehension and design doc write-up, and 25-70 hours for the actual coding (spanned across two weeks, so theres plenty of time). Even though this is an easy course, you will learn a lot! From implementing system calls to your own non-functional virtual memory management, to learning everything you didn't know about filesystems, you will emerge from this cave with newfound power and knowledge, which you can apply to any programming job you have, or simply brag about it on your Tinder profile. The teaching staff will pull all nighters with you to wipe away your tears and keep your belly full. You should take this class!
This is the most useful and applicable course for your work as a programmer/software engineer/computer scientist you can take at Harvard. James Mickens is a fantastic lecturer, and no matter if you go into theory or something more applied, understanding how an OS works is vital to your career.
CS161 is an interesting course insofar as its difficulty comes mainly from the assignments and debugging edge cases (race conditions, not remembering to zero out memory, etc.) than from the actual concepts in the course. Lectures were mainly fun and relatively easy to understand; the real thinking comes in when you need to understand the codebase (OS161, which is very well documented), design a solution to the assignments, and actually implement/debug your own code. Even then, the TFs will often tell you nearly exactly what to do if you ask (so we ended up not going to office hours/section very often). Most of the code is actually provided for you already, so the staff seem to do most of the work for you.It is also important that you find someone you can work with well, because the frustrations of late-night debugging can make even the most patient person irritable and annoyed.I would recommend this class to anyone who is willing to put some time into writing and understanding an operating system (it actually doesn't require too much, if you think before you code), and who wants to delve deeper into systems. If you just want a broad overview of OS, CS61 is probably enough for you. I found that, in the course of the semester, I filled in many of the holes/tiny details that were left out on CS61, but in terms of concepts, I didn't learn anything entirely new except for the file systems unit. Personally, I thought coding/debugging was the most engaging part of the course; if you don't enjoy this design/implementation process and are more into theoretical concepts, this course might not be the one for you.
This is a really good class. You work a ton, but if you budget your time you won't have to take any all nighters (I didn't have to). The teaching staff were very helpful--Prof. Seltzer, Prof. Mickens, and all the TF's were great. I'm pretty sure only Prof. Mickens is teaching the course next year--he is a really entertaining lecturer, and focused more on the nitty-gritty parts of writing an OS. So I'm pretty sure for next year the class will be a bit less theoretical and more detail oriented (although it is already a pretty non-theoretical class). You can probably manage this class. I haven't even taken many CS courses here and I was mostly fine. Just listen to what the teaching staff say--go to section, write good design docs, and budget your time.
You should definitely consider taking this class but only if you have enough time in your semester to dedicate your time to this class.
Someone did some analysis of all Harvard classes last semester and demonstrated that CS161 is literally the highest workload class that Harvard offers. That being said, the workload isn't constant - your weeks will probably be roughly 1/3rd 10-15 hours, 1/3 20-25 hours, and 1/3 30-50 hours (yes, you will likely have at least one or two 40-50 hour weeks unless you manage to write extremely bug-free code). Putting wayyy more time than would seem necessary into your design before coding will help with this. Also, consider taking this class on a 3-class semester, my partner and I both did this and were very very glad to have done so (although it's definitely not necessary to do so).With the aforementioned warning about workload out of the way, however, this class is hands-down the best course I've taken here at Harvard (certainly the best CS course). There are so many practical CS (and general life) skills you learn in this class, like design, time management, debugging, multi-threaded programming (holy s*** will you be better at recognizing race conditions after this class), using large codebases, working with a partner (there's a reason why they call it a "partner divorce" when you have to get a new partner, I probably saw more of my partner than my girlfriend this semester), etc. If you're ready for it and you like systems programming, take this class. It's worth it.
I won't lie to you by telling you CS 161 is easy. The class takes more time than probably any other at Harvard. But don't let that scare you off. Although you spend a lot of time on the assignments, none of the material is too conceptually challenging. CS 50 and CS 61 probably together provide you with enough know-how to be able to tackle anything that comes up in CS 161.CS 161 is probably the most valuable course I've taken at Harvard so far. It puts the hairs on your chest, and earns you your credentials as a programmer. The course staff are some of the best in the CS department, and the community is unmatched.
Find a partner well before the course begins. You probably shouldn't be best friends with your partner before the class, to minimize risk in case things go south. It is of the utmost importance that your partner be motivated and have good work habits.
This class will definitely make you a better programmer, but it will also suck your life away. I would recommend this class if you don't mind working extremely hard and also want to learn about the inner workings of a computer.
HahahhahahahhahahahahhahahaWelcome to programming hell, where the design docs that were supposed to be your savior turn out to be horribly underdeveloped. I've never had such a difficult class in my entire life, and never will again. You will lose track of your life, your time, your relationships for this class. You will either love or hate your partner (I HATED mine by the end with the passion that a thousand suns could not match, mainly for not doing his share of the work which I had to effectively kill myself to try and fail to make up), depending on how your psets go, so it's essential to pick someone who will be willing to work their ass off as much as you, and is hopefully substantially more competent. Debugging obscure code is horrible, but dealing with a nonresponsive partner who procrastinates and fails on their share of the work is just as bad. Faulty implementations will fail merciless test scripts that determine pset grades, and there will be nobody else to blame. And then you will hate yourself for a week, and then keep moving on for the next pset.Psets are generally 1 week for design doc making, 2 weeks for the actual coding. Allocate 2 weeks for design docs, because you should have as detailed as a design doc going in as possible. Do more do more do more because this is where you will have a chance to be saved by your TF. 14 pages minimum. Define all your functions and look out for being too overly high level, realizing when you are actually trying to implement it that you have no idea what you're doing and always assumed "we'll do X to handle the Y case" would come naturally. Especially for address spaces...The exams are...okay, manageable. You always knew pset scores were the bulk of the grade.Take this class only if you are a masochist and have a deep passion for operating systems.
This course is pretty awesome. The workload is intense, and you better be prepared for hours of debugging. I would definitely say take this course for the staff. The TFs were amazingly helpful, and Margo and James are some of the best professors I've had here at Harvard. It's going to be a tough course no matter what, but if you enjoy the topic, don't second guess taking it.
This class is difficult and time-consuming, like you've probably heard. It will take a good chunk of your waking hours for the semester. That being said, if you're willing to put in the time the class is very rewarding. I've learned so much more about operating systems and programming in general. You'll find a new appreciation for good comments (thank you David Holland) as you work with a large base of code that is not your own. Since that is a skill you'll need for CS in the real world, it is good to start on a well-commented code base to get used to it. You will spend more time with your partner than pretty much anyone else in your life so try to pick a good one. If you make sure you put time into the class consistently, you won't have to do the crazy all-nighters people talk about (I actually managed to sleep pretty well all semester). It is a lot of work but it is definitely worth it. I am much more confident in my own ability to code after this semester and I have learned so much. This is one of the best classes I have taken here, don't miss out on it!
Building a substantial portion of an operating system is a very rewarding experience. Margo and James are incredibly supportive and invested in making the class a positive experience for students. A lot of work, but you probably knew that already =)
If you have the necessary programming background required to take this course, you may have a better experience that I had, but I was unfortunately somewhat unprepared for the psets of this course. Make sure you feel really comfortable with assignment 1 and assignment 2 before deciding to take the course, and if you still want to take the course, do yourself a favor and take it pass/fail.I think I would have had a much better experience if I had waited an additional year before taking the course. That being said, I learned a ton, and I think my programming ability has increased dramatically as a direct result of this course alone. The TF's are actually unbelievably fantastic, and the professors were both clear, nice, accessible, wonderful people.
I think I'm going to be the only person with this opinion, but beware of the Stockholm syndrome! You may learn a lot from this class, but that comes more of a result of putting in lots of time towards it. If you have other hobbies and passions please reconsider this class.
This is an amazing class. You will learn so much in it. The time commitment is simultaneously better and worse than everyone says (depends on the week), be ready to clear your schedule for a week if this course calls for it.
This is a course in particular about the monolithic kernel. It may be best seen as a very large programming exercise. Take this if you're down to program! Don't take this if you would rather study theories about OS!
The assignments are manageable if you start early enough. The exams test material that only shows up once in lecture while you're busy thinking about some other topic for the assignment. Both professors are great lecturers, but I'd be wary of Mickens' inexperience with the assignments for next year.
This course is ... hard. As a 55 alum, this class will require even *more* time, if that's possible. However, it is not quite as rewarding. A lot of your debugging time (which is a lot of it) will feel like it could have been prevented with a much more careful hand and a better ability to hold all the state in your head. Take this class if you feel uncertain in your programming ability - you will no longer afterwards. ***Make sure you have a good partner who matches your work style!!!***
This class is hard.  Don't let anyone tell you otherwise.  It's still an incredible course - I learned so much and have definitely become a better programmer because of it.  The teaching staff are god-like and have saved my life so many times, and Margo and James are great professors.  Should you choose to embark on the grueling journey that is CS161, do keep in mind a couple of things though: despite what some people might say, you can have a life and take this class.  Don't take other hard classes at the same time, though - there will be weeks that you will simply have to dedicate solely to this class.  40 hour work-weeks and all-nighters are very real when a problem set is due, though the assignments are spaced so that you do get a short break in between.  Be prepared to start early since you cannot afford to procrastinate - you can start a pset early, work on it for 40+ hours, and you'll probably still be debugging by the time it's due.  Also - find a good partner, that can make or break your experience in this class.tl;dr this class is hard as hell but if you take it seriously and give it your all it's manageable and definitely worth it.
I don't even know where to begin. I'm going to be honest, this class is very painful. It dominated my entire semester. I spent more time with my 161 partner than my SO. Every single free moment I had in the day I had to spend on 161. My social life this semester was non-existent. With all this said, however, I am glad I took 161 and I think I would consider taking 161 again if I could go back and do it. Beside that I am proud to have survived 161, I have become a way better programmer. I feel and am more competent and confident as a programmer. Was that worth the cost of the amount of time 161 takes up and the trade-off of that time compared to other things like hanging out with friends? I'm not sure.  That is up to you. But if you're going to spend that much time on any class, spend it on 161. 161 has an amazing course staff, amazing material, and the class is amazing. Even if it feels like everyone around you is a better programmer and more experienced, who cares. What matters is that you learn a lot from this course and trust me, you will.
Great class. Not as scary as the hype. 20 hrs for design doc, 50 for coding for each of the 3 major assignments.
Take this if you really want to understand what an operating system is, does, and how to build one. The staff is amazing and the professors are the two best ones you can get at Harvard. Do make space for this course on your schedule, though -- it will take a lot of time.
It'll be the hardest course of your Harvard career most likely. But also the best. It does ramp up hard though, and ASST3 and ASST4 are much harder than ASST1/2
Everything you've heard about CS 161 is true: it's hard, it's rewarding, it takes a lot of time, etc., so I won't reiterate that here. Instead I have two things I want to get across that I didn't see in other comments from last year. First, it's not as much work as people make it out to be. I've been able to have an active social life, do well in my other classes, go the gym regularly, etc., and still do pretty well in CS 161 without being some sort of genius. If you've managed your course load relatively stress free in the past you'll do fine taking CS 161, if you've struggled in the past, you'll struggle in the future regardless of whether you're taking CS 161 or not. Second, if you're a senior I'd really reconsider taking CS 161. Yes, the material is useful and interesting to know, but I don't think it is life changing unless you're planning on working in something related to operating systems, and I don't think the time/effort is worth it during senior spring. I realize this may appear to contradict my previous point, but it doesn't. Yes, the workload is manageable, however, it is still more work than any other course I've taken at Harvard and I don't think it's worth it senior year when you probably would rather spend time with your friends.
This class is hard and the assignments will take so so long, and I probably didn't get a great grade. However, I do recommend this class - what are grades anyway? :) I learned a lot, and have gotten so much better at C.
The assignments are hard but definitely doable. Most CS assignments at Harvard are one-off in the sense that you would complete a pset and never think about it again once you submit, but in this course you work on the same codebase for the entire semester so things like good design and code organization actually matter. In my opinion, this makes the 161 assignments a great preparation for the real world for those planning to write code beyond college.
Pain is weakness leaving the body. Take cs161.
