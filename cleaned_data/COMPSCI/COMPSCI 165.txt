It's a class about data management design. You will want to be comfortable designing things and arguing for that design and against alternative designs. It's not just about making things work. It's about doing it in a way that works best.
This is the most practical computer science course I've taken as a computer science concentrator.
If you're new to CS, this might be a good class to take to get a better feel for the concentration. As a more experienced CS concentrator, you will be bored to death.
It's a good, low workload, systems class with the opportunity for a fun final project.
Margo is awesome!  Her enthusiasm turns what some might consider a boring topic into something quite interesting.  The knowledge gained is also invaluable for anyone planning on being a software developer.
Great course. Great teacher.  You should take it. Compared to other computer science courses, workload is manageable.
Margo's one of the best professors in the CS department - if you're a CS concentrator you should definitely take a class with her.  Even if you're not interested in data management, there are some useful things you can pick up in 165.  It's also a fairly easy CS elective.
Ambiguous questions galore.  Also, while some of the stuff you learn is nice to know, you don't walk away with any new skills.
Interesting perspective on different approaches to data management. Take it if you want to learn about different storage technologies people use and what's behind them.
The course matter is fairly interesting, but the problem sets were not especially valuable if you already had exposure to relational database problems.
Asst 4 sucks
Margo is a great professor that will make you understand the different ways to approach a problem. The course is all about picking the best possible solution for a problem among many different options, and the course teaches very well how to decide which the best solution is.
The course will give you a very solid understanding of data management problems and design decisions. Professor Margo Seltzer is very friendly and creates a very collaborative discussion environment during lectures, which are a lot of fun. The course's final project is an excellent opportunity to find thesis topics. You can learn a tremendous amount from this course as long as you put in the effort in the assignments and pay attention to readings and lectures. It's one of the most rewarding classes I've taken in college.
It's a good course (caveat: by its nature, it holds less appeal for those whose interests lie outside systems). Prof. Seltzer is excellent.
Margo is reason enough to take the class. But, read over the syllabus and make sure you understand what material the class is covering. Be sure that you're really interested in the guts of transactions and concurrency control, otherwise you're in for a really dull month in the middle.
If you like in class discussion and don't mind ambiguous problem sets that may or may not be solvable using in-class methods, this is the class for you.
If you have always used a relational database to solve all of your data management problems, then you absolutely have to take this class.
(Especially to women, since there were none) The course is interesting, not that hard, and very applicable.
Great professor, really interesting and useful subject.
This class has been my favorite at Harvard! I was so satisfied with what I learned and how much better I became at C programming and software engineering in general. Professor Stratos is amazing and the TFs were great. The atmosphere of the class was very relaxed and it was all about maximizing your learning.
This class is amazing. You will learn so much.  Lectures/readings and the project are orthogonal. Start the project early. Challenge yourself to win the leaderboard.  This class is HARD.
Carefully consider the requirements of the class before you take it! Have a clear conversation about the expectations for the course and make sure to work on the final project throughout the semester. Also, attend lectures for the group discussions at the end - it will be helpful for the midterms (which are hard and pretty harshly graded).
The project is a lot of fun, and the exams are not too bad. There was some disorganization in terms of project tests and expectations, but I expect it to be much better the next run (since this is only the second run of the course).
This is a great class where you get to learn the design tradeoffs when thinking about databases. The class format is very flexible so you get out what you put in. Don't procrastinate on the project, and you'll find that implementing your own column-store database is very rewarding.
CS 165 is basically a semester long quest to build your own database. You'll need as much systems programming experience as you can get, but otherwise the course provides all the necessary background. Stratos is very friendly and devotes a lot of time to helping students at office hours. Time commitment is quite heavy (unless you're super experienced with C), but I found the class to be very rewarding. Highly recommended if you have time for a heavy systems class in your semester.
Do not leave the project until the last week during finals. It is critical to spread your work out over the semester and utilize office hours to fix bugs and go through inevitable architectural changes.
Probably the most interesting CS course I've taken at Harvard.  Stratos is an excellent instructor.  I've learned so much from the course and the open format is very conducive for learning.  The project is a very hefty part of the class though and will require a lot of time to complete well.
My goodness. Recruiting might take over your life if you're a senior, but do not let yourself fall behind on this coursework. Many people let that happen this semester, and they regretted because the project ended up being incredible and very thoughtfully prepared, but it's hard to provide work in kind of you're cramming this 200-/300-hour project into the last weeks of the school year.
The course says it does not have deadlines until the very end, but it can benefit from having deadlines. Try to get the milestones don by their expected due date so that you don't have to suffer at the end. Beware of the fact that programming anything will almost always take more time than you think it will. At the end you walk away having written thousands of lines of C and a comprehensive understanding of modern data systems.
Start on the final project early and follow through with milestone deadlines! Many made the mistake of not putting in consistent effort for the class throughout the semester (which is definitely necessary) and waiting for work to pile up at the last minute. Maturity/experience in software development would be helpful before taking this course, unless you are prepared to put in quite some time and effort throughout the semester in learning to program in C. The database component of the class was super interesting though and I came out learning so much about the field!
Take this course but be sure to know what you are getting into. Take is as one of your main courses and not as an elective on the side. Start coding very early on to get an idea of the expectations and to not fall desperately behind.
Please, please, please keep up with the project! It's absolutely essential that you do so. Please, trust me, you will NOT finish it in the last week.If you find that the project is not your thing, talk to Stratos. He is the nicest professor in the world and will find alternatives for you.
Stratos is super chill, but this is still not an easy course. Even if the milestone deadlines are provisional, you should strongly consider following them. Otherwise, you'll get really far behind and find yourself working on the project for 100+ hours in the ten days before it's due. Also, you really only get what you put into this course. Seriously, allot yourself the time to take it seriously. You can be lazy and get away with a decent grade, but you can also apply yourself and come away as a fairly serious systems programmer.
This class is quite amazing.  I came with minimal systems experience (hadn't taken 61, didn't remember any C from 50, etc.), but Stratos takes your experience into account.  I do believe that I would have enjoyed this class more deeply if I better understood what was going on in the classes, but the fact that I still enjoyed it and learned wonderful things shows that the class is amazing, Stratos is amazing, and the topic is actually very interesting and learnable even without the required background.The class definitely offers all the resources you need to get your project done, but I will say that I was a lazy student and didn't do anything until much later into the semester!  Learn from my mistakes and start earlier so that you can fully utilize office hours, enjoy lectures even more, and learn more!Also-- if I haven't said this already, Stratos is amazing! All professors at Harvard need to learn from him.
This class is extremely open and centers around the student's learning. You really get what you make of this class. Stratos and the TFs are incredible people to learn from as they are at the top of their field of research, so there is a lot to gain from this class. The content is extremely interesting and useful. As someone who is going into software engineering, I believe that along with ensuring programmatic efficiency, a conscious effort to minimize data movement helps significantly. This class really embeds that in students. An understanding of databases also goes a long way-- you're going to be working with databases for the rest of your life if you are in the tech field. It is important to understand the inner workings of databases, as poor data accessing can be the bottleneck of your programs. Stratos is also probably the nicest professor you'll ever meet. He really cares a lot about the students, and their takeaways from this class. He's really inspiring and a great person to get to know.
Start the course project early. Do not wait until the last minute. I do not say this as much because you will be punished if you start late but more because you will wish you started earlier than waiting until Thanksgiving to start it. This is because the project takes a long time, but more importantly because it's actually very educational and enjoyable if you put in the time! This project is very well-designed and all the course staff dedicate a lot of time to help you. I have never experienced a course with such tremendous support. Stratos and the TFs were all excellent in providing ample, patient support. I can definitively say that the amount of support for the course exceeded all expectations. I often wished we covered more material in lecture. I think we weren't able to cover as much for two main reasons: 1) spending a little too much time at the beginning of lecture reviewing a previous lectures material or talking about slides we've already seen 3+ times, 2) working on the in-class quizzes. I think we only need a maximum of 20 minutes to still get at least 90% of the benefits, but instead we sometimes spent 30 minutes or more. The course project was very well-designed and it was clear that the course has tried and will try to iterate and improve as much as possible. Despite some hiccups with the server tests, I think I learned a lot from the course project. I applaud the idea of a more open-ended exam, but I think that the exams could have better tested concepts (and more concepts) in the course had it been a little more structured. Again, start the course project as soon as possible. Don't worry about looking silly if you're only getting up the courage to start in October; better late than never and none of the course staff will judge you for it. They are there to help.
I think the assignments asked for too much--the assignments should have focused more on the actual database algorithms, as opposed to building all the glue in between (networking, rpc, threadpool, error handling, parsing, etc.). Because of this, I spent more time working on the glue than on the actual material in the class. I think this can be solved by giving some optional distribution code for the unrelated parts of the assignment so that students have more time to focus and optimize the database code.
This was the first year of this course, so it was kind of rocky. The overall assignment for the semester was to build a database system for storing integers, in C with no external libraries. This was quite challenging to do, but I learned a lot about system design and databases through this process. I imagine the course will be more effectively structured next year, but it is by no means an easy class.
This class was a bit of a mess this year (the first year its being run). The first assignment was way too time-consuming and not very instructive. It would have been better to have some distribution code, and have us build the more interesting parts of the assignment. Overall, the material is interesting, but the course was not very well run this year.
Good if interested in building databases.  focus is no longer on basic database usage and concepts in software engineering.  Hopefully, the workload will be more manageable and better structured in future iterations of the course.  Stratos and the rest of the staff were highly invested and definitely want the course to succeed.
This class was in its first new form this year, being about Data Systems, not databases. That being said, if you want a class where there's a clear correct answer and follows a textbook religiously, this is NOT that class. Stratos is very big on the discussion and working together in the course. It was cool being able to take conversations about topics in lecture and continue them during Office Hours with him as he explained about what related research is going on with that.You are expected to defend your reasons for why you built up your data system (all in C btw) in a certain way. And yeah you will be debugging for most of this class. So GDB and valgrind, and a lot of CS61 concepts will be your best friends if you choose to take this class. If that's in your wheelhouse you'll find this class quite rewarding. It's a really good feeling to go from 0 lines of code in March to a working data system that out performs MySQL in May!
This is a difficult, work-intensive course, and whether you find such work to be worth it depends on what you're looking for as a programmer. I did not feel comfortable with systems, and hadn't really had to design and implement a large-scale project from scratch before, so I found the class to be a really good learning experience. Building up your own codebase and having to debug/maintain it over the duration of the course is pretty difficult, but it also makes you really appreciate being able to work with a clean codebase. While the work you do outside of class is very implementation-based, the course itself focuses a lot on high-level design decisions (tradeoffs are everywhere!). DB cracking (Stratos's own research) is a pretty interesting topic, and it's pretty cool to see people creating algorithms for DBs that make intuitive sense (rather than it all being grounded in abstract theoretical math). The course + workload next year will likely more balanced, since Prof Stratos is receptive to feedback and will probably adjust things accordingly.
Don't just hack together code; think carefully about how to design your system and organize your code into isolated components
Very interesting course but definitely takes a lot of work
This was a great class, we learned a bunch of stuff that's so new regarding databases and data systems that most of the industry doesn't even use it yet. Also Stratos is great, really down to earth and a great professor. That being said, the workload for this class was literally insane. We basically have to write a version of MySQL, a feat that led to some problem sets to require 80+ hours of coding and 2000+ lines. My final database was 4,500 thousand lines and took over 160 hours to put this in perspective. You will not sleep, especially if you take this concurrently with another Computer Science class; I regularly went to bed around 4:30, having made very little progress from the previous day.
I absolutely, wholeheartedly loved 165!!!! That includes several late nights and OH with the awesome TFs and Stratos. This class made me think like a true computer scientist, increased my confidence in my coding skills, made me so proud for having built an awesome data system and inspired me to just look up cool things about databases on my own. A few words on Stratos. He is just the best. He is one of the nicest people I have met, devoted to make sure you LEARN rather than get a stupid grade and this just caused me to truly learn and appreciate the material. I dont think I have learned more in any other class at Harvard. Please go to his office hours, he is super approachable and just a sweet person overall. Really excited and looking forward to taking CS265 with him in the fall. Harvard needs more professors like him to inspire students! Also, Mike, Peter and Rob are awesome :)On the more practical side, you become really good with C, you understand how the memory hierarchy works, how databases are built, you build your own super modern column store database. Dont worry, I had no idea what a column store is and now I built a super fast one. PreReqs: CS61 is good but only because it exposes you to C. Other than that, CS61 concepts are not that important. Also, I think general CS maturity is necessary.TAKE THIS CLASS IF YOU WANT TO ACTUALLY LEARN SOMETHING AND BECOME A TRUE COMPUTER SCIENTIST!
Very useful, and the ideas discussed are interesting, but the workload is INTENSE.
If you are interested in systems, design, big data and of course databases themselves, this is class is for you. It requires a lot of work but really helps you see the details of the most frontier issues. It was a bit unorganized at first since it's the first time it's offered and there were different expectations.
The information presented in this class is interesting, but the class is going to need a lot of structural changes before I recommend it to friends. For an intro databases class, the assignments had too large scope and were too open-ended. We essentially built a small database system through the semester, and I spent over 40 hours on my system some weeks. Many of the assignments had us programming things that weren't core to an understanding of databases; having distribution code would have saved us many hours per week of unnecessary coding by allowing us to focus on implementing actual db concepts rather than just getting our system running. Feedback was also pretty poor this year, with comments/ grades arriving very very occasionally; I'm sure that will get better in future years though when the problem sets get more streamlined.
It is certainly a useful course, especially if you are interested in databases. Many topics (B+ Trees, different design paradigms) are pretty interesting as well. I felt the expectations of the course were somewhat unclear, and some of the material could be covered more clearly. The course workload was also heavily biased towards the start/middle of the course, although the courseload will probably be smoothed out in subsequent offerings.
