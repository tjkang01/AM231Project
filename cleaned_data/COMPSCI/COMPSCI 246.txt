This is a good course to match with one that has a heavy programming/problem set requirement.
Great class.  If you want to learn what is going on under the hood in the latest Intel processors, this is the class to take.  The lectures are easy to follow and the material is genuinely interesting.
Interesting and relevant topics - you learn about processor design in the 21st century. Not a lot of work early on in the semester but picks up towards the end due to the project.
It's a great course to get an appreciation for the attention to detail that is going on the CPU. Highly recommended for any computational scientist, even if they think they want to stick to software purely.
Requires a lot of background knowledge
This is a good course for getting a big picture idea of computer architecture as a whole, but really knowing how to do any of the techniques the course talks about is something you'd really have to teach yourself or do the final project on (there wasn't much guidance involved in the final project, just a lot of us figuring out how to do what the teaching staff had suggested from a high level)
This course gives a great survey of the technologies implemented in modern processors. The class is very interactive and the professor gives great lectures.
Useful to take in combination with Parallel Programming Course or  CS 205
Really great class to take as an undergrad. You learn a lot about the topic and get to read several important papers in the field. Relatively relaxed workload also which is really nice.
Great course! If you still think processors simply consist of transistors executing code, you should take it. In reality, the actual "core" part of a processor is relatively small, with the rest of the chip filled with branch predictors, caches, accelerators, buffers, reservation stations, and much more.
This is a really cool class. You learn a lot about the modern processor and other related topics (memory systems, multicore, etc.) and read some really interesting, important papers in the field. You can tell Brooks enjoys teaching this much more than 141, so the lectures are noticeable better. There were 2 homework assignments this year that we had 2 weeks for but only really required a few hours. You have to read 2 papers for each discussion, which is about 8-10 times for the whole semester, but that's not too bad. The project is very open ended, so it can be hard to choose a topic if you're new to the field. But you can choose something you're interested in and the expectations are very reasonable.
This course is useful as a survey of advanced computer architecture topics, but I would not recommend it as an elective unless covering these topics is important to you.
A great class if you liked CS 141 that requires fewer hours per week (though you should still expect to spend a decent amount of time on it).  There are only three homeworks, and you have two weeks for each, which is nice.  (Each is about the size of a CS 141 problem set, but with a big coding component.)  There is no lab.  This year, the final exam was a 10 minute oral exam with the professor, which was also nice.  There is, however, a final project, which will require a lot of time if you want to put together something good.  There are also about ten paper reviews, where you read two academic articles and have to answer a few questions about them before class.  This takes more time than it sounds like, but it is good to get more comfortable with reading and understanding academic CS writing.
