Great CS class in which you learn theory a bit and code a bit.
This is a very different class than any other CS classes you'll take - it involves lots of team projects and working with a large real-world system instead of fake problem set code.  It's a nice change of pace for that alone, but beware organizational issues and lack of feedback if you're really worried about grades.
Lots of fun, but be ready to contribute.
You will learn what it's like to actually program robots, and realize it's not very glamorous
It's always a hardware problem.
It sounds really cool, but was really frustrating at times. Robotics is really hard. Everything is much harder than you think. You have to learn a new language, a new system, etc., so the learning curve is steep, but once you learn it, it can get pretty interesting. There are lots of software and hardware limitations to your strategies though, which makes it simultaneously realistic and frustrating. The professor doesn't seem to actually do a lot of the actual robocup stuff herself. It is more the TFs that know how things work. The professor just leads paper discussions, which are interesting, but not always relevant to robocup.
We spent a lot of time working out some of the low-level glitches and kinks this year. Future offerings will probably be even better.
This course is pretty disorganized, but the TFs are good about answering questions and helping you, just make sure you use them. You get a lot of freedom as to how you want to go about completing assignments, but the time you'll need to spend on assignments varies dramatically from week to week. This class gave me some really unique experience, but I'm not sure I would do it again if I could go back. Also, it doesn't actually deal much with artificial intelligence.
I thought this class was a great chance to apply CS knowledge to a project, but it did at times feel like the course's direction wasn't very clear.
dont expect to learn "robotics." this class doesnt cover a lot of material in an accessible way.
You'll get tired of the E-pucks, but this class is mostly a lot of fun. I especially enjoyed coming up with hacks to reduce the complexity of the robot's tasks each week. Try to take this class with a friend you know you can work well with.
The idea of this course is wonderful, but its strengths are marred significantly by how horrible the robots used in the class are to work with. The course work always became less about implementing solutions for the psets, and more about finding ways to work around the horrible hardware to get the robot to do something along the lines of what you want it to do. I would have reservations about taking this class if I were you, and they still plan on offering the course without getting new ePucks, or different robots.
The class is really fun in terms of getting robots to do things, but ePucks are kind of terrible. Its a great class if like project-oriented classes with open-ended challenges.
Great intro to robotics. They cover a wide range of topics and you learn a lot. It's also cool to watch your robot in action.

My only reservation is that working on the problem sets can be very frustrating because you spend the majority of your time working on calibration or hardware issues.
The class offers the opportunity to experience the highs and lows of developing programming for a robotic platform.
There are a couple interesting problem sets, but you might not learn as much as you hope about multi-robot systems. 80% of the class hardly mentioned multi-robot systems, and the last 20% only touched on it, but the final project was basically programming a single robot multiple times. Programming the robots was often tedious and frustrating for several reasons (e.g. slow debugging, hardware issues, and your ambition is limited by the memory and computing capability of the hardware). Don't expect to program any super sophisticated algorithms on the robots; it probably won't work, but even if it is possible, you will encounter annoying bugs long before you get to such advanced optimization.
It's very fun and makes you think hard about the problems in a way that you won't in your other CS classes that are more focused on learning specific concepts from a textbook.
This is a great class.  The labs are very hands on and are both challenging and rewarding.  That said, working with the robots can be frustrating.  You will constantly run into hardware limitations like the 8K of RAM or the 16-bit integers that easily overflow.  Lectures are kind of boring and don't really provide any meaningful help in doing the labs but I still think this is one of the most fun and practical classes I have taken.
Radhika is a great professor and the material is really cool! Unfortunately, the limitations on hardware (bad sensors, etc.) sometimes make the assignment more of an exercise in tedious calibration than a application of cool algorithms. Really liked the final project, other than the calibration part, but expect to spend .
Robotics is a very cool field now and as a result I took this class with huge expectation. Although it has satisfied that to certain extent, it was frustrating to see how very simple naive models perform way better because apparently it is more important to calibrate the robots than to make algorithmic work. Moreover, you'd expect a robotics class to apply a lot of machine learning or computer vision algorithm, but the computation power of the ePucks (robots used in that class) is so limited that it is hard to apply any online learning techniques (forget fancy vision algorithms/factorizations). Also as the class is mostly a competition and although the teaching stuff might argue otherwise the grade is mostly dependent on how you do in those. So choose a good partner and make sure that the union of your skill sets has solid C coding skills and algorithm implementation in it.
You will learn at lot about both programming and robotics in this course. The environment is much more like that of a lab than class, with a new project each week. The projects can be frustrating at times but these are the same problems that you will face in the real world so it is good preparation for whatever you might do in the future. Also the teaching staff is great and they are all super enthusiastic about the material and very willing to help out.
Radhika and the teaching staff really care about the class so there's a great sense of community. The assignments are interesting and challenging, though your code is often limited by the hardware.  Trekking to MD to work on psets was not the most fun, but overall I really enjoyed this course and I thought it was unique.
Teaching staff were great. The problem sets were on the whole part enjoyable but sometimes frustrating when the robots were inconsistent. Be prepared for a lot of testing and coming back the next day to find that it doesn't work anymore.
It's an experimental course, so it changes and is updated year to year. Frustrating as the robots can be, it is really cool to see your code come to life.
Really fun class with a great teaching staff. The turtlebots were a pain to work with, so unless they do actually add things like a simulator or allow videos to show best behavior for pset grading, I would be cautious about taking this class. Especially near the end, it requires a fair bit of time, but it was a fun class and a great way to get more hands-on experience with robots.
This class has a bunch of issues that need to be worked out. The course staff cares a bunch and I expect they will improve it eventually, but not sure it will be good next year.
Turtlebots were very frustrating and prevent. Only worth taking if you really don't mind dealing with weird hardware issues that you don't understand
The robots (Turtlebots) were fun! The psets took a very long time, though. It was a little frustrating to have the idea down, but have to tweak details like HSV colorspace for hours to get the robot to work consistently.
You will learn a lot about robotics and ROS in this class, but the problem sets are often confusing and frustrating.
This class is a lot of work, but ultimately very rewarding and a lot of fun. The psets are weekly competitions where you program your robot to autonomously perform a variety of tasks. Be prepared to deal with the headaches associated with working with physical robots. A lot of people who did not have much experience working with robots or coding physical objects tended to get frustrated easily. Lectures are extremely interesting, but not necessarily what you would expect from a typical lecture. They focus more on the field of autonomous robotics and autonomous robot theory, and less on the semantics on how to program for the system that we worked with. The turtlebots were fun- you should look them up. They are essentially a roomba with a kinect on top.
This was definitely my favorite course of the semester, if not one of my favorite courses while at Harvard.  The psets were fun to work on, though they did require an immense amount of time.  The turtlebots are not as buggy as previous years' robots, but they are far from perfect.  ROS also has some frustrating and weird bugs that have to be worked around.  In sum, it was a great experience, and I feel equipped to tackle on robotics projects in the future.
