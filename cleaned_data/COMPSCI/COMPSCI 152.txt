You need to lobby Prof. M to teach this course again because it was amazing.
This is a really wacky, difficult course - it's perhaps not the best way to learn the material presented, which is actually very interesting.  You will encounter programming errors you've never seen before when working in Coq, and it will really, really frustrate you.
Difficult concepts, but you learn some cool things about languages and language design.
Be willing to work, but you'll also learn a lot. Make sure you want to really learn about language design before taking this class.
Thinking about this course would often make me too angry to concentrate.
In its present manifestation, this class should not be taken. It was disorganized and mismanaged, and did not convey the subject in a particularly cohesive manner.
The material covered in the course is very interesting, but even the most interesting material, when taught poorly, can result in a painful experience.
It was a lot of fun! Take it if you liked CS50 and CS51. Word of caution: for those of you that don't like programming, you'll have some trouble with the class. For those of you that don't like proofs and the mathematical part of Cs, you'll have some trouble with the class. Luckily if you are good at either, you'll have time to work on the other. Would definitely recommend you take this class before CS121 if you aren't too comfortable with proofs.
The course requires a strong background in proof-based math. The material is interesting but highly mathematical and questionably useful.
If you like functional programming and want to learn more about the formal foundations behind different ways of programming, this class is very eye-opening. It's almost a logic class in that the main concern is "how can you logically encode this concept", "what does this term really mean", and "can you prove that this property always holds". You also get to write lots of fun interpreters and type checkers.
The class is not fun unless you are actively in love with Programming Languages Research. It requires a ton of obscure work that doesn't matter too much to the rest of Computer Science.
Material is quite theoretical (a lot of proofs, building models to reason abstractly). If you like that, you'll love the course, but at times it can leave one wondering what the point is (i.e. real world application). Not altogether sure what learning this helps me do practically.
Manageable, rewarding and fun. You learn a lot. Steve is one of the most personable professors in the CS department. Definitely take this class if you can.
This is the most well-taught class that I have taken at Harvard. Professor Chong is a good lecturer and is very helpful outside of the classroom. The lecture notes are excellent if you prefer to learn from written material. The problem sets are not too hard, and they do exactly what they're supposed to--teach you the material. You'll definitely find the material interesting if you have a mixed interest in real-word engineering and theory or if you have a passion for making your programs correct.
Wonderful professor. Feel a lot more comfortable with certain CS concepts (typing, induction, records). Generally seems a bit academic though, so I'm still not sure how to apply the skills I've learned.
Be prepared to work hard... this material is challenging
Take this class, it is a bit theoretical but really helps with understanding better 51 material and in general how programming languages work. CS121 is not really a prereq and all you use from 121 is structural induction. Also, prof Chong and the TFs are awesome
Good class. The lack of practice problems for the exams makes them more difficult than they would be otherwise.
Its a very tough course that is very well run. Although I didn't find the topic to be the most interesting, Prof Chong is one of the best lecturers I have ever taken a class with. The structure of the course is very well done. The content is very difficult.
The problem sets are very good -- difficult but well specified. If you liked OCaml in CS51, the OCaml problem sets are entertaining.
This course is among the best I have ever taken. Prof. Chong is great, the entire course is well organized, and I have no real complaints about anything. In terms of prereqs, it's good to have some OCaml knowledge and mathematical maturity coming in. The material can be frustrating if you've never done logic before (I hadn't), but it's so rewarding when it clicks. This class should be required for all CS concentrators.
A good introduction to an obscure but interesting topic.
This class is very useful because you learn to program in a lot of different programming languages. I feel very comfortable now with Java, Javascript, Python, Jython, Ruby, and FORTRAN, to name a few!Just kidding. This class is more about the theoretical aspects of programming languages, which is hard to describe in one sentence. This was a very good class. It was flawless in terms of organization. Assignments were always returned in a timely manner. The material was interesting. The problem sets are very good at making you learn the material. I thought the midterm was hard, though I know there were a number of people who got good scores.
Great material, take if you are interested in intersection of mathematics and computer science.  Some experience with functional languages is helpful to have, for both the theory and application components of the course.  When learning about how languages are formed, being able to translate the abstract representation into a known language is helpful for thinking about the concepts.  Though an intro to OCaml and Haskell are provided in the section and resources of the course, for the programming assignments, it is definitely useful to be familiar with at least one of the languages.
This is a proofs-based class.  If you're not comfortable with proofs, think twice about taking this class.  I'm also not really sure how the proofs are graded, so that's something else to keep in mind.
It's a great course. Programming doesn't start until the latter half of the course (the first three psets had no programming, the last 3 had significant programming parts), but the programming was one of the best parts of the course. The lecture notes are also amazing.
Make sure that your proofs are done well and formally.
The course is more math-focused than most computer science courses (more than 121 or 124), and more CS-focused than most math courses. Students should be aware that the class is very difficult, and while I absolutely loved it and strongly recommend it, it may be a good idea to take it pass/fail even if that means not getting course credit.
Awesome course. Steve Chong is really clear and builds up the material bit-by-bit, adding understanding about interesting and relevant features as the course progresses. You will have to be careful that you don't just learn the material by rote application; while this is certainly possible, you will have missed the point.Don't come in expecting to learn a bunch of programming languages. Expect instead to gain an understanding and appreciation for how various programming languages features and paradigms work, so that you can *pick up * any programming language you want with much greater ease.Overall, great class, highly recommended.
The class is very fun and straight-forward.  The lectures are fun and Professor Chong is an incredible teacher.  He really views the course as a way to get people involved and excited about PL research, and the effort he puts into the course really makes it worthwhile.
I would only recommend this class to advanced CS students. Although the workload is light and you will be able to get by, this class is not appropriate for students who have not already taken upper-level CS classes.
Professor Chong is an amazing CS professor. The course is well-organized, and if you're interested in the process behind creating a programming language, consider shopping it. Definitely be comfortable with proofs and CS theory. Professor Chong is pretty approachable, and definitely passionate about his work, and I wish I had done more independent reading outside of class.
This class is very rewarding, but also pretty time consuming.  A lot of the material is a more in-depth version of CS 51 and CS 121.
It's a great class to learn about the different possible designs in programming languages. It's a bit theoretical but the presentation + material were top-notch.
Great class! Chong and the rest of the staff is very dedicated to ensuring that you receive a solid foundation in PL, and the material is very interesting! You'll come out having programming in 4-5 different languages (syntax errors become a nightmare...) and also understanding the language that you code in much more deeply. I really think PL should be one of those mainstream CS courses, and not as much of an "elective", just because it's so applicable to every other CS field (especially systems)!
This is a very interesting class! It is pretty theoretical, but the coding parts of the psets towards the end give you a good idea of how this can be applicable!
To give you my background: I took this in senior spring to fulfill concentration requirements for Math + CS, after having taken a lot of graduate math and CS theory classes. I wasn't particularly passionate about languages, but this course seemed the most theoretical CS class that's not numbered 12x or 22x.It did turn out to be pretty theoretical, which I enjoyed. If you want to learn about the theory behind programming languages without a great deal of the messy implementation details, take the course with Steve Chong - he's extremely good at teaching it! I learned some fundamental things about logic (like the lambda calculus), as well as many other cool concepts in PL theory. And while it wasn't my favorite class this semester, it was definitely great thanks to the great teaching!
This course was the best course I have taken while at Harvard. The material is super interesting, and very useful for computer scientists and for future software engineers. While CS51 teaches functional concepts, this class goes way more in depth into the theoretical underpinnings of modern (and not-so-modern) programming languages, introducing a way of thinking about computation and problem-solving that most programmers have simply not experienced. I feel like my whole way of thinking about the field of CS/programming has shifted thanks to this class, and more mechanically what I learned will be extremely useful in evaluating the tools at my disposal for future CS projects. In addition, Professor Chong gives great lectures, great lecture notes, and the course does everything it can for you to succeed. Would definitely recommend to any CS concentrators.
I learned more than I expected from this course. Programming languages is a very niche topic, but many of the concepts I think will prove quite useful in my career. I learned four new programming languages this semester, and developing the skill of learning programming languages quickly is super-useful as a developer. Having a rigorous framework to think about parallelism is also quite useful, and complements material from cs51 and cs61. I worked through very challenging problems dealing with callbacks, and now feel much more comfortable approaching tools like Ajax.
Very reasonable course and very well organized. Material was both challenging and engaging without being demoralizingly difficult. Unfortunately, 10 am time and a recorded format meant that lecture videos were the most interaction I got out of the course.
Some of the best lectures ever, but the content is hard to find relatable. You touch on the surface of a lot of material, but nothing really in depth, which can be less engaging than other classes.
I personally enjoyed the course. I know some who did not. I loved functional programming. I loved the stuff covered in lecture. I would take a look at some of the notes and see whether it fits you. The staff is wonderful, Professor Chong is wonderful. The entire course is set up to be good if you are remotely interested in the material.
CS152 is a fantastic course. The choice of material was great. Material was presented in a fantastic way -- the lecture notes were good enough that one need not attend class, but Prof. Chong is just such a good lecturer that you'll want to attend anyway. Problem sets were pretty cool. I came out of this class with a much better understanding and appreciation of PL Theory. This course is really a great introduction to the field. This course explores the intersection between theory and engineering. Workload is relatively light and theory is easier to understand than other theory courses in the department (but this probably because PL Theory just isn't as complicated as algorithms). If you have some basic experience with mathematical proofs and some programming experience, you should probably be fine. If you haven't learned functional languages, you could probably pick it up here.
This class is amazing. Professor Chong is an amazing lecturer and a great guy.
If you liked programming in OCaml and have an interest in the mathematical side of what's going on behind it, you will like this class.  Professor Chong is a very clear lecturer and organized teacher; his lecture notes are comprehensive and accurate.  The only thing I would have liked to see is a little more depth into some topics (interesting things like the Curry-Howard isomorphism) and a little less breadth.
Professor Chong does a great job with this course. The lectures and lecture notes explain the material very well. The problem sets can be tricky but they usually have elegant solutions. If you enjoyed CS51 but didn't understand the theory behind the lambda calculus and other design choices in OCaml, you should take this course.
This class is *not* about learning a bunch of programming languages. It is about the theory behind programming languages and proving, with mathematical rigor, things about what certain languages (most of them artificially constructed in class) can or cannot do. What does a type system do for a language? How can we deal with concurrency? What are different ways of describing the meaning of a program? If these things interest you at all, then you should take this class. Professor Chong is a fantastic teacher who truly cares about all of his students. Admittedly, the material may not interest you that much because it's not as immediately applicable in your future career. Then maybe don't take the course. But if it interests you at all, this will be a fantastic introduction to it.
This class is amazing!  PL is a really cool area of CS, and Professor Chong is awesome.
The class is fantastic -- you learn a lot about programming language designs. It can be a bit theoretical at times, but the course staff does a good job of adding an implementation component to assignments. It's also really cool that you not only practice your OCaml, but get introduced to Haskell, CML, and a few logic programming languages. Great course overall!
Great class, I took it at the same time as CS 124 and another CS course because I had a lot of requirements to fill. This class was both interesting and engaging. I learnt a lot without suffering under an excessive workload - a gem in the CS department. Chong may be one of the best lecturers I've ever had.
Professor Chong is a truly great guy, not just as a Professor, but as a person. He really cares about his students, and in teaching the material in the most effective way possible. The difficulty level is the model for what all 100 level CS courses at Harvard should be. The course is designed to be interesting for those interested in programming languages, and it is.
This is a good class. The material is interesting, especially if you liked 51 or 121, Professor Chong is an engaging lecturer, and they provide excellent notes outlining the material that we need to understand. Problem sets are theory-heavy but later ones include programming in various languages. It will help if you feel comfortable picking up the basics of a new language within a week.
This course is really great for digging into the details of PL design and semantics, but also really engaging for anyone interested in computer science.  All the topics were interesting, the material was well presented and organized, and the entire course staff including Prof. Chong were very supportive.
The course offers a pretty good coverage of programming paradigms and programming language features. I wanted to see more theory and proofs though (for things like the Curry-Howard correspondence).
Programming languages is a very interesting course. It touches on many of the key elements of program design and the problem sets are usually pretty short and not too time consuming. If you are more mathematically inclined, this is a good class to take. There is some programming, but not too much, and the problem sets are pretty interesting. Prof. Chong is also a fantastic lecturer, which is one of the big advantages of taking this course.
This course is awesome! Professor Chong is a phenomenal lecturer and the material presented in the class is really interesting.
The class is really interesting and very well organized. The assignments are interesting and the class notes are AMAZING!!
Easily one of the best classes I've taken at Harvard. Incredible teaching staff, interesting material, and reasonable workload.
Professor Chong is one of the best in the department. He's explains concepts very carefully to ensure everyone follows without slowing the pace of the class.
This is an excellent course. Prof Chong is a great teacher (not just a great lecturer) and a really excellent person, too. He learns everyone's names, and the class seems like a community. Sections and office hours are useful, and you won't feel dumb for asking questions (at least, I didn't, in contrast to some other classes, and it seems like I wasn't alone in that). Also, the material itself is really, really good, and the presentation of it in the course surpasses what you'll find elsewhere, it seems. Lastly, the course will help you to think more formally, moreso even than any math dept course would. This is really useful, whatever you're going to do with your life. (Although, that's a bit vacuous because math isn't really formal, in practice...)
An absolutely fantastic course! You will get a great exposure to fundamental PL concepts that underlie many of the languages we use today - interesting theoretically and extremely well-presented. Prof. Stephen Chong and the TFs are phenomenal. TAKE THIS COURSE!
Very well organized class covering a wide array of analytical techniques for programming languages. Professor Chong is a great lecturer.
This is a rare course where the work never feels forced or pointless. That alone is enough to recommend it. Past that, the instructor is great, the course materials are incredibly thorough, and the material-- at least in my opinion-- is consistently interesting. Really a very good course.
The material is quite interesting and Chong is a very capable instructor. Be warned of the difficulty of the assignments, however; the later problem sets that include code implementations can take an eternity.
152 is a fantastic course for those who are interested in programming languages.  Be warned though, this course is highly theoretical in nature, unlike its counterparts at many other universities.  Prof Chong is a wonderful professor who does a good job of presenting the material in a variety of ways.  The encyclopedic lecture notes are fantastic!  I thoroughly recommend this course for anyone who is interested in learning more about PL theory.
Very good; challenging.
This was an extremely well-run course. Professor Chong's enthusiasm for the material is very evident and contagious, the course notes are fantastic, and the assignments serve as great complements to the lectures. In addition, the course staff is helpful and accessible.
This was an interesting class. Prof. Chong is a great guy, and I really enjoyed the problem sets. With that being said, you should probably only take the class if you're really interested in programming languages, not just as a random CS elective.
This is a fantastic class if you're interested in the formal mathematics of and the reasons behind the design choices in programming languages.  However, especially in the latter half of the semester, the practical applications are harder to see, so I'd recommend this course more for those who are interested in the material for its own sake.
One of my favorite CS classes here. The first few weeks (right about up to the add-drop deadline actually) are pretty slow and not terribly interesting (though important to learn), which makes it hard to tell if you'll like the course. But lambda calculus and beyond is very very cool. So suck it up for the first couple inductive proofs and the inevitable complaints the TFs have with them, and get ready to learn very cool material.It's hard to describe what the course is about, since PL is a specific topic in computer science (akin to algebra or analysis in math). But needless to say it has nothing to do with learning a lot of programming languages ;)Material is pretty tough but presented extremely well in both lectures and lecture notes.
A marvelous introduction to the theory behind programming languages.
Professor Chong is one of the most invested CS professors in the Harvard department. Having taken 121, 124, and 127, I felt that the material in 152 was pretty straightforward. The course is well-organized and expectations are clear. Overall, if you're remotely interested in programming languages (specifically, what goes into the creation of a programming language) and have interests in math and CS theory, definitely shop it! Because Professor Chong is so engaging, I would try to take advantage of his openness, and done more out-of-classroom reading of current literature in PL and ask him questions about it.
The course is simply awesome. It is not about learning a bunch of different programming languages, but rather a theoretical approach to the topic. Prof. Chong is an incredibly good lecturer and his lecture notes are excellent. The most important thing is that for enjoying this course is that you need to be comfortable with discrete math style proofs (nothing extreme, but if you hate mathematical proofs and have always had trouble understanding induction then I'd be reluctant to recommending this course to you). The first half of the course had almost no programming, in the second half there was more of it. If you're ok with a bit of math, then I most definitely recommend taking this class - it was the best decision I could have made this semester. It is tempting not to go to class, because lecture videos are all online, but I do recommend going, otherwise prof. Chong will be sad.
This class is excellent! Chong is a superb teacher and I think seeing lectures in person was worth it. The class was one of the most well-run in the CS department I've seen so far... problem sets are doable but informative, the lecture notes are great, and you get good feedback on your assignments. Programming languages is really fun!
CS152 is a very cool class, and Riccardo was such an energetic lecturer! The material is definitely abstract, but it can be a lot of fun. Would recommend!
You should be very interested in learning about the theory of programming languages (eg lambda calculus). If not this class will be very difficult and not a lot of fun.
This class was taught by Pucella this semester, and hence, is not representative as people appear to have loved the version of the course taught by Chong. This class was just plagued by disorganization - which honestly makes no sense since all notes, lectures, and psets were simply recycled from previous iterations of the class. Pucella honestly cared and tried, but the disorganization of the class honestly totally killed the vibe/enjoyment of the class. We covered no where near the amount of content Chong usually covers.
The material is interesting and you will learn a lot. But don't expect to learn any new programming languages. The class is more about logic and formal reasoning about semantics.
The material is very interesting and you'll learn a lot.
Interesting class. If you were super good at induction and want to do more of that, or if you're really into functional programming, or if you just really like proof trees, check it out. It's not too difficult, pretty low stress, and makes a good supplement to a CS education.
The material for this course is very interesting at the beginning for those curious about the inner workings of programming languages, but can start to get dry near the end if you are not thoroughly interested in the theory behind programming languages. Other than that, the lectures and notes are excellent and can easily help you do well on problem sets and tests.
This class is fun, especially if you enjoyed the more mathematical parts of CS 51 and OCaml in general. CS 51 on roids in a sense. It's also received really good ratings with Prof. Chong (who was on sabbatical this year)
There was a guest professor (Pucella), so that meant the course was a bit meh.  On the first day of class he told everyone that he purposefully put the class at 9 AM so that people wouldn't take it - lo and behold, there were only 15ish people left at the end, in a class that usually has 50.  His bad teaching didn't really affect my personal understanding of the material, since the lecture notes are very good.  I've heard that Chong is pretty great, so it's probably a better experience with him.
be good at formal logic
This class is extremely well taught, really interesting, and actually pretty fun. It can be difficult and demanding at times, and the midterm and final are pretty stressful since they're all multiple choice, but overall I would definitely recommend taking this class if you have any interest in learning about programming languages.
Super interesting class! The exams are hard but the problem sets are essentially logic puzzles; not sure how much I'll use what I learned in the future but I had a great semester learning it.
By far the best course I've taken. Lectures are extremely well presented (and Prof. Chong's lecture notes are super helpful); homework assignments are interesting (and even fun. Although be aware that for the first half of the course, homework is mostly theory, which doesn't appeal to everyone); exams are very reasonable. Course staff was great and Prof. Chong is amazing. If Prof. Chong is teaching CS152, you absolutely should take this course if at all interested.
The material for this class is very theoretical and non-applicable to basically anything you'll be doing outside of it, unless you go into research in this field. I did not feel like I got better at computer science by taking this class.
Go to lecture, start psets early, generic class advice, etc. Steve is awesome and funny and very responsive to the atmosphere in the classroom, changing his teaching style to accommodate everyone. You don't see that a lot here. Highly recommend taking this class.
This was a fantastic course. Very theoretical instead of a lot of hard coding, so if you enjoy that, Chong is both a fantastic lecturer and teaching a very interesting subject.
By far, the best CS class I have had the pleasure of taking at Harvard. I can't recommend this class enough. Whether you enjoy the more math-oriented, theoretical side of Computer Science or you're a hardcore coder, the material of CS 152 will appeal to you. Chong is an amazing lecturer. Psets every other week make the workload super manageable. Exams are fair. Take this course!!
Pay attention in lectures and re-read the lecture notes (which are incredibly detailed). Much of what appears on homeworks is strongly relatable to what is taught in class, so having a firm grasp of that will help you immeasurably.
Chong is a great lecturer. It was a very well-organized course, the material was very interesting, and the workload is very manageable (moderate psets due every 2 weeks)
Incredibly good course. Take it if you're at all interested in the theoretical underpinnings of programming languages (and if you like math). Basically every element of CS152 is a strength: Chong is an amazing teacher; the assignments are well-written and reasonable; the TFs are helpful and friendly; the exams are well-calibrated to assess what you learn; homework is returned promptly; communication about changes/deadlines is top-notch; and so on. Perhaps one of the best classes Harvard CS has to offer.
It's a very difficult class. It is rewarding, however,  but you should only take it if you really feel prepared.
Fascinating class. I'd really only recommend taking it if you've already done a fair amount of CS, otherwise I imagine you'd be overwhelmed. I definitely feel like I've come out of it much better at picking up new programming languages due to greater experience with different paradigms and styles. If functional programming, the advantages of system v scripting, and concurrency are subjects you want to learn more about, there is no better resource.
Amazing course with some of the best CS faculty. A great way to satisfy a CS elective requirement
The material in the class was interesting but it can be difficult to motivate yourself to actually go to lecture or learn it.
The material is decently interesting (although not as interesting as I had hoped). You learn a lot about how programming languages work, but you won't really get any programming experience. The programming components of the HW have a lot of skeleton code and most of the time you're just turning theory into implementation.
This course is incredibly well taught, but covers relatively specialized material.  I have never taken a class before that made it so extraordinarily easy to learn -- detailed lecture notes, section problems, textbook readings, and absolutely crystal-clear lectures from Chong make learning easy and a pleasure.  Chong is an astoundingly good professor, and is super friendly and helpful on top of that.  I would take almost any class with this guy teaching it.
This was an excellent course and I highly recommend it.  Although there is little direct programming and it is not an extensive tour of all the programming languages in the world, it is an excellent overview of the theoretical aspects of programming languages.
Stephen Chong is one of the best professors I have ever had, and the field of programming languages is fascinating.  If you want a sampling of the field to see if it's your thing, this course is great.  I ALSO HIGHLY RECOMMEND THIS COURSE TO LINGUISTICS CONCENTRATORS WITH MATH INCLINATIONS.  It's all syntax and semantics.  Overall, you should absolutely take this course if you're considering.  Professor Chong will be on leave in Spring of 2017, so you may want to wait to take the version with him in Spring of 2018 since he's so great.
This class is one of the best CS classes I've taken here at Harvard! The lectures are very accessible, and Professor Chong is one of the friendliest and most caring professors in the CS department. The work is difficult and the exams are hard, but in return you'll feel like you understand the theory behind programming languages so much more.
Prof. Chong is a very eloquent and organized professor. His lectures are easy to follow and comprehensive, in terms of covering the relevant course material. Lecture notes are very helpful for fully absorbing the course material, so much so that section isn't necessarily important. I didn't go to too many sections but I'm sure, similarly to the lectures, they were very well structured and organized. The course material is engaging and the assignments will improve your induction proof skills as well as give you a great fundamental understanding of the theory of programming language semantics and properties.
Steve is a fantastic lecturer - this class is worth taking just for him, and the material is interesting. It might make you appreciate language features more.
As somebody who didn't have as much mathematical experience (had only taken CS50/51 and Math 1b), the mathematical notation was difficult to wrap my head around. The course assumes a lot of prior knowledge, although it is possible to pick things up if you give a lot of time to it.
Chong is a great lecturer. Material is less (almost no) programming and more math-y and logic based.
The course is a bit slow in starting up, but it gets very complex and very interesting. I enjoyed how clever many of the constructs we learn are. Professor Chong is a very good lecturer and provides great materials for the class.
It's a fun and interesting course where you explore aspects of programming languages and prove some things. There is more math than you might expect (not too much actually coding in other programming languages, although there is some of that).
If you plan on taking this course, make sure you have time in your future semesters to explore the 200 level class and other concepts that build off of 152. Otherwise, as a standalone, I'm not sure how much you will get out of it.
An engaging and difficult class. The workload is relatively light (for a CS class), but the course material can be conceptually very difficult to understand. Professor Chong is a great lecturer.
One of the best CS classes that I have taken at Harvard. Some people complain about this not being relevant, but I have found that it's given me a more thorough understanding of how programming languages work, why certain languages have certain features, and how to decide between programming languages. Furthermore, it is simply interesting and introduces you to a new way of thinking about how programs work. Just because there isn't a lot of coding does not mean that the class will not make you a better computer scientist and programmer. If anything, take this class because Professor Chong is one of the best professors at this school. He's a fantastic lecturer who also cares immensely about each individual student (he even tries his best to learn everyone's names!).
This class was awesome! Chong is an amazing lecturer; the problem sets and assignments are well-formulated; the course is extremely organized; and everything is really interesting! Definitely take this.
Chong is a fantastic professor and the class is worth taking just for the chance to listen to his lectures. He puts so much effort into this class and it is so well taught and well run. The psets are actually pretty entertaining and you only have one every other week which is so nice. Would definitely recommend.
