Very rigorous treatment of algorithms and computational complexity.  This course will assume limited background knowledge and walk you through everything very detailedly, albeit at a very fast pace.  Take this course if you have a strong proof-based math background and want to develop a well-rounded theoretical understanding of computer science.  The topics are very interesting and the instructors are very good.  Expect to spend a lot of time doing psets though.
Mtz is the man!Seriously though, if you are entertaining the possibility of taking the course, don't hesitate. It's a brutal experience, but you will come out of it with thorough understanding of the foundations of theoretical CS.
Don't take this class unless you're prepared to spend 20+ hours a week, have a solid friend group who's either in the class or have taken it before, and come in knowing some algorithms and complexity. You're required to know how to write proofs coming into the class. I think taking this class was the worst choice I made this semester. The homework is much much harder than what's covered in lecture, especially if you don't have previous knowledge or intuition about what's going on. If you're deciding between taking 121 and 125, take 121.
You'll learn a lot about the theoretical side of computer science. Very focused on proofs/theory, with only a few programming assignments.
Great course, and I think it does a great job teaching its topics, which are obviously very useful as well as interesting. I found the course pretty challenging, but I'm also not the best at computer science, so you might find it easier.
It's pretty hard but if you're planning to work in CS, it may be helpful.
The lectures are mostly good - especially prof. Mitzenmacher's. Professor Mahdu's lectures seemed much less well prepared, often going back to correct or add things that he'd missed, which can be quite distracting. Also the teaching materials aren't well written with mistakes/inconsistencies. You'll need to do a lot of your own outside research to learn the materials.
Very challenging, but equally rewarding. Very good lecture notes. Problem sets are quite tough. Be aware that the thinking is more pure math style than cs style (there's almost no coding!). But in the midst of difficulty and small class size there was a very nice class spirit that developed. On the whole, if you give it the time, the class is fantastic. If you don't give it the time, you'll have a tough experience. In my book it's the best CS class I've taken.
This class is an excellent exposition into complexity theory. The class is theory-heavy, which I enjoyed quite a lot.
A good class where you can learn a lot, but a heavy workload. I would take this class if you are serious about putting in a good deal of time and effort into learning a large body of theoretical computer science.
It takes a lot of time, but it's faster to take this than CS121 and CS124 combined
It'll be tough, but you'll learn a heck of a lot, much of which will actually be extremely useful to you.
This class is very very very difficult but equally rewarding if you stick it through.
If you want to feel challenged mathematically and want to get a rigorous introduction to algorithmic thinking, this course is definitely for you.
It's definitely a lot of work, and moves very quickly. The proof-based problem sets are challenging and very time consuming, but help you get a greater understanding of the material. I would say that it's possible to get them done on your own if you are super confident in this area already, but it's very helpful getting a second opinion on your solutions.
Mitzenmacher and Salil were great professors. Point blank. You'll learn a lot from them (and be in awe of how much they know/have accomplished.) 
It's imperative to study on your own and do practice problems before exams, but the exams are fair (if challenging), though it's hard to say what future iterations of this course will look like (if it even happens again), it seems they're slowly calibrating the difficulty of the course. I feel like they initially wanted it to be harder, but (1) crazy smart people stopped attending lecture, and (2) lots of people who took the first midterm and dropped tended to complain about the difficulty, leaving the rest of the class up the river.
I loved the class. Better taking a hard class with great profs than 2 less difficult ones with less exciting profs.
The class is really challenging but rewarding if you make it through!
CS125 is a fantastic and fast paced introduction to complexity theory and algorithms. The professors are fantastic, the TFs were on point, and I really can't recommend this class enough. Take it to learn theoretical CS, take it to get good at job interviews, or take it just to work on cool problems.
For students looking for a challenging computer science course, I would absolutely recommend CS125. This class challenged me and allowed me to learn a lot about both algorithms/complexity and mathematical proofs for theoretical computer science. Compared to CS121 and CS124, I feel that CS125 goes through the material at a very good pace for the advanced CS student.
I wish this course were available when I was a freshman. Now, the CS department joins the other departments in providing a department-endorsed method for freshmen to academically overload themselves in the fall!
Take this class if you want to learn the fundamentals of CS theory with suitable mathematical rigor. I'd say this class is great both for CS concentrators who want an advanced and fast-paced introduction to the subject in lieu of 121 and 124 as well as students in related fields who want to get as much out of a single semester theory course as possible.
Good class if you want a fast introduction into a broad selection of theory and algorithms. You won't need too much background, but each week will be mostly new material and you'll be constantly challenged.
Excellent, well-organized course covering the basics of theoretical computer science. Don't worry about the "Math 55 of the CS department" hype; you should find it manageable unless you're coming in with a woefully deficient background.
A really great undergraduate CS theory course where you come out with a strong understanding of basic algorithms and complexity theory. You will learn a lot with great professors and be surrounded by very smart students.
This course is probably a lot more demanding from a problem-solving perspective than 121 or 124, but the problems themselves are very well-written. The lecture notes are (usually) really clear as well and the TFs were really helpful, so I felt like I could always stay caught up with the class as long as I put the work in. This was the first year that the course was offered, so I'm sure subsequent iterations will be even better!
If you want to go into research, this is an awesomely fast paced class. If you care about tech job interviews and actual practical applications, it may be better to still take 121 and 124, since they will give you better skills and more practice (124 especially).
A really fun class. The lectures move kind of slowly, but the lecture notes are superb, and the problem sets are interesting and reasonable in length.
Great class, you really learn a lot about how to make efficient algorithms, and you also learn about the theory of complexity (e.g. how to prove certain algorithms are in certain complexity classes such as P, NP, co-NP, NP-complete, RP, R, RE, and many more). It is a lot of work though, and you will need strong proof-based math experience (e.g. 25 or higher).
While being advertised as "the Math 55 of CS," this class is certainly not as hard or demanding as Math 55 (coming from a former Math 25er). That being said, it is still very challenging and requires a lot of work and discipline. Out of the ten assignments we had, only one-and-a-half involved any kind of programming and the rest were all proof-based questions. However, it is still necessary to have a solid programming background in order to complete those assignments since very little guidance is given. A strong math background is essential for success in this course, especially discrete math, probability, and familiarity with proofs. You should also be comfortable typing up your homework in LaTeX. We never followed a specific book, but I would recommend Sipser and CLRS as supplements.

The teaching staff was amazing and made it worth it to take the course. Michael Mitzenmacher and Salil Vadhan are two of the best CS professors at Harvard, and taking a class with both of them was a fantastic experience. Alex and Joy were also great TFs (though sadly they will have graduated by next year).

If you enjoy math and were thinking about taking 121 or 124, consider taking 125 instead. Some of the pros are the great teaching staff, the smaller class size (only about 30 people took it this year), and the fact that your peers will be smarter and more passionate about math/CS. Some of the cons are the heavier workload and the tougher exams and grading.
The class is very interesting, but it does require a huge time commitment. Take only if it can be your first priority this semester.
It was a really cool class, the instructors were pretty good and very excited about the subject matter!
This class is challenging. While the material itself is not *too* bad, the problem sets are meant to be very difficult. You'll come out of the class with an appreciation of how hard computer science can really be, but also showed me the value of rigorous proofs in the construction of computer science and complexity theory. I haven't taken later classes yet, but according to the teaching staff, CS125 should prepare you for graduate coursework in the field. Expect many math and computer science prodigies in this course -- it really does live up to its name.
I would highly recommend this class. Don't be scared off by the mathematical background the course suggests, I took this with very little exposure to proof based mathematics and I was fine. Be prepared to work hard, especially on the problem sets, which can be very challenging and time-consuming. A course like this seems to be the best way to learn theoretical computer science, with the 121 and 124 material integrated together.
Great class, organized well even in its first year. Material is interesting and challenging, but not nearly as difficult as being "Math 55 for CS". Comparable to Math 25.
First of all, I think this course was fantastic - it was probably my favorite course this semester, and it got me interested in theoretical computer science. I would especially recommend this course for concentrators in related fields (Physics, Math, etc.) who are interested in learning more about CS.

However, there are some things you should bear in mind. This was the first year the class was offered, so there may be significant changes between this year and future years (for example, workload was not too high this semester, but that could change). 

Additionally, this class was advertised as being "an intensive course meant only for students with strong mathematical preparation", which I think overstates the mathematical complexity of the course. You should have familiarity with proofs in order to take this class, but you should not pay attention to Crimson articles declaring this to be a "CS equivalent to Math 55" (unless they significantly change the course next year, which is possible).

Finally, I would just recommend being careful with Prof. Mitzenmacher - he can at times be a little hard to deal with (and digging back in the Q, this is not the first time somebody has made such an observation).

Sorry for the long-winded response; there are a lot of things to mention because the course is new. tl;dr you should strongly consider taking this class, it was extremely cool.
