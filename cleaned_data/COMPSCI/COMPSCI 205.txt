A lot of learning occurs outside of class. Class material is mostly theoretical and/or top level algorithm.
This is a challenging course.  The class material has lots of practical applications, and may be very relevant to your research.  It's worth taking if you can afford the time, and if you're confident in your programming ability.
The topic is very useful and Prof is kind of nice person. However, the course is not designed very well. Coding on Odyssey is also not very pleasant. If your work is not heavily related to parallel computing, then don't take this class, reading the two textbooks(plus some python multiprocessing tutorial) should already be enough.
This is an aspect of computational science that you won't understand you know nothing about until you take it. Textbooks on the subject are mediocre so a class is really valuable. There was some difficulty getting the pacing of the course right (student backgrounds are diverse with phds from many disciplines and iacs masters students). I think in the future it has the potential to be outstanding.
So, I think the version of the class that I took was a bit of an anomaly. Previously, it had been taught by Thouis Jones, and gave you a survey of parallel computing theory, thread parallelism, locking techniques, distributed DAG parallelism (Spark), and GPU/multi-core SPMD parallelism using libraries like CUDA and OpenMP. I hear that it was very good.The class as I experienced it (taught by Manju) was a bit of a train wreck. He didn't put much work at all into lecture preparation (he kind of said the same thing every lecture), threw out all the material from the previous years, and did a sloppy job of replacing it. Overall I don't think anyone left that class with much intuition for how to write parallel programs; we just went through some simple tutorials for how to use Odyssey, CUDA, and OpenMP in pretty basic ways. There was almost no homework and what homework there was didn't really help you understand the material.So -- this class might be useful to future students, but not if it's taught so poorly.
First of all, parallel computing is an important topic if you career is related to any large scale computation. So, it is definitely worth taking this type of course if you know you will need it. However, for this specific course in this semester, I find the learning experience very frustrating. I take this course as part of program requirement with the high expectation of gaining knowledges of parallel computing in a systematic way. I have prior experience of parallel computing in CUDA. However, I find that this course is not very well organized for students to learn a clear higher view of the topic. In addition, although many topics are touched (e.g., OpenMP, CUDA, OpenAcc, MPI), they are not introduced with depth. You learn purpose (and simple syntaxes) of those techniques but you can hardly gain deep understanding of how/when do they work. Third, I think the success of this course highly relies on weekly hands on section. However, there is no weekly hands on section for this course this semester. There are a few sections replacing regular lectures and only some of them are helpful. Fourth, this course lacks support for students. You may not be able to get any useful answer (if any) from the professor or TF when you have any question for homework or course. Sometimes, questions on Piazza are just left unanswered. All of these may be due to the change of instructor of this course this year. It may take some time for the quality of a course to become stable. However, each student may only have an opportunity to choose whether to take this course. Therefore, I would recommend as the following. If you feel interested but are not required to take this course, you may consider to take another course on similar topic (or simply learn it by yourself). If you consider this course as a required course, you may want to look into other options before settling down on this course. If you do take this course, be prepared that you may need to learn by yourself or learn together with several of your classmates. To sum up, I hope that my learning experience with this course could be much better. However, I realize that there are various factors affecting the delivery of this course. This course no doubt covers an important topic. I look forward to seeing this course improving towards the very high Harvard standard over the years.
CS205 is great if you are looking to be exposed to a myriad of parallel programming applications in research and perhaps even industry. You won't delve too deeply into the theoretical aspects of distributed computing but application-wise the opportunities for learning are rich. Be sure to have some minimal background in data structures and algorithms (especially graphs) and have a rudimentary understanding of computer architecture and you ought to be fine. Partnering on problems sets is recommended if you have a minimal background.
This course needs a major overhaul, and, from the course reviews in previous iterations, has needed one for years. Until the CS department and SEAS demonstrate a commitment to teaching this subject more effectively by a major redesign, I wouldn't take this course at all. Instead, there is a great Udacity course on CUDA that will teach these concepts much more quickly and clearly and in less time.
It is a course where you will learn helpful things to apply in the future, but taking a course on computer science beforehand could facilitate course.
Manju is one of the most enthusiastic lecturers I have had to date, but the class suffers from poor documentation of a lot of the languages that we use in class. With another iteration I am positive it could improve.
I would recommend this to students only if they had an extremely strong interest in learning parallel computing and are good independent learners. The course demanded a lot of time working on assignments and projects that were interesting, but not always well-designed.
Parallel computing is a really cool topic but this course needs some work. It's tough to say how much time this took because the weeks when the psets were due took about 20+ hours but they never released any pset after the 2nd one which meant I spent almost no time working on this class for the second half of the semester. I wouldn't take this course unless you have to for the CSE requirements.
You need to learn it by yourself.
Go the first class, and see if they are open/provide resources to learn C. Ask if the TF also is working on the homework assignments. If yes, then I would recommend.
Teachers vary in each semester, so it is hard to say.
Overall, a solid course. It basically is a course about parallel programming, with some pretty solid real-world use cases explored (Apache Spark on AWS, GPU programming, cython). Easy compared to undergrad courses like CS 124, or even CS 181.
I came out of the class feeling like I had learned a bunch of tools (like Spark, Cython, OpenCL), but am not extremely comfortable with any of them (except maybe Cython since I did my final project with that). I don't felt like I really learned too many parallel programming practices though.
The class is a basic requirement for the CSE program, but the CSE students (who often don't have a computer science background) are not the target audience of the course.  It is probably a fantastic class if you are a CS PhD student.  As a first-semester core course for someone with little background in CS, the class is really not the right choice.
This was a phenomenal course. The material is fascinating and super useful. Problem sets were challenging, but spaced out far enough that they actually didn't require too many hours of work per week (e.g., maybe it's a 15 hour problem set, but you have three weeks to do it, so you're fine). Thouis was an excellent instructor.
Take it at MIT.
This class is way too applied and you don't learn many interesting things. Also too much time is spent on installing obscure software and tools that have little documentation (just let me write code). Ray is very helpful outside of class, but the lectures are poorly taught and there was no reason to go to class or even watch the recorded lectures. It's not a very difficult class, just one that I hardly got anything out of. This class is on parallelism, but I walked away realizing that for almost all applications, parallelism is hardly worth the struggle it creates.
Parallel computing is the future. This class prepares you for it.
You need to want to learn Spark, AVX and OpenCL, but most people who already know what those things are already know them.
Very interesting material, but assignments are too focused on tools and not on concepts.  Ray is very nice but can be a dry lecturer and often bites off more than he can chew in terms of attempting to live-code difficult concepts.
You will learn about several modern techniques to "parallelize" code. If you put in more time, you will learn how to use these techniques too (which may be useful long-term as a software developer or a "big" data scientist).
Take this course if you want to learn about parallelization, but beware that this year the course was rather unorganized. Doing the problem sets was rewarding but I got no feedback on my implementations so I'm not sure I learned as much as I could have about good practices in parallelization.
If you are specifically interested in parallel computing, then this is a reasonable introduction. However, since the course is taught in Python it isnt ideal, as I personally dont believe that Python is best suited to parallel computing implementations.
Great class for CS undergrads. You will have more background than the CSE masters students who make up the majority of the class. You should be comfortable with programming, preferably in Python, in order to take this class. CS61 (Intro to systems) is also strong preparation.
This class is useful if you are interested in a survey of parallel programming methods anticipate that you will have to write high performance scientific computing software.
Be prepared...
You will learn a lot if you want to, and it's really interesting and useful material! Professor Jones is great!
Great overall coverage of different methods of parallel computing. Workload is rather manageable and spaced out, no exams whatsoever.
This course was extremely challenging for someone without much of a Computer Science background. It was very rewarding however once I was able to get up to speed with the expectations of the course. I really appreciated the broad coverage of different parallel computing methods.
Don't expect to learn how to code great. You learn more about some ways how Python can be enhanced by several packages/bindings to C/C++ libraries.
It's a pretty decent graduate CS class, professor definitely cares about the material.
This class was challenging but very rewarding, I learned so much in this course. Expect to cover a breath of topics and spend lots of time on homework unless you have previous experience with parallel programming.
Time consuming, but fulfilling class. It can be accomplished with limited experience, but it will be painful. The teaching staff was there all the way to help me.
The instructor holds this class first this semester, so it should be improved in the future.
Cool material but grading was slow -- wasn't sure how I was doing
You will learn how to write performant code, whether it is single-threaded, multi-threaded, or massively parallelizable like Spark. The course provides lots of practical experience, so you will be able to immediately apply what you learn in the classroom.
Awesome class.  A must take for those interested in fast computation.
You need more than programming knowledge for this class. You really should be comfortable with understanding how computer memory works and the hardware associated
Take it if you're interested in multithreading or GPU programming.
Be prepared for a challenge. It's almost like learning 3 or 4 new languages in the span of a few months.
It's a good primer on libraries that don't have strong documentation.
This is a great class. The material you learn is interesting and applicable to many real word domains.
Extremely interesting and highly applicable to real world problems. Prof. Cecka is an engaging, helpful, and knowledgeable instructor. The assignments are time-intensive but are fun and highly relevant (there is no make-work and very little redundancy). I would recommend this course without hesitation. That being said, you should have a decent amount of programming experience.
Highly recommend because of an awesome professor and cool topic. It's less about computing and more about learning how to think and code in parallel. It's time consuming but a lot of fun.
Great class covers all the main parallel programming pillars.  Project is extremely rewarding
Awesome introduction to HPC for those who are interested in high speed, low drag computing. Lectures are clear, and the problem sets are interesting. However, they tend to take quite a while, so be sure to at least look at them earlyish.
Cecka is a great lecturer (even on video after the fact) and the material is interesting and useful.  Be sure to give yourself enough time for the problem sets (not too difficult but they can't all be done overnight.)
Cris is really a great instructor, and the problem sets for this course are the right level of challenging.  You'll spend a lot of time on the problem sets, but they're interesting to complete.  Go to Cris's office hours if you need help - I found him to be much more helpful than the TFs.
very useful class if you plan to do large simulations or data analysis. problem sets are really long and hard but you learn a lot from them. final projects are really cool too.
Great way to learn the diverse use cases of parallel computing and apply it to problems in many fields. Projects and homework assignments are fun to work on in groups but can be challenging.
Great course to get an overview of tools for parallel programming!
Be ready to pour time into debugging your problem sets.
Cecka is quite possibly my favorite lecturer in the CS dept thus far, which already makes lectures entertaining in themselves. But the most awesome part of the course is learning things like Map Reduce (which I'd always heard of but had never used) and probably the first time you run code on a GPU and it actually does something (a lot quicker than serial too!) The problem sets are really cool and tangible and make you feel like a beastly programmer when you get them to work.
If you're interested in learning about how to code especially for parallel computation, this is definitely the class. Cris knows so much and makes the material very knowledgeable.
it's fantastic. useful, Cecka is amazing. take it
It's an excellent introduction to parallel computing and exposes you to three of the major HPC methods: MapReduce, MPI, and CUDA.  The course is entirely in Python, which is good and bad.  This is great for learning but Python's not really used for actual HPC (it's all C/C++/Fortran).Cris is an excellent instructor and puts a lot of time/effort into the course.
Super useful class on parallel programming, such as map reduce, MPI, and CUDA. As long as Cris is teaching it you're in for a treat.
This is a good primer on some parallel programming technologies, specifically MapReduce, MPI, and CUDA.
great material that teaches a ton while also creating cool outputs
Some of the concepts around GPU programming can be difficult, but it's otherwise smooth sailing.
Parallel computing is becoming increasingly important and I can't recommend this class enough. The problem sets are extremely fun to do. Just find some people who can help you to fix your off-by-one index errors!
Covers real world content in a fun and professional fashion. The course is flexible in that both quite skilled and relatively new programmers will find new knowledge.
The material in the course has significant real world relevance and that is why I think it is a useful course to take regardless of the specific area of research. Most research areas deal in big data, and parallelization goes hand in hand.
This is an incredibly useful class and teaches many of the paradigms associated with parallel computing. However, the PSets have very little support and you're mostly on your own to complete them. That being said, you'll learn a lot in the course. It's very fulfilling to resolve a bunch of race conditions and get your code to run across millions of threads.
This is a very practical, useful course. You learn from the beginning of parallel computing, course is designed to guide you step by step, where you will learn from examples, theory and at the end implement the program.
Best course I've taken at Harvard. This course is hard, but it also truly makes you think about your programming choices. I feel like I grew as a programmer and mathematician so much in such a short period of time. Prof. Cecka also does a fabulous job of making hard material very accessible and interesting and is also always happy to help during office hours and beyond! TAKE IT!
Great professor, fun assignments and very practical tools!
This class does take a lot of time, so start on all of the homework sets early. Usually the hardest part is figuring out exactly what you need to program. Sometimes the algorithms take a bit of time to sink in.
This is an excellent course that provides several unique methods to deal with large data problems utilizing parallel computing. The skills taught in this course will make anyone a stronger asset in their research or field of study.
A strong mathematics background is required.  The instructor tried to explain equations, but it is extremely difficult to parallelize them if you don't have a deep understanding of how to use them.  A decent background/intro to CS is also required - more so than the course description explains.This class can be a lot of work, but I find it useful.  I feel that my Python skills are very much improved after this semester.
Overall excellent class. This class teaches a lot of practical and pertinent skills, a rare quality at Harvard. Cris made the class awesome, and completing the problem sets was very satisfying since it taught a lot. Definitely doable coming from a student with just a CS50 background. That being said, there is very little documentation on the course material, debugging was extremely difficult, and homework was intense and took a lot of time. This class is very rewarding, but be prepared.
This class should be taken by any grad student who uses computers in their research. In our modern world it is important to be up to date on how one can harness the power of supercomputers effectively. So many people without proper background do it incorrectly, and this course helps you avoid common mistakes.
If you want to learn how to tackle large problem sets and parallelize data processing, take this class. Much of what I learned here was very applicable to other classes I was taking at the same time -- and for final projects for those other classes, being able to use this parallel toolkit really made analysis and data-related ops much more feasible!I'd definitely recommend. Some cool stuff here.
Fun class, with really cool psets! Start them well ahead of time though!
It's a very interesting class that teaches relevant topics to those venturing into scientific computing and data science.
Be aware that this is a course in parallel computing specifically, and not "the use of computers in solving scientific problems" generally (as the course abstract states).
This course was very interesting and fun.  The assignments were cool but could take a long time.  Cris Cecka is a great guy.
The course really gets your hands dirty with some good examples of parallel programming. The course doesn't really cover data visualization.
The class material is incredibly timely, and the assignments are important concepts to learn. That said, there's almost no faculty support for the material, so be willing to spend tens of hours debugging or cursing the lack of relevant lecture material. Lectures themselves are spent on fairly easy abstract ideas and no concrete examples or code snippets. I suppose if you're considering taking the class, you'll probably need it down the road and should take it anyway. That be said, know you will have many late nights debugging code for which little support exists online or in the course staff. Make friends early in the class or convince friends to take it with you.
This is an excellent course, at least in terms of the material and the well designed homework. However, the lectures are somewhat dull and poorly organized, and you can likely do just fine without attending them.
Great way to get hands-on experience with MPI and CUDA.
This course was quite enjoyable. The assignments can be deceptively time consuming, so be sure to put the time in.
A very well run course which introduces parallel programming and provides great hands-on experience with well-structured assignments which are fun and extremely satisfying to do. It is recommended to have basic programming knowledge, and the rest is taken care of by the great teaching staff and awesome assignments. Overall, this course is fun and lets us do some kick-ass stuff!!
I didn't get much out of this course, because I have a fair amount of programming experience.  On the other hand, if you don't have a lot of experience you will struggle, because the lectures don't prepare you for the homeworks. So it's an unhappy medium. The instructors aren't very responsive to questions; many reasonable questions went unanswered on Piazza. I spent about 15 hours on each of the 6 homeworks; others spent much longer.
It is a very rewarding class. Learning about the recent developments in parallel computing and getting to use them is really cool. The assignments take some time, but they are rewarding.
Super fun course.  Most lectures are solid, psets are conceptually doable yet fun (and time consuming), and I really enjoyed the material.  Watching your program enjoy huge speedups was pretty cool.
Take it; it's a lot of fun.
A good way to learn about handling large amounts of data and safe parallelism.
Fun class; you get to do work with a lot of parallelization tools, which is great considering the importance of big data. The course definitely goes from easy to hard pretty quickly after the first 2 or 3 psets. Lectures are dry and the slides are somewhat helpful, but its the psets where you really start to learn the material. The documentation for the libraries being used is very sparse, so be ready to play around and learn with trial and error. The teaching staff is not very helpful during office hours, and the psets are pretty lengthy as they require a lot of writeup and analysis. The final project is fun, but requires quite a bit during reading period.
This class gives a great introduction to parallel programming. The problem sets are fun and interesting and not too difficult even for someone with only a CS50/51 programming background.
This is a course that teaches leading edge techniques in data science, which is exciting. But because it is a young field, one should also be prepared for very limited documentation on the internet. However, the course is well worth it if you are willing to put in the time. If you want to learn how to process and analyze big data in your scientific discipline, in ways that most of your peers have never imagined, this is the course you want.
People who take this class should have a lot of programming experience.
If you really need to learn some parallel programming, this course will teach it to you, but will not do so in the most efficient way.
A good course for learning very applicable parallel programming skills, but not a theory course at all.
Very effective introduction to parallel computing.
I thought this was a great class. It taught a very applicable set of skills, the lectures were engaging, and the problem sets were really cool. Workload was definitely manageable but not a walk in the park.
This course is a lot of work, but you will learn how to "think in parallel".  Pretty cool
An interesting course and covers key parallel programming concepts. Cris Cecka is a great instructor and generally makes the course. I think he wrote most of the psets which are interesting and fun to code, but the writeups are pretty painful and can end up taking a whole day per assignment, so that is something to watch out for. The broad range of final presentations shows how useful the class can be. Definitely a time commitment thoughl
This course will be useful to anyone who works with real data on a daily basis, and especially those who work with very large data.
This course is a brief overview MapReduce, MPI, and CUDA and you will leave the course having a basic understanding and ability to use these. However, I felt the course to be disorganized and did not feel I was being challenged enough as a CS concentrator. I felt myself wanting to dig deeper into each topic. Overall the lectures were not very helpful and most people did not attend.
The material was really interesting, but it implementation was tedious. Hours would be spent on the problem set just debugging cryptic CUDA messages without much gain.
A good introduction to parallel programming paradigms, including MapReduce, MPI, and CUDA. Homework assignments are interesting programming exercises and not particularly difficult (they're also assigned once every two weeks).
The topics covered in this course are very interesting and applicable to real world problems.  The assignments and readings complement this.  The difficulty comes with time management and also waiting on resources when everyone is running at the same time.
tedious, not really informative, but even though there are some cool concepts there.
This course is well-organized and introduces important concepts applicable to a variety of areas of research. All PhD students in FAS (regardless of department) should aim to take at least this CS course prior to finishing their degrees.
This course is simply amazing at offering new tools to scientific researchers who use computers in their day to day research.  Some may criticize it for not delving too deep in the theory, but I believe that as a graduate student with 1000 things to do, I can find time to learn the theory *IF* I know the method is useful.  This class served the purpose of showing me those methods, and did so in an extremely effective way.
This course is worth it just to learn Map/Reduce.  Overall, the lectures were not helpful, and sections didn't really happen.
This course was an interesting introduction to parallel programming. The material is very broad in nature and covers everything from several ways of parallel programming through machine learning. This course focuses just on the computing aspects of parallel computing, so you should look into the applied math courses if you want to learn more about the math aspects
Great set of useful tools for modern computing, in academia and industry.
This course is geared for non-CS science graduate students and presents a breadth (rather than depth) overview of the listed topics. You aren't going to get into the nity grity of anything, but if you haven't done anything with the topics before will likely learn some good things to know.
its a good introduction to parallel computing.
Course material is somewhat interesting but not very applicable to anything you might want to do at or after Harvard. CS 50 is probably a much more helpful class for those with a lighter background in CS. A combination of easy assignments and unhelpful (excessively bloated with non-coding material as well) lectures has class attendance at less than 30% 3 weeks into the course.
This course spends a lot of time on specific tools and libraries for scientific computing, which is extremely useful now but might become obsolete quickly. Overall the ideas in this class are cool, the applications to research are many and interesting, and the power of scientific computing is pretty impressive. Be prepared to try and do something "real" or "novel" with your final project; you can't just make an implementation of something that's already been done before to see how it works.As someone who had done some limited self-teaching of programming, I found this to have some advantages over CS50: 1) it is taught in python, which I am told is a great 1st language. 2) It deals with really cool concepts and you get to do "powerful" computations in homework, which I happen to find more interesting than the lighter-weight, puzzle-solving things like in CS50. 3) It is directly related to using computation for science, which is arguably harder to pick up than general programming, due to the difficulty of getting set up with a computing cluster and other such resources. HOWEVER, it is probably better if you've had at least CS50 amount of preparation. They aren't teaching you programming basics, and I had to do a decent amount of self-study in python to get the programming background for the homework.
Good introduction to parallel programming, including MapReduce, MPI and GPU computing, as well as a part on machine learning. You will not go into any topic in great detail, but will definitely expand your toolkit for how to process your data faster and/or smarter. It is aimed at science grad students without extensive computer science backgrounds, and as part of that demographic I did find it useful.
Don't take the first few problem sets as indicative of the workload in the class - the homework picks up in difficulty and length.If you're an undergrad, understand that a lot of people in this class will be grad students or extension school students that towards the end of the semester have a lot more time to spend on the final project than you do. This can be really frustrating. Make sure you have a good topic for the final project that you anticipate the course staff to be excited about, otherwise coding up the final project will be a painful experience.
It's a fantastic class and I feel like I learned a lot. The problem sets were the best part of the exam -- they were a lot of fun and very challenging but interesting problems. That said, I spent an enormous amount of time on the problem sets each week -- multiple hours every day, including entire days devoted to CS 205 some weeks.
The early work with Python/MrJob is deceptively easy. The course gets much harder with advanced MPI and the GPU programming. Make sure you already feel comfortable with lots of Python and at least basic C/C++. If you've only ever coded in Matlab before, this class will be painfully hard. The end of the course is a little easier than the middle, but be sure to brush up on linear algebra and probability. The project is pretty difficult and they don't give you much time to complete it. Course staff were very helpful and I felt this was a "moderately" difficult course as far as grad-level classes go, and despite the lower difficulty I learned a lot.
This class is great! It is a very accessible introduction basic parallel computing and machine learning.
Material is very interesting, and covers many of the modern tools/topics. However, this became disorganized really fast, but this was the first year - definitely expect it to be more organized next year. Psets also felt like it was more about learning the syntax/framework (MPI, CUDA, pyplot) than the actual tools.
I thought this course was excellent overall.  As someone who wants experience with CS but doesn't want to make a career of it, I found the course very application-oriented, which is a refreshing change from a lot of the courses in the department that are more theoretical.  This semester, I overheard one of my other professors, one of the most well-respected in her field, saying that anyone who doesn't have a programming background is a "weenie" who will become irrelevant in the future.  So if you are in some sort of science (social/natural/physical) you should definitely take this course!
This class teaches you concepts about parallel programming and some machine learning in the end. The concepts are very cool. You learn most of the material through the homework (like all CS classes). You should take this class if you will do research using large data sets.
The homework can be a bit tedious.
A good introduction to parallel programming. Will still leave you with a lot left to learn, but you'll have a good start with this course.
Have experience with machine learning or stats
This is a good course and was very well structured for a first incarnation. It really only requires CS50 as a prereq and is a great CS course for someone who is not a CS major to take to get a real sense of where computing is going in the future. I HIGHLY recommend the course, only with the caution that the problem sets (as in any CS class) do take some time. If you hated that about CS50, be prepared for the same nightmarish debugging in Python for this class. That begin said, there is an online forum which is a lot of help and depending on how eager students are in your year, it can be really helpful. I would really recommend the course especially if you are not planning on taking very many other CS classes at Harvard. Good teaching staff and the class is incredibly well organized and structured. The final project is also a lot of fun!
This is a phenomenal course if you are interested in learning about parallel computing methods, but it requires a huge time commitment!
