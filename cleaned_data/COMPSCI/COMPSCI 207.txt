Great Course! I learned a lot about development and C++.
This class teaches you valuable skills (strong programming base in C++), but it can be very painful at times.  The problem sets can be very long and frustrating.  A strong background in CS, with exposure to C/C++ very helpful, and intermediate to advanced physics is required to understand several problem sets.  Cris is a great guy and a good lecturer, and he is very available to give help.
This is a great class where you learn about a lot of interesting programming techniques and then actually do a lot of programming (something a lot of CS departments just take for granted).  Someone with a strong grasp of C and some exposure to C++ would have a lot to gain from this class.  You could probably still get a fair amount out of the class even without a lot of programming experience but the labs take a lot of time, and will take even longer if you have to teach yourself C++ along the way.  It's very easy to write horrible code in C++.The biggest takeaway from the class is how the use of template metaprogramming can make your life easier and that's a lesson that you can't really appreciate until you have had to deal with the tangled mess that is C++
This is more than a programming class; getting code to compile and run is just part of the objective. You'll be forced to think about the programs you write in a rigorous, systematic way, making you a better programmer (and general problem solver).
This is one of the few courses at Harvard that actually teaches C++ and how to develop maintainable and reliable software.
This course is a great way to beef up your software engineering skills, particularly if you enjoy C++. The assignments are all physics simulations, so it's fun to watch them when they work (no physics background is required though). You'll learn a lot about writing good code, which most CS classes here don't offer.
Start psets early, and attend lectures, since there are no lecture notes/videos.  It's a fun course that's a classic "you get out of it what you put into it" class.
This course is about design patterns and principles, especially in C++.  I'd highly recommend the class, if that is what you would like to learn.  I'd encourage you to shop the class for a few days to get a feel for the subject material.
This course focuses on software development - design, documentation, implementation, and iteration/improvement.  Each assignment and project build upon the same base, and this is something that is not necessarily taught or done in many of the other courses here.  Definitely applicable to real world development situations.  You also learn a ton about C++ idiosyncratic weirdness.
As background, I'm a CS concentrator who has quite a fair bit of programming experience. Though that was the case, I didn't really have much experience with different design paradigms (or a solid understand of "good" software engineering), so I decided to take this class.For me, I feel much more confident as a software engineer after taking the class. Assignments made me think hard about how to design and abstract carefully, especially since code from earlier assignments was reused in latter ones. This is one of the few classes where you definitely spend more time thinking than implementing, which is definitely preferable to more mundane classes where you just mindlessly mash the keyboard for a couple of hours.Oh, and Cris Cecka is also super cool :).
A nice complement to taking a theoretical CS class (from the perspective of a CS undergrad)
Listen closely.
This is one of the very few engineering courses here. The material is extremely practical and useful, particularly if you're looking for a job in industry.
You learn to become a good programmer.
Take this class! Everyone needs to know how to code properly and C++ is just one language you neeed to learn about.
Useful for any future developer.
Start early on the homeworks; they will take some time. Pair debugging errors in more complex calculations is immensely helpful.
The course is challenging, but really the only of its kind to offer the type of background in software engineering for computational science you always wished you had, but never had the time or resources to learn.  Be prepared to invest a bit of time, but it's one of those rare classes that you feel the benefits from immediately as you start to code differently, and more effectively.
Future instances of the class will probably be very different, so take this evaluation with a grain of salt.
Awesome class. Eddie Kohler is awesome and generates a lot of enthusiasm for C++ and good software engineering! This class is about doing software engineering the right way. He presents a lot of very cool (and fitting) examples that really demonstrate all they key points in the course.
This is a good class if you want to learn about C++. You'll learn a lot about C++ abstraction and do amazing things with them.
I may never have taken this class were it not a requirement for my S.M. program. That would have been a shame, as it turned out to be the most useful and engaging class I have taken at Harvard so far. This course teaches very useful software engineering and computer science fundamentals that make you think very critically about the code you write.
This class is incredibly challenging, and will likely be very different without Cris teaching it next year, but I found it to be one of the most rewarding classes I've taken at Harvard. I recommend that any CS concentrator who wants to learn how to write production code and fundamentals of software design take this class as early as possible.
This class will make you a C++ god, and you will build really awesome projects. Be prepared to put a ton of time into it though. Also Cris is a fantastic teacher. He's incredibly passionate about coding well, and very funny.
Take this course if you want to learn more systems programming after CS61, if you want to learn C++, or if you just want a good course in general!  Cecka is a great professor and lecturer, and this class will force you to not only become acquainted with high (low) level concepts, but also force good programming habits on you.
Its kind of a lot of work. Sometimes tedious. Lectures not always relevant to class work.
Definitely kept my programming sword sharpened. I actually enjoyed most of the course, and the visualizations that resulted from our code were a great way to feel extra satisfied with yourself. That being said, I felt that a lot of the course was quite "fluffy", and much of the thinking that went into design patterns, loop invariants, representation functions, and abstraction functions seemed unnecessary to me. Maybe I'm just too inexperienced, but damn I was bored.
Great class to improve C++ skill. The materials taught in this class are very specific to C++.
This class takes a lot of time, make sure you have that time.
This is a very useful course, but you MUST have some previous experience with C++. This was actually my third attempt to take the course. The first time I realized after the first lecture that I wasn't ready, having only done Python and very basic C before. I did some preparation and tried to take it again the following year. I struggled with the first problem set, but got through it. Then I read the 2nd problem set and dropped the course. I then worked on a code base in C++ and picked up a lot of the basics before trying again. I finally felt prepared, and while it was still challenging, I learned a ton and it was very rewarding. 3rd time's the charm, as they say.
But come prepared.
Coming in as a physics concentrator, this was the first CS class I've taken that has been directly relevant to my field, and yet was still accessible outside of it. It wasn't an overly difficult course, Cecka was a great lecturer, and the psets were all very interesting. I honestly think that it made me a better programmer, and the tricks I learned with C++ were amazing. I would recommend this course to anyone, physics or not, though I would say that it makes life a little easier with a background in C (which most undergrads here would have anyway).
Hard C++ course with design focus
Make sure you have very good background in C++ and algorithms and data structures, or else you will suffer a lot
Need to take some c++ before taking this class.
CS 207 with Cris was awesome. It's a chance to focus a semester on developing your software engineering skills, which will go a long way in my opinion. The highlight for me was the problem sets, which begin with a lot of starter code and gradually wean you off so you are designing large portions on your own. The theme of the problem sets is a graph class which gets used to model water flow, rubber cloths, and a Poisson equation solver. If the same problem sets are kept next year, I would highly recommend 207, but unfortunately Cris is leaving so the course will be a bit different.
This class is amazing.  Cris is wonderful.  That said this course is HARD: some psets will absolutely own your life, and the midterm was insanely tough. Having experience with systems and algorithms definitely a must and having C++ experience makes it a lot better.  You will vastly improve as a programmer after taking this course.  Hopefully Cris keeps teaching it: he is amazing.
This is a great course that teaches a lot of good design principles and C++ in depth that's practical to Software Engineering. Each assignment builds on one another, so make sure to do well in the beginning. You also get to make cool physical visual simulations for each assignment. Cris definitely makes the course one of my favorite courses I've taken at Harvard.
Make sure you have a strong background in C++!
be prepared to work but also learn a lot
This course is not everyone's cup of tea, but if you want to get good at software development, you should take it!  The best part is when you start making animations that move.  Too cool.
This course provides a good, broad overview in systems development for C++. The learning curve at the beginning of the semester was quite steep for those unfamiliar with C++. The assignments were fun and varied. The assignments were also iterative, meaning we continuously built on code from previous assignments. The expectations for the midterm exam were perhaps a bit high, but it was curved generously.
Great and interesting course. The instructor never disappoints.
This is a fantastic course! Cris is awesome! He really brings you up to speed to get you writing cutting-edge code that will inevitably help you in your graduate research if you have to spend time writing any code at all. The HWs and final project are a lot of fun! Do not be afraid to take this course. Cris is very good and will teach you the essential concepts.
This class is awesome! If you want to feel like a true software engineer, learn some good principles, be a pro in c++ then take the class. Cris is also a really cool person, very approachable and really good at explaining! I had a great time in the class and highly highly recommend it!
A very good course but not necessarily worth going out of your way to take if there are others you're interested in. If you have a strong CS background you can take this with relatively little stress, though it is still enlightening (no other course covers C++ topics very well, and template-y stuff is interesting if a little ridiculous).Probably a good course if you're coming at it from a science standpoint, though the material may be a bit harder in that case. That said Cris definitely caters it towards science researchers so you'll be in good hands if so.
Awesome class for those wishing to improve programming skills; ignore at your own peril.
This was an awesome class, Cris is absolutely the BEST and I would highly highly recommend this class in the future!
This is a great class if you want to learn how to program in c++, and learn how to use the language properly. You will learn good design principles and apply them while working on the problem sets. I would highly recommend this course.
This course was super hard and time consuming for me, and to be honest, I'm quite worried about my final grade.  At the same time, I feel like my CS skills got SO much better- this is the only software engineering course I've taken, and it was so necessary.Regardless of your experience level, it definitely is time consuming, so plan on it.  Cecka definitely made it easier on us nearer to the end of the course.  C++ experience truly not required, and you'll learn a ton.  Good course, good teacher, very hard, but satisfied student.
A great class, difficult but rewarding, hopefully grading isn't punishing
Take this course, it is fun and very useful. All the things I have learned here are quite useful in my research and interviews. Now I am confident in the codes I am writing, and learn a lot more about software development, algorithm coding etc
You really don't need this course if you already are a good Python programmer that has used databases in the past. We never received feedback on any of the assignments (3 per week!). Save yourself the effort and take a proper CS course.
The course is certainly not well organized, as both instructors are recently on board. I find it's unreasonable and inappropriate study about Fourier transform, SAX, and other TimeSeries related topics in a Computer Science class. System development should be more focused on Software Development Life Cycle, by studying how to craft user story, analyze business requirements, TDD, design patterns, etc. Instructors aren't being to responsive on Piazza, although it's the formal channel of communication for this class. TF is having a hard time to grade Labs as none of them are numbered when posted on Piazza. Tons of time are spent to sort out logistics of the course, which is not good.
This class covers far too much material in too little detail. As a result, the pedagogy only can be absorbed if you have already learned the material before, in which case, you would not need to take this class in the first place.
30 labs homeworks, 6 hours of classes a week. Professor reads a wall of text/code to you every class via a ipython notebook. My undergraduate professor taught me BTrees over 3 hours of classes via pictures and examples, this class managed to do it in 10 minutes.No feedback on any of the work you have done. I don't know which labs are graded, what grades I got, whether the code is correct, etc.  A large part of the project consist of the professor providing you 95% of the code, and you filling in the blanks that he removed. There is no "system development" at all. This course should be renamed as "Filling in the Blanks from Computational Science"
Great way to make your python skills top notch, you will learn things in this class that you didn't know code could do. Also, afterwards will have an idea of what to learn on your own as a continuation of the class.
This is required for CSE Masters so, there wasn't a choice.
At this time, the content is not well structured, the staff expects to teach way too many things so we dont really have the opportunity to dig deeply in it. Also we dont have any feedback on our coding work (so no chance to improve yourself, its as if you were coding on your own so no need to take a course right?). And youll spend more times trying to figure out what the staff expect from you than actually doing and learning thing. If you are not forced dont waste your time here
Make sure you have a very good team to work with. A lot of the class learning comes from the team labs.
If you have a choice, I would strongly advise against taking this course. To be fair, this course was redone this year so the instructors had to recreate the material; perhaps it could be improved in the coming years. As it stands now though, it is very poorly organized and lacks a focus for what it is trying to achieve. It is trying to do too much for a single course, attempting to cover everything in detail. It spanned topics from data structures, to object-orientated programming, to compilers, to database systems, to web programming. It is mainly done in Python, but then tries to delve into the basics of C at one point. There's no problem with trying to cover a breadth of topics, but you cannot also expect to go into great depth if the course is to be effective. The course structure was haphazardly put together with material being prepared at the last minute. Assessments were too frequent, and yet took a long time to get marked and returned, often with no accompanying feedback aside from a number. The teaching was also lacking, often amounting to 90 minutes of speed reading an Ipython notebook aloud.
As this is the first offering of this course, future offerings may well be improved. The instructor seems very open to making improvements and this is a definite plus. This course is currently considered a core course in the Masters CSE program which means that people with a broad range of software development experience (from very experienced developers to students who have no CS background at all) are forced to take this course. It is extremely hard to organize a course in such a way that everyone will take away something from it, when the audience is so diverse. Perhaps what really needs to happen before this course can improve is out of the instructor's hands -- stop making this course mandatory. Alternatively, perhaps one "section" of the class can be held separately, for those with prior software development experience. In the meantime, future students should be aware that the course is still a work in progress.  In my view, the course needs to focus more on core skills, techniques, and packages that have clear transferability to industry... leave the really low-level stuff and theory to other CS courses.
You will learn a little about a lot of stuff.
This class is very difficult, especially for students with no experience is systems development. The amount of material covered in one semester is enormous and it is often hard to keep up with the weekly lab assignments (three per week). The lectures are way too quick to understand all the material and a lot of individual work is involved to catch up.
This course is a wonderful way to gain confidence in one's programming abilities. However, beware that, in this past iteration of the class, significant work was project work and there was no mechanism to keep partners accountable, leading to uneven division of work. Unless they come up with a better system for this, be sure that you're confident who you'll work with going in.
