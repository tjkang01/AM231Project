the course is mostly about program analysis; don't expect overviews of choices made in programming language design or types of programming languages. do your readings beforehand and be clear that you have; otherwise time taken to summarize might squash available discussion time.
Professor Chong is great, as usual. The course requires a good amount of reading of complicated research papers, which I unfortunately did not dedicate enough time to. There is a semester long research project. This has the potential to be amazing, but unfortunately I did not dedicate enough time to the project. The course deserves better than what I gave it. Take the course if you are very interested programming languages and program analysis. It's good to have quite a bit of background and a good amount of time to sit down and patiently read all of the course materials. Again, I did not feel as though I gave the class what it deserved. Hopefully you will.
Really the epitome of a great Harvard class. Three hours a week of informal discussion with a brilliant faculty member on really interesting papers in the field. You also get to work on a research project of your choice with a team of 1-4 people, meeting with Prof. Chong for ~0.5-1 hour each week. It's a great opportunity for small group discussions with a leading expert in the field. There were no problem sets, just paper readings. It's one of those classes where you get out as much as you put in -- in weeks where I had more time to digest the papers, I got more out of the discussion. I believe there was also variability in what the research groups accomplished. I would have liked to have seen more recent literature, but I understand that is difficult when trying to establish a broad range of accessible papers. The official pre'reqs are CS152, but it's also good to have other general CS knowledge: algorithms, complexity, and systems, as these topics are important for many research topics and appear in the papers. Mathematical maturity is also helpful, since CS academia is written in the language of mathematics (but you don't need to be a math genius; just be comfortable with proofs, etc.)
If you are interested in formal methods and programming languages, this is a great class to take.  Professor Chong is really excellent.
Working on the final project (including the weekly meeting with the professor) greatly enhanced my understanding of the material covered in class. Reading and understanding papers for the in-class discussions can be time consuming.
This particular iteration of 252r covered the interesting, but seemingly rather new, field of information flow.  The course readings were generally worthwhile, but were not always coherent or cohesive as a whole.  Though the structure and execution of this particular iteration of the course was not the best, the course overall was still worth taking, and the final research project was also an interesting exploration.  Even with the big picture sometimes missing, acquiring the details by taking the course was interesting and bore little overhead.
This course is very dependent on the topic and instructor, but if you're interested in the topic that's being covered, take it.
Make sure you're very interested in the subject before taking this course. Perhaps read a few of the papers ahead of time.
Good course; the final project is a semester long endeavor that will let you actually accomplish something relating to information flow. Steve is awesome and a great project adviser.
Really great course, with great discussions.
The topic was cybersecurity this year, but the topic will probably be really interesting every year so I'd highly recommend the course. To date, this has been my favorite course at Harvard. It had well-selected papers that hit topics I'd always wanted to learn more about (Bitcoin, Tor) and introduced me to topics I hadn't heard of before.
Great for digging in deep into compilers. Mostly focused on front-end optimizations and doesn't do muscular with codegeneration or runtime issues.
To non-PL students: you *can* take this class, and you *will* get a lot out of it, just be prepared to (a) feel like you're drowning for the first month-ish, and (b) spend a lot more time than everyone else outside of class during that period. Don't try to take it with a heavy load, but Greg will make the effort to make it work for you if you do. Take it.
Not the most organized this year, but the topic is extremely interesting.
A reasonable survey of techniques used to prove properties about systems.  In its current form, it's not very much work.  Of course, note to the reader, the "r" in "252r" means that the course material rotates...
Do the assignments and work in groups. Also, start on the assignments early as they require sink time (time when you're not actively working on them).
This year 252r was a very hands-on seminar on how to model and prove different programming language systems in coq. You learn how to use a very powerful tool (coq), and you get to hear Professor Morrisett share a lot of his insights as he codes in a way you're unlikely to get anywhere else. However, if you're not interested in the technicalities of computer-formalized pl theory, the class can be pretty random.
Greg is an excellent lecturer. The course was rather disorganized, but he probably won't give the same course again anyway, so it doesn't matter. Take a class from Greg. Your mind will expand.
You get out what you put in.
